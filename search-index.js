var N = null;var searchIndex = {};
searchIndex["jsonrpc_core"]={"doc":"Transport agnostic jsonrpc library.","items":[[3,"IoHandler","jsonrpc_core","Simplified `IoHandler` with no `Metadata` associated with each request.",N,N],[3,"MetaIoHandler","","Request handler",N,N],[4,"RemoteProcedure","","Possible Remote Procedures with Metadata",N,N],[13,"Method","","A method call",0,N],[13,"Notification","","A notification",0,N],[13,"Alias","","An alias to other method,",0,N],[4,"Compatibility","","`IoHandler` json-rpc protocol compatibility",N,N],[13,"V1","","Compatible only with JSON-RPC 1.x",1,N],[13,"V2","","Compatible only with JSON-RPC 2.0",1,N],[13,"Both","","Compatible with both",1,N],[11,"clone","","",0,[[["self"]],["remoteprocedure"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["compatibility"]]],[11,"default","","",1,[[],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["self"]]],[11,"with_compatibility","","Creates new `MetaIoHandler` compatible with specified protocol version.",2,[[["compatibility"]],["self"]]],[11,"new","","Creates new `MetaIoHandler`",2,[[["compatibility"],["s"]],["self"]]],[11,"with_middleware","","Creates new `MetaIoHandler` with specified middleware.",2,[[["s"]],["self"]]],[11,"add_alias","","Adds an alias to a method.",2,[[["self"],["str"],["str"]]]],[11,"add_method","","Adds new supported asynchronous method",2,[[["self"],["str"],["f"]]]],[11,"add_notification","","Adds new supported notification",2,[[["self"],["str"],["f"]]]],[11,"add_method_with_meta","","Adds new supported asynchronous method with metadata support.",2,[[["self"],["str"],["f"]]]],[11,"add_notification_with_meta","","Adds new supported notification with metadata support.",2,[[["self"],["str"],["f"]]]],[11,"extend_with","","Extend this `MetaIoHandler` with methods defined elsewhere.",2,[[["self"],["f"]]]],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",2,[[["self"],["str"],["t"]],["option",["string"]]]],[11,"handle_request","","Handle given request asynchronously.",2,[[["self"],["str"],["t"]],["futureresult"]]],[11,"handle_rpc_request","","Handle deserialized RPC request.",2,[[["self"],["request"],["t"]],["futurerpcresult"]]],[11,"handle_call","","Handle single call asynchronously.",2,[[["self"],["call"],["t"]],["either",["either"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["iohandler"]]],[11,"new","","Creates new `IoHandler` without any metadata.",3,[[],["self"]]],[11,"with_compatibility","","Creates new `IoHandler` without any metadata compatible with specified protocol version.",3,[[["compatibility"]],["self"]]],[11,"handle_request","","Handle given string request asynchronously.",3,[[["self"],["str"]],["futureresult",["futureresponse","futureoutput"]]]],[11,"handle_rpc_request","","Handle deserialized RPC request asynchronously.",3,[[["self"],["request"]],["futurerpcresult",["futureresponse","futureoutput"]]]],[11,"handle_call","","Handle single Call asynchronously.",3,[[["self"],["call"]],["either",["futureoutput","either"]]]],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",3,[[["self"],["str"]],["option",["string"]]]],[11,"deref","","",3,N],[11,"deref_mut","","",3,N],[11,"from","","",2,[[["iohandler"]],["self"]]],[0,"middleware","","`IoHandler` middlewares",N,N],[3,"Noop","jsonrpc_core::middleware","No-op middleware implementation",N,N],[6,"NoopFuture","","Dummy future used as a noop result of middleware.",N,N],[6,"NoopCallFuture","","Dummy future used as a noop call result of middleware.",N,N],[8,"Middleware","","RPC middleware",N,N],[16,"Future","","A returned request future.",4,N],[16,"CallFuture","","A returned call future.",4,N],[11,"on_request","","Method invoked on each request. Allows you to either respond directly (without executing RPC call) or do any additional work before and/or after processing the request.",4,[[["self"],["request"],["m"],["f"]],["either"]]],[11,"on_call","","Method invoked on each call inside a request.",4,[[["self"],["call"],["m"],["f"]],["either"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["noop"]]],[0,"types","jsonrpc_core","JSON-RPC types",N,N],[4,"Value","jsonrpc_core::types","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",6,N],[13,"Bool","","Represents a JSON boolean.",6,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",6,N],[13,"String","","Represents a JSON string.",6,N],[13,"Array","","Represents a JSON array.",6,N],[13,"Object","","Represents a JSON object.",6,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string","error"]]]],[0,"error","","jsonrpc errors",N,N],[3,"Error","jsonrpc_core::types::error","Error object as defined in Spec",N,N],[12,"code","","Code",7,N],[12,"message","","Message",7,N],[12,"data","","Optional data",7,N],[4,"ErrorCode","","JSONRPC error code",N,N],[13,"ParseError","","Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.",8,N],[13,"InvalidRequest","","The JSON sent is not a valid Request object.",8,N],[13,"MethodNotFound","","The method does not exist / is not available.",8,N],[13,"InvalidParams","","Invalid method parameter(s).",8,N],[13,"InternalError","","Internal JSON-RPC error.",8,N],[13,"ServerError","","Reserved for implementation-defined server-errors.",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["errorcode"]],["bool"]]],[11,"ne","","",8,[[["self"],["errorcode"]],["bool"]]],[11,"clone","","",8,[[["self"]],["errorcode"]]],[11,"code","","Returns integer code value",8,[[["self"]],["i64"]]],[11,"description","","Returns human-readable description",8,[[["self"]],["string"]]],[11,"from","","",8,[[["i64"]],["self"]]],[11,"deserialize","","",8,[[["d"]],["result",["errorcode"]]]],[11,"serialize","","",8,[[["self"],["s"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["error"]],["bool"]]],[11,"ne","","",7,[[["self"],["error"]],["bool"]]],[11,"clone","","",7,[[["self"]],["error"]]],[11,"new","","Wraps given `ErrorCode`",7,[[["errorcode"]],["self"]]],[11,"parse_error","","Creates new `ParseError`",7,[[],["self"]]],[11,"invalid_request","","Creates new `InvalidRequest`",7,[[],["self"]]],[11,"method_not_found","","Creates new `MethodNotFound`",7,[[],["self"]]],[11,"invalid_params","","Creates new `InvalidParams`",7,[[["m"]],["self"]]],[11,"internal_error","","Creates new `InternalError`",7,[[],["self"]]],[11,"invalid_version","","Creates new `InvalidRequest` with invalid version description",7,[[],["self"]]],[0,"id","jsonrpc_core::types","jsonrpc id field",N,N],[4,"Id","jsonrpc_core::types::id","Request Id",N,N],[13,"Null","","No id (notification)",9,N],[13,"Num","","Numeric id",9,N],[13,"Str","","String id",9,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["id"]],["bool"]]],[11,"ne","","",9,[[["self"],["id"]],["bool"]]],[11,"clone","","",9,[[["self"]],["id"]]],[11,"hash","","",9,N],[0,"params","jsonrpc_core::types","jsonrpc params field",N,N],[4,"Params","jsonrpc_core::types::params","Request parameters",N,N],[13,"None","","No parameters",10,N],[13,"Array","","Array of values",10,N],[13,"Map","","Map of values",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["params"]],["bool"]]],[11,"ne","","",10,[[["self"],["params"]],["bool"]]],[11,"clone","","",10,[[["self"]],["params"]]],[11,"parse","","Parse incoming `Params` into expected types.",10,[[["self"]],["result",["error"]]]],[0,"request","jsonrpc_core::types","jsonrpc request",N,N],[3,"MethodCall","jsonrpc_core::types::request","Represents jsonrpc request which is a method call.",N,N],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",11,N],[12,"method","","A String containing the name of the method to be invoked.",11,N],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",11,N],[12,"id","","An identifier established by the Client that MUST contain a String, Number, or NULL value if included. If it is not included it is assumed to be a notification.",11,N],[3,"Notification","","Represents jsonrpc request which is a notification.",N,N],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",12,N],[12,"method","","A String containing the name of the method to be invoked.",12,N],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",12,N],[4,"Call","","Represents single jsonrpc call.",N,N],[13,"MethodCall","","Call method",13,N],[13,"Notification","","Fire notification",13,N],[13,"Invalid","","Invalid call",13,N],[12,"id","jsonrpc_core::types::request::Call","Call id (if known)",13,N],[4,"Request","jsonrpc_core::types::request","Represents jsonrpc request.",N,N],[13,"Single","","Single request (call)",14,N],[13,"Batch","","Batch of requests (calls)",14,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["methodcall"]],["bool"]]],[11,"ne","","",11,[[["self"],["methodcall"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["notification"]],["bool"]]],[11,"ne","","",12,[[["self"],["notification"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["call"]],["bool"]]],[11,"ne","","",13,[[["self"],["call"]],["bool"]]],[11,"from","","",13,[[["methodcall"]],["self"]]],[11,"from","","",13,[[["notification"]],["self"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["request"]],["bool"]]],[11,"ne","","",14,[[["self"],["request"]],["bool"]]],[0,"response","jsonrpc_core::types","jsonrpc response",N,N],[3,"Success","jsonrpc_core::types::response","Successful response",N,N],[12,"jsonrpc","","Protocol version",15,N],[12,"result","","Result",15,N],[12,"id","","Correlation id",15,N],[3,"Failure","","Unsuccessful response",N,N],[12,"jsonrpc","","Protocol Version",16,N],[12,"error","","Error",16,N],[12,"id","","Correlation id",16,N],[4,"Output","","Represents output - failure or success",N,N],[13,"Success","","Success",17,N],[13,"Failure","","Failure",17,N],[4,"Response","","Synchronous response",N,N],[13,"Single","","Single response",18,N],[13,"Batch","","Response to batch request (batch of responses)",18,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["success"]],["bool"]]],[11,"ne","","",15,[[["self"],["success"]],["bool"]]],[11,"clone","","",15,[[["self"]],["success"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["failure"]],["bool"]]],[11,"ne","","",16,[[["self"],["failure"]],["bool"]]],[11,"clone","","",16,[[["self"]],["failure"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["output"]],["bool"]]],[11,"ne","","",17,[[["self"],["output"]],["bool"]]],[11,"clone","","",17,[[["self"]],["output"]]],[11,"from","","Creates new output given `Result`, `Id` and `Version`.",17,[[["coreresult",["value"]],["id"],["option",["version"]]],["self"]]],[11,"invalid_request","","Creates new failure output indicating malformed request.",17,[[["id"],["option",["version"]]],["self"]]],[11,"version","","Get the jsonrpc protocol version.",17,[[["self"]],["option",["version"]]]],[11,"id","","Get the correlation id.",17,[[["self"]],["id"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["response"]],["bool"]]],[11,"ne","","",18,[[["self"],["response"]],["bool"]]],[11,"from","","Creates new `Response` with given error and `Version`",18,[[["error"],["option",["version"]]],["self"]]],[11,"from","","",18,[[["failure"]],["self"]]],[11,"from","","",18,[[["success"]],["self"]]],[0,"version","jsonrpc_core::types","jsonrpc version field",N,N],[4,"Version","jsonrpc_core::types::version","Protocol Version",N,N],[13,"V2","","JSONRPC 2.0",19,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["version"]],["bool"]]],[11,"clone","","",19,[[["self"]],["version"]]],[11,"hash","","",19,N],[11,"serialize","","",19,[[["self"],["s"]],["result"]]],[11,"deserialize","","",19,[[["d"]],["result",["version"]]]],[6,"BoxFuture","jsonrpc_core","A `Future` trait object.",N,N],[6,"Result","","A Result type.",N,N],[6,"FutureOutput","","A type representing middleware or RPC call output.",N,N],[6,"FutureResult","","A type representing future string response.",N,N],[6,"FutureResponse","","A type representing middleware or RPC response before serialization.",N,N],[6,"FutureRpcResult","","A type representing an optional `Response` for RPC `Request`.",N,N],[8,"Metadata","","Metadata trait",N,N],[8,"RpcMethodSimple","","Asynchronous Method",N,N],[16,"Out","","Output future",20,N],[10,"call","","Call method",20,N],[8,"RpcMethod","","Asynchronous Method with Metadata",N,N],[10,"call","","Call method",21,[[["self"],["params"],["t"]],["boxfuture",["value"]]]],[8,"RpcNotificationSimple","","Notification",N,N],[10,"execute","","Execute notification",22,[[["self"],["params"]]]],[8,"RpcNotification","","Notification with Metadata",N,N],[10,"execute","","Execute notification",23,[[["self"],["params"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","jsonrpc_core::middleware","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"get","jsonrpc_core::types","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",6,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",6,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",6,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",6,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",6,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",6,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",6,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",6,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",6,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",6,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",6,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",6,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",6,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",6,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",6,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",6,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",6,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",6,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",6,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",6,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",6,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",6,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",6,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",6,[[["self"]],["value"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from_str","","",6,[[["str"]],["result",["value","error"]]]],[11,"deserialize","","",6,[[["d"]],["result",["value"]]]],[11,"serialize","","",6,[[["self"],["s"]],["result"]]],[11,"from","","",6,[[["i8"]],["value"]]],[11,"from","","Convert 64-bit floating point number to `Value`",6,[[["f64"]],["value"]]],[11,"from","","",6,[[["i64"]],["value"]]],[11,"from","","",6,[[["u32"]],["value"]]],[11,"from","","",6,[[["u64"]],["value"]]],[11,"from","","Convert string slice to `Value`",6,[[["str"]],["value"]]],[11,"from","","Convert boolean to `Value`",6,[[["bool"]],["value"]]],[11,"from","","",6,[[["usize"]],["value"]]],[11,"from","","Convert a `Vec` to `Value`",6,[[["vec"]],["value"]]],[11,"from","","",6,[[["i16"]],["value"]]],[11,"from","","Convert 32-bit floating point number to `Value`",6,[[["f32"]],["value"]]],[11,"from","","Convert `String` to `Value`",6,[[["string"]],["value"]]],[11,"from","","",6,[[["isize"]],["value"]]],[11,"from","","Convert map (with string keys) to `Value`",6,[[["map",["string","value"]]],["value"]]],[11,"from","","",6,[[["u16"]],["value"]]],[11,"from","","",6,[[["u8"]],["value"]]],[11,"from","","",6,[[["i32"]],["value"]]],[11,"from","","Convert copy-on-write string to `Value`",6,[[["cow",["str"]]],["value"]]],[11,"from","","Convert a slice to `Value`",6,N],[11,"fmt","","Display a JSON value as a string.",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",6,N],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"from_iter","","Convert an iteratable type to a `Value`",6,[[["i"]],["value"]]],[11,"default","","",6,[[],["value"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",6,[[["self"],["i"]],["value"]]],[11,"eq","","",6,[[["self"],["u64"]],["bool"]]],[11,"eq","","",6,[[["self"],["u16"]],["bool"]]],[11,"eq","","",6,[[["self"],["bool"]],["bool"]]],[11,"eq","","",6,[[["self"],["isize"]],["bool"]]],[11,"eq","","",6,[[["self"],["f32"]],["bool"]]],[11,"eq","","",6,[[["self"],["u8"]],["bool"]]],[11,"eq","","",6,[[["self"],["i32"]],["bool"]]],[11,"eq","","",6,[[["self"],["i64"]],["bool"]]],[11,"eq","","",6,[[["self"],["string"]],["bool"]]],[11,"eq","","",6,[[["self"],["str"]],["bool"]]],[11,"eq","","",6,[[["self"],["f64"]],["bool"]]],[11,"eq","","",6,[[["self"],["i16"]],["bool"]]],[11,"eq","","",6,[[["self"],["i8"]],["bool"]]],[11,"eq","","",6,[[["self"],["value"]],["bool"]]],[11,"ne","","",6,[[["self"],["value"]],["bool"]]],[11,"eq","","",6,[[["self"],["usize"]],["bool"]]],[11,"eq","","",6,[[["self"],["u32"]],["bool"]]],[11,"eq","","",6,[[["self"],["str"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",6,[[["self"],["i"]],["value"]]],[11,"clone","","",6,[[["self"]],["value"]]],[11,"to_owned","jsonrpc_core::types::error","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","jsonrpc_core::types::id","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","jsonrpc_core::types::params","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","jsonrpc_core::types::request","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","jsonrpc_core::types::response","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","jsonrpc_core","Convert into a result. Will be `Ok` if it is a `Success` and `Err` if `Failure`.",24,[[["output"]],["coreresult",["value"]]]],[11,"to_owned","jsonrpc_core::types::version","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]]],"paths":[[4,"RemoteProcedure"],[4,"Compatibility"],[3,"MetaIoHandler"],[3,"IoHandler"],[8,"Middleware"],[3,"Noop"],[4,"Value"],[3,"Error"],[4,"ErrorCode"],[4,"Id"],[4,"Params"],[3,"MethodCall"],[3,"Notification"],[4,"Call"],[4,"Request"],[3,"Success"],[3,"Failure"],[4,"Output"],[4,"Response"],[4,"Version"],[8,"RpcMethodSimple"],[8,"RpcMethod"],[8,"RpcNotificationSimple"],[8,"RpcNotification"],[6,"Result"]]};
searchIndex["jsonrpc_http_server"]={"doc":"jsonrpc http server.","items":[[3,"Host","jsonrpc_http_server","Host type",N,N],[4,"DomainsValidation","","Specifies if domains should be validated.",N,N],[13,"AllowOnly","","Allow only domains on the list.",0,N],[13,"Disabled","","Disable domains validation completely.",0,N],[0,"cors","","CORS handling utility functions",N,N],[4,"OriginProtocol","jsonrpc_http_server::cors","Origin Protocol",N,N],[13,"Http","","Http protocol",1,N],[13,"Https","","Https protocol",1,N],[13,"Custom","","Custom protocol",1,N],[3,"Origin","","Request Origin",N,N],[4,"AccessControlAllowOrigin","","Origins allowed to access",N,N],[13,"Value","","Specific hostname",2,N],[13,"Null","","null-origin (file:///, sandboxed iframe)",2,N],[13,"Any","","Any non-null origin",2,N],[4,"AccessControlAllowHeaders","","Headers allowed to access",N,N],[13,"Only","","Specific headers",3,N],[13,"Any","","Any header",3,N],[4,"AllowCors","","CORS response headers",N,N],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",4,N],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",4,N],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",4,N],[5,"get_cors_allow_origin","","Returns correct CORS header (if any) given list of allowed origins and current origin.",N,[[["option",["str"]],["option",["str"]],["option"]],["allowcors",["accesscontrolalloworigin"]]]],[5,"get_cors_allow_headers","","Validates if the `AccessControlAllowedHeaders` in the request are allowed.",N,[[["impl iterator<item = t>"],["impl iterator<item = t>"],["accesscontrolallowheaders"],["f"]],["allowcors",["vec"]]]],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",N,N],[4,"AccessControlAllowOrigin","jsonrpc_http_server","Origins allowed to access",N,N],[13,"Value","","Specific hostname",2,N],[13,"Null","","null-origin (file:///, sandboxed iframe)",2,N],[13,"Any","","Any non-null origin",2,N],[3,"Origin","","Request Origin",N,N],[4,"AllowCors","","CORS response headers",N,N],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",4,N],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",4,N],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",4,N],[0,"clock","jsonrpc_http_server::tokio","A configurable source of time.",N,N],[5,"now","jsonrpc_http_server::tokio::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[0,"codec","jsonrpc_http_server::tokio","Utilities for encoding and decoding frames.",N,N],[0,"length_delimited","jsonrpc_http_server::tokio::codec","Frame a stream of bytes based on a length prefix",N,N],[3,"Builder","jsonrpc_http_server::tokio::codec::length_delimited","Configure length delimited `LengthDelimitedCodec`s.",N,N],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",N,N],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",N,N],[3,"LinesCodec","jsonrpc_http_server::tokio::codec","A simple `Codec` implementation that splits up data into lines.",N,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[8,"Decoder","","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",5,N],[16,"Error","","The type of unrecoverable frame decoding errors.",5,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",5,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",5,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",5,[[["self"],["t"]],["framed"]]],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",6,N],[16,"Error","","The type of encoding errors.",6,N],[10,"encode","","Encodes a frame into the buffer provided.",6,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",7,N],[12,"codec","","The codec",7,N],[12,"read_buf","","The buffer with read but unprocessed data.",7,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",7,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[0,"executor","jsonrpc_http_server::tokio","Task execution utilities.",N,N],[3,"Spawn","jsonrpc_http_server::tokio::executor","Return value from the `spawn` function.",N,N],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[8,"Executor","","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",8,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,[[["self"]],["result",["spawnerror"]]]],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[0,"fs","jsonrpc_http_server::tokio","Asynchronous filesystem manipulation operations.",N,N],[5,"create_dir_all","jsonrpc_http_server::tokio::fs","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"create_dir","","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"hard_link","","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"read_dir","","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[0,"os","","OS-specific functionality.",N,N],[0,"unix","jsonrpc_http_server::tokio::fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[5,"symlink","jsonrpc_http_server::tokio::fs::os::unix","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[3,"SymlinkFuture","","Future returned by `symlink`.",N,N],[5,"remove_dir","jsonrpc_http_server::tokio::fs","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[3,"File","","A reference to an open file on the filesystem.",N,N],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"CreateFuture","jsonrpc_http_server::tokio::fs::file","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(File, Metadata)` instance.",N,N],[0,"io","jsonrpc_http_server::tokio","Asynchronous I/O.",N,N],[5,"copy","jsonrpc_http_server::tokio::io","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",9,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",9,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",9,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",9,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",9,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",9,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",9,[[["self"]],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",9,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",9,[[["self"],["u64"]],["take"]]],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",10,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",10,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",10,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",10,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",10,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",11,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",11,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",11,N],[13,"ConnectionReset","","The connection was reset by the remote server.",11,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",11,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",11,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",11,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",11,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",11,N],[13,"AlreadyExists","","An entity already exists, often a file.",11,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",11,N],[13,"InvalidInput","","A parameter was incorrect.",11,N],[13,"InvalidData","","Data not valid for the operation were encountered.",11,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",11,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",11,N],[13,"Interrupted","","This operation was interrupted.",11,N],[13,"Other","","Any I/O error not part of this list.",11,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",11,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",12,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",12,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",12,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",12,[[["self"],["b"]],["result",["async","error"]]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",13,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",13,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",13,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",13,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",13,[[["self"]],["self"]]],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[0,"net","jsonrpc_http_server::tokio","TCP/UDP/Unix bindings for `tokio`.",N,N],[0,"tcp","jsonrpc_http_server::tokio::net","TCP bindings for `tokio`.",N,N],[3,"TcpStream","jsonrpc_http_server::tokio::net::tcp","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[0,"udp","jsonrpc_http_server::tokio::net","UDP bindings for `tokio`.",N,N],[3,"UdpFramed","jsonrpc_http_server::tokio::net::udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[0,"unix","jsonrpc_http_server::tokio::net","Unix domain socket bindings for `tokio` (only available on unix systems).",N,N],[3,"UCred","jsonrpc_http_server::tokio::net::unix","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",14,N],[12,"gid","","GID (group ID) of the process",14,N],[3,"ConnectFuture","","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[0,"prelude","jsonrpc_http_server::tokio","A \"prelude\" for users of the `tokio` crate.",N,N],[8,"FutureExt","jsonrpc_http_server::tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new future which allows `self` until `timeout`.",15,[[["self"],["duration"]],["timeout"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",16,N],[16,"Error","","The type of error this stream may generate.",16,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",16,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",16,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",16,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",16,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",16,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",16,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",16,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",16,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",16,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",16,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",16,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",16,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",16,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",16,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",16,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",16,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",16,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",16,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",16,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",16,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",16,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",16,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",16,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",16,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",16,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",16,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",16,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",16,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",16,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",16,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",16,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",16,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",16,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",16,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",16,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",16,[[["self"],["f"]],["inspecterr"]]],[0,"future","","Futures",N,N],[8,"Future","jsonrpc_http_server::tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",17,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",17,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",17,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",17,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",17,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",17,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",17,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",17,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",17,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",17,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",17,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",17,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",17,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",17,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",17,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",17,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",17,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",17,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",17,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",17,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",17,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",17,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",17,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",18,N],[16,"Item","","The item that the future may resolve with.",18,N],[16,"Error","","The error that the future may resolve with.",18,N],[10,"into_future","","Consumes this object and produces a future.",18,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",19,N],[16,"Error","","Possible errors during conversion.",19,N],[10,"future_from","","Consume the given value, beginning the conversion.",19,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",20,[[["self"],["f"]],["result",["executeerror"]]]],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",21,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",21,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Err","","A future representing a value that is immediately ready.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",22,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",22,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[3,"Empty","","A future which is never resolved.",N,N],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",23,N],[13,"B","","Second branch of the type",23,N],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[8,"Sink","jsonrpc_http_server::tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",24,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",24,N],[10,"start_send","","Begin the process of sending a value to the sink.",24,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",24,[[["self"]],["result",["async"]]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",24,[[["self"]],["result",["async"]]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",24,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",24,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",24,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",24,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",24,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",24,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",24,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",24,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",24,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",24,[[["self"],["s"]],["sendall"]]],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",25,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",25,N],[0,"task","","Tasks used to drive a future computation",N,N],[5,"spawn","jsonrpc_http_server::tokio::prelude::task","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",26,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",27,N],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[5,"init","","Initialize the `futures` task system.",N,N],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",28,N],[8,"StreamExt","jsonrpc_http_server::tokio::prelude","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",29,[[["self"],["duration"]],["timeout"]]],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",30,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",30,N],[0,"stream","","Asynchronous streams",N,N],[0,"futures_unordered","jsonrpc_http_server::tokio::prelude::stream","An unbounded set of futures.",N,N],[3,"FuturesUnordered","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[5,"futures_unordered","jsonrpc_http_server::tokio::prelude::stream","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Sender","","The transmission end of a channel which is used to send values.",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",31,N],[12,"1","","",31,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",32,N],[13,"Second","","An item from the second stream",32,N],[13,"Both","","Items from both streams",32,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"FutureSender","","Future returned by `Sender::send`.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[6,"Poll","jsonrpc_http_server::tokio::prelude","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"reactor","jsonrpc_http_server::tokio","Event loop that drives Tokio I/O resources.",N,N],[3,"Turn","jsonrpc_http_server::tokio::reactor","Return value from the `turn` method on `Reactor`.",N,N],[3,"Background","","Handle to the reactor running on a background thread.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[0,"runtime","jsonrpc_http_server::tokio","A batteries included runtime for applications using Tokio.",N,N],[0,"current_thread","jsonrpc_http_server::tokio::runtime","A runtime implementation that runs everything on the current thread.",N,N],[5,"block_on_all","jsonrpc_http_server::tokio::runtime::current_thread","Run the provided future to completion using a runtime running on the current thread.",N,[[["f"]],["result"]]],[3,"Builder","","Builds a Single-threaded runtime with custom configuration values.",N,N],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",N,N],[3,"Runtime","jsonrpc_http_server::tokio::runtime","Handle to the Tokio runtime.",N,N],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,N],[3,"TaskExecutor","","Executes futures on the runtime",N,N],[3,"Builder","","Builds Tokio Runtime with custom configuration values.",N,N],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",N,N],[0,"timer","jsonrpc_http_server::tokio","Utilities for tracking time.",N,N],[3,"DelayQueue","jsonrpc_http_server::tokio::timer","A queue of delayed elements.",N,N],[0,"delay_queue","","A queue of delayed elements.",N,N],[3,"Expired","jsonrpc_http_server::tokio::timer::delay_queue","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[3,"Timeout","jsonrpc_http_server::tokio::timer","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[0,"timeout","","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Error","jsonrpc_http_server::tokio::timer::timeout","Error returned by `Timeout`.",N,N],[3,"Delay","jsonrpc_http_server::tokio::timer","A future that completes at a specified instant in time.",N,N],[0,"util","jsonrpc_http_server::tokio","Utilities for working with Tokio.",N,N],[3,"SuspendableStream","jsonrpc_http_server","`Incoming` is a stream of incoming sockets Polling the stream may return a temporary io::Error (for instance if we can't open the connection because of \"too many open files\" limit) we use for_each combinator which: 1. Runs for every Ok(socket) 2. Stops on the FIRST Err() So any temporary io::Error will cause the entire server to terminate. This wrapper type for tokio::Incoming stops accepting new connections for a specified amount of time once an io::Error is encountered",N,N],[3,"ServerHandler","","jsonrpc http request handler.",N,N],[3,"Response","","Simple server response structure",N,N],[12,"code","","Response code",33,N],[12,"content_type","","Response content type",33,N],[12,"content","","Response body",33,N],[3,"Rpc","","RPC Handler bundled with metadata extractor.",N,N],[12,"handler","","RPC Handler",34,N],[12,"extractor","","Metadata extractor",34,N],[3,"ServerBuilder","","Convenient JSON-RPC HTTP Server builder.",N,N],[3,"Server","","jsonrpc http server instance",N,N],[4,"RequestMiddlewareAction","","Action undertaken by a middleware.",N,N],[13,"Proceed","","Proceed with standard RPC handling",35,N],[12,"should_continue_on_invalid_cors","jsonrpc_http_server::RequestMiddlewareAction","Should the request be processed even if invalid CORS headers are detected? This allows for side effects to take place.",35,N],[12,"request","","The request object returned",35,N],[13,"Respond","jsonrpc_http_server","Intercept the request and respond differently.",35,N],[12,"should_validate_hosts","jsonrpc_http_server::RequestMiddlewareAction","Should standard hosts validation be performed?",35,N],[12,"response","","a future for server response",35,N],[4,"RestApi","jsonrpc_http_server","REST -> RPC converter state.",N,N],[13,"Secure","","The REST -> RPC converter is enabled and requires `Content-Type: application/json` header (even though the body should be empty). This protects from submitting an RPC call from unwanted origins.",36,N],[13,"Unsecure","","The REST -> RPC converter is enabled and does not require any `Content-Type` headers. NOTE: This allows sending RPCs via HTTP forms from any website.",36,N],[13,"Disabled","","The REST -> RPC converter is disabled.",36,N],[5,"is_host_allowed","","Returns `true` if Host header in request matches a list of allowed hosts.",N,[[["request"],["option"]],["bool"]]],[5,"cors_allow_origin","","Returns a CORS AllowOrigin header that should be returned with that request.",N,[[["request"],["option"]],["allowcors",["headervalue"]]]],[5,"cors_allow_headers","","Returns the CORS AllowHeaders header that should be returned with that request.",N,[[["request"],["accesscontrolallowheaders"]],["allowcors",["vec"]]]],[11,"new","","Create new request handler.",37,[[["rpc"],["option",["vec"]],["option",["u32"]],["accesscontrolallowheaders"],["option",["vec"]],["arc",["requestmiddleware"]],["restapi"],["option"],["usize"],["bool"]],["self"]]],[11,"call","","",37,N],[11,"wait","jsonrpc_http_server::tokio::prelude::future","Block the current thread until this future is resolved.",17,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",17,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",17,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",17,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",17,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",17,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",17,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",17,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",17,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",17,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",17,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",17,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",17,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",17,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",17,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",17,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",17,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",17,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",17,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",17,[[["self"]],["shared"]]],[11,"wait","jsonrpc_http_server::tokio::prelude","Creates an iterator which blocks the current thread until each item of this stream is resolved.",16,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",16,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",16,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",16,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",16,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",16,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",16,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",16,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",16,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",16,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",16,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",16,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",16,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",16,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",16,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",16,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",16,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",16,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",16,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",16,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",16,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",16,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",16,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",16,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",16,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",16,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",16,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",16,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",16,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",16,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",16,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",16,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",16,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",16,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",16,[[["self"],["f"]],["inspecterr"]]],[11,"fmt","jsonrpc_http_server","",33,[[["self"],["formatter"]],["result"]]],[11,"empty","","Create a response with empty body and 200 OK status code.",33,[[],["self"]]],[11,"ok","","Create a response with given body and 200 OK status code.",33,[[["t"]],["self"]]],[11,"internal_error","","Create a response for plaintext internal error.",33,[[["t"]],["self"]]],[11,"service_unavailable","","Create a json response for service unavailable.",33,[[["t"]],["self"]]],[11,"host_not_allowed","","Create a response for not allowed hosts.",33,[[],["self"]]],[11,"unsupported_content_type","","Create a response for unsupported content type.",33,[[],["self"]]],[11,"method_not_allowed","","Create a response for disallowed method used.",33,[[],["self"]]],[11,"invalid_allow_origin","","CORS invalid",33,[[],["self"]]],[11,"invalid_allow_headers","","CORS header invalid",33,[[],["self"]]],[11,"bad_request","","Create a response for bad request",33,[[["s"]],["self"]]],[11,"too_large","","Create a response for too large (413)",33,[[["s"]],["self"]]],[8,"RequestMiddleware","","Allows to intercept request and handle it differently.",N,N],[10,"on_request","","Takes a request and decides how to proceed with it.",38,[[["self"],["request",["body"]]],["requestmiddlewareaction"]]],[8,"MetaExtractor","","Extracts metadata from the HTTP request.",N,N],[10,"read_metadata","","Read the metadata from the request",39,[[["self"],["request"]],["m"]]],[11,"from","","",35,[[["response"]],["self"]]],[11,"from","","",35,[[["response",["body"]]],["self"]]],[11,"from","","",35,[[["request",["body"]]],["self"]]],[11,"clone","","",34,[[["self"]],["self"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["restapi"]],["bool"]]],[11,"clone","","",36,[[["self"]],["restapi"]]],[11,"new","","Creates new `ServerBuilder` for given `IoHandler`.",40,[[["t"]],["self"]]],[11,"with_meta_extractor","","Creates new `ServerBuilder` for given `IoHandler`.",40,[[["t"],["e"]],["self"]]],[11,"event_loop_executor","","Utilize existing event loop executor to poll RPC results.",40,[[["self"],["taskexecutor"]],["self"]]],[11,"rest_api","","Enable the REST -> RPC converter.",40,[[["self"],["restapi"]],["self"]]],[11,"health_api","","Enable health endpoint.",40,[[["self"],["t"]],["self"]]],[11,"keep_alive","","Enables or disables HTTP keep-alive.",40,[[["self"],["bool"]],["self"]]],[11,"threads","","Sets number of threads of the server to run.",40,[[["self"],["usize"]],["self"]]],[11,"cors","","Configures a list of allowed CORS origins.",40,[[["self"],["domainsvalidation",["accesscontrolalloworigin"]]],["self"]]],[11,"cors_max_age","","Configure CORS `AccessControlMaxAge` header returned.",40,[[["self"],["t"]],["self"]]],[11,"cors_allow_headers","","Configure the CORS `AccessControlAllowHeaders` header which are allowed.",40,[[["self"],["accesscontrolallowheaders"]],["self"]]],[11,"request_middleware","","Configures request middleware",40,[[["self"],["t"]],["self"]]],[11,"meta_extractor","","Configures metadata extractor",40,[[["self"],["t"]],["self"]]],[11,"allow_only_bind_host","","Allow connections only with `Host` header set to binding address.",40,[[["self"]],["self"]]],[11,"allowed_hosts","","Specify a list of valid `Host` headers. Binding address is allowed automatically.",40,[[["self"],["domainsvalidation",["host"]]],["self"]]],[11,"max_request_body_size","","Sets the maximum size of a request body in bytes (default is 5 MiB).",40,[[["self"],["usize"]],["self"]]],[11,"start_http","","Start this JSON-RPC HTTP server trying to bind to specified `SocketAddr`.",40,[[["self"],["socketaddr"]],["result",["server"]]]],[11,"address","","Returns address of this server",41,[[["self"]],["socketaddr"]]],[11,"close","","Closes the server.",41,[[["self"]]]],[11,"wait","","Will block, waiting for the server to finish.",41,[[["self"]]]],[11,"drop","","",41,[[["self"]]]],[11,"new","","Creates a new `Host` given hostname and port number.",42,[[["str"],["t"]],["host"]]],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",42,[[["str"]],["host"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"equivalent","","",42,[[["self"],["k"]],["bool"]]],[11,"partial_cmp","jsonrpc_http_server::tokio::io","",11,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",43,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",43,[[["nulerror"]],["error"]]],[11,"from","","",43,[[["intoinnererror"]],["error"]]],[11,"description","","",43,[[["self"]],["str"]]],[11,"cause","","",43,[[["self"]],["option",["error"]]]],[11,"clone","","",11,[[["self"]],["errorkind"]]],[11,"hash","","",11,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",11,[[["self"],["errorkind"]],["bool"]]],[11,"cmp","","",11,[[["self"],["errorkind"]],["ordering"]]],[11,"eq","jsonrpc_http_server::cors","",44,[[["self"],["s2"]],["bool"]]],[11,"from_str","","",44,[[["str"]],["result",["ascii"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",44,[[["self"]],["s"]]],[11,"as_ref","","",44,[[["self"]],["str"]]],[11,"hash","","",44,N],[11,"partial_cmp","","",44,[[["self"],["ascii"]],["option",["ordering"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",44,[[["self"]],["ascii"]]],[11,"deref_mut","","",44,[[["self"]],["s"]]],[11,"cmp","","",44,[[["self"],["ascii"]],["ordering"]]],[11,"eq","","",3,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",3,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","jsonrpc_http_server","",4,[[["self"],["allowcors"]],["bool"]]],[11,"ne","","",4,[[["self"],["allowcors"]],["bool"]]],[11,"eq","jsonrpc_http_server::cors","",1,[[["self"],["originprotocol"]],["bool"]]],[11,"ne","","",1,[[["self"],["originprotocol"]],["bool"]]],[11,"eq","jsonrpc_http_server","",42,[[["self"],["host"]],["bool"]]],[11,"ne","","",42,[[["self"],["host"]],["bool"]]],[11,"eq","","",2,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",2,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",45,[[["self"],["origin"]],["bool"]]],[11,"ne","","",45,[[["self"],["origin"]],["bool"]]],[11,"eq","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"ne","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::cors","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::cors","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","jsonrpc_http_server","",45,N],[11,"deref","","",42,N],[11,"matches","","",42,[[["self"],["t"]],["bool"]]],[11,"matches","","",45,[[["self"],["t"]],["bool"]]],[11,"hash","jsonrpc_http_server::cors","",1,N],[11,"hash","jsonrpc_http_server","",42,N],[11,"hash","","",45,N],[11,"from","","",45,[[["t"]],["origin"]]],[11,"from","","",42,[[["t"]],["host"]]],[11,"from","","",2,[[["t"]],["accesscontrolalloworigin"]]],[11,"from","","",0,[[["option",["vec"]]],["domainsvalidation"]]],[11,"poll","","",46,[[["self"]],["result",["async"]]]],[11,"into","","",0,[[["self"]],["option",["vec"]]]],[11,"into","","",4,[[["self"]],["option"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["domainsvalidation"]]],[11,"clone","jsonrpc_http_server::cors","",3,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",1,[[["self"]],["originprotocol"]]],[11,"clone","jsonrpc_http_server","",42,[[["self"]],["host"]]],[11,"clone","","",2,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",45,[[["self"]],["origin"]]],[11,"clone","","",4,[[["self"]],["allowcors"]]],[11,"from_iter","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","",47,[[["t"]],["futuresunordered"]]],[11,"from_iter","jsonrpc_http_server::tokio::prelude::stream","",48,[[["t"]],["futuresordered"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",51,[[["result"]],["futureresult"]]],[11,"from","jsonrpc_http_server::tokio::prelude","",30,[[["t"]],["async"]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",52,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::future","",53,[[["self"]],["result",["async"]]]],[11,"poll","","",54,[[["self"]],["result",["async"]]]],[11,"poll","","",23,[[["self"]],["result",["async"]]]],[11,"poll","","",55,[[["self"]],["result",["async"]]]],[11,"poll","","",56,[[["self"]],["result",["async"]]]],[11,"poll","","",57,[[["self"]],["result",["async"]]]],[11,"poll","","",58,[[["self"]],["result",["async"]]]],[11,"poll","","",59,[[["self"]],["result",["async"]]]],[11,"poll","","",60,[[["self"]],["result",["async"]]]],[11,"poll","","",61,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",62,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::future","",63,[[["self"]],["result",["async"]]]],[11,"poll","","",64,[[["self"]],["result",["async"]]]],[11,"poll","","",65,[[["self"]],["result",["async"]]]],[11,"poll","","",66,[[["self"]],["result",["async"]]]],[11,"poll","","",67,[[["self"]],["result",["async"]]]],[11,"poll","","",68,[[["self"]],["result",["async"]]]],[11,"poll","","",69,[[["self"]],["result",["async"]]]],[11,"poll","","",70,[[["self"]],["result",["async"]]]],[11,"poll","","",71,[[["self"]],["result",["async"]]]],[11,"poll","","",72,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",73,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::future","",74,[[["self"]],["result",["async"]]]],[11,"poll","","",75,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",76,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::future","",77,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",78,[[["self"]],["result",["async"]]]],[11,"poll","","",79,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::future","",80,[[["self"]],["result",["async"]]]],[11,"poll","","",81,[[["self"]],["result",["async"]]]],[11,"poll","","",82,[[["self"]],["result",["async"]]]],[11,"poll","","",51,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",83,[[["self"]],["result",["async"]]]],[11,"poll","","",84,[[["self"]],["result",["async"]]]],[11,"start_send","","",85,N],[11,"poll_complete","","",85,[[["self"]],["result",["async"]]]],[11,"close","","",85,[[["self"]],["result",["async"]]]],[11,"start_send","","",86,N],[11,"poll_complete","","",86,[[["self"]],["result",["async"]]]],[11,"close","","",86,[[["self"]],["result",["async"]]]],[11,"start_send","","",87,N],[11,"poll_complete","","",87,[[["self"]],["result",["async"]]]],[11,"close","","",87,[[["self"]],["result",["async"]]]],[11,"start_send","","",88,N],[11,"poll_complete","","",88,[[["self"]],["result",["async"]]]],[11,"close","","",88,[[["self"]],["result",["async"]]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["result",["async"]]]],[11,"close","","",89,[[["self"]],["result",["async"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["result",["async"]]]],[11,"close","","",90,[[["self"]],["result",["async"]]]],[11,"start_send","","",91,N],[11,"poll_complete","","",91,[[["self"]],["result",["async"]]]],[11,"close","","",91,[[["self"]],["result",["async"]]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["result",["async"]]]],[11,"close","","",92,[[["self"]],["result",["async"]]]],[11,"start_send","","",93,N],[11,"poll_complete","","",93,[[["self"]],["result",["async"]]]],[11,"close","","",93,[[["self"]],["result",["async"]]]],[11,"start_send","","",94,N],[11,"poll_complete","","",94,[[["self"]],["result",["async"]]]],[11,"close","","",94,[[["self"]],["result",["async"]]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["result",["async"]]]],[11,"close","","",95,[[["self"]],["result",["async"]]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["result",["async"]]]],[11,"close","","",96,[[["self"]],["result",["async"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["result",["async"]]]],[11,"close","","",97,[[["self"]],["result",["async"]]]],[11,"start_send","","",98,N],[11,"poll_complete","","",98,[[["self"]],["result",["async"]]]],[11,"close","","",98,[[["self"]],["result",["async"]]]],[11,"start_send","","",99,N],[11,"poll_complete","","",99,[[["self"]],["result",["async"]]]],[11,"close","","",99,[[["self"]],["result",["async"]]]],[11,"start_send","","",100,N],[11,"poll_complete","","",100,[[["self"]],["result",["async"]]]],[11,"close","","",100,[[["self"]],["result",["async"]]]],[11,"start_send","","",101,N],[11,"poll_complete","","",101,[[["self"]],["result",["async"]]]],[11,"close","","",101,[[["self"]],["result",["async"]]]],[11,"start_send","","",102,N],[11,"poll_complete","","",102,[[["self"]],["result",["async"]]]],[11,"close","","",102,[[["self"]],["result",["async"]]]],[11,"start_send","","",103,N],[11,"poll_complete","","",103,[[["self"]],["result",["async"]]]],[11,"close","","",103,[[["self"]],["result",["async"]]]],[11,"start_send","","",104,N],[11,"poll_complete","","",104,[[["self"]],["result",["async"]]]],[11,"close","","",104,[[["self"]],["result",["async"]]]],[11,"start_send","","",105,N],[11,"poll_complete","","",105,[[["self"]],["result",["async"]]]],[11,"close","","",105,[[["self"]],["result",["async"]]]],[11,"drop","jsonrpc_http_server::tokio::prelude::future","",77,N],[11,"drop","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","",47,N],[11,"description","jsonrpc_http_server::tokio::prelude::stream","",49,[[["self"]],["str"]]],[11,"description","jsonrpc_http_server::tokio::prelude::future","",50,[[["self"]],["str"]]],[11,"cause","","",50,[[["self"]],["option",["error"]]]],[11,"description","jsonrpc_http_server::tokio::prelude::stream","",31,[[["self"]],["str"]]],[11,"poll","","",103,[[["self"]],["result",["async"]]]],[11,"poll","","",97,[[["self"]],["result",["async"]]]],[11,"poll","","",98,[[["self"]],["result",["async"]]]],[11,"poll","","",104,[[["self"]],["result",["async"]]]],[11,"poll","","",93,[[["self"]],["result",["async"]]]],[11,"poll","","",48,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::future","",106,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",107,[[["self"]],["result",["async"]]]],[11,"poll","","",108,[[["self"]],["result",["async"]]]],[11,"poll","","",85,[[["self"]],["result",["async"]]]],[11,"poll","","",96,[[["self"]],["result",["async"]]]],[11,"poll","","",109,[[["self"]],["result",["async"]]]],[11,"poll","","",110,[[["self"]],["result",["async"]]]],[11,"poll","","",111,[[["self"]],["result",["async"]]]],[11,"poll","","",88,[[["self"]],["result",["async"]]]],[11,"poll","","",112,[[["self"]],["result",["async"]]]],[11,"poll","","",113,[[["self"]],["result",["async"]]]],[11,"poll","","",114,[[["self"]],["result",["async"]]]],[11,"poll","","",101,[[["self"]],["result",["async"]]]],[11,"poll","","",92,[[["self"]],["result",["async"]]]],[11,"poll","","",115,[[["self"]],["result",["async"]]]],[11,"poll","","",94,[[["self"]],["result",["async"]]]],[11,"poll","","",100,[[["self"]],["result",["async"]]]],[11,"poll","","",116,[[["self"]],["result",["async"]]]],[11,"poll","","",87,[[["self"]],["result",["async"]]]],[11,"poll","","",99,[[["self"]],["result",["async"]]]],[11,"poll","","",90,[[["self"]],["result",["async"]]]],[11,"poll","","",117,[[["self"]],["result",["async"]]]],[11,"poll","","",102,[[["self"]],["result",["async"]]]],[11,"poll","","",86,[[["self"]],["result",["async"]]]],[11,"poll","","",118,[[["self"]],["result",["async"]]]],[11,"poll","","",105,[[["self"]],["result",["async"]]]],[11,"poll","","",95,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::future","",119,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","",47,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::prelude::stream","",91,[[["self"]],["result",["async"]]]],[11,"poll","","",120,[[["self"]],["result",["async"]]]],[11,"poll","","",121,[[["self"]],["result",["async"]]]],[11,"poll","","",122,[[["self"]],["result",["async"]]]],[11,"next","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","",123,[[["self"]],["option"]]],[11,"size_hint","","",123,N],[11,"next","jsonrpc_http_server::tokio::prelude::stream","",124,[[["self"]],["option"]]],[11,"clone","jsonrpc_http_server::tokio::prelude::future","",21,[[["self"]],["executeerrorkind"]]],[11,"clone","jsonrpc_http_server::tokio::prelude::task","",125,[[["self"]],["task"]]],[11,"clone","jsonrpc_http_server::tokio::prelude::future","",126,[[["self"]],["shareditem"]]],[11,"clone","jsonrpc_http_server::tokio::prelude","",25,[[["self"]],["asyncsink"]]],[11,"clone","","",30,[[["self"]],["async"]]],[11,"clone","jsonrpc_http_server::tokio::prelude::task","",127,[[["self"]],["unparkevent"]]],[11,"clone","","",128,[[["self"]],["taskrc"]]],[11,"clone","jsonrpc_http_server::tokio::prelude::future","",77,[[["self"]],["shared"]]],[11,"clone","","",51,[[["self"]],["futureresult"]]],[11,"clone","","",50,[[["self"]],["sharederror"]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::task","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::task","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::task","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::task","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::task","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::task","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::task","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::stream","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::prelude::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",126,[[["self"]],["t"]]],[11,"deref","","",50,[[["self"]],["e"]]],[11,"eq","","",21,[[["self"],["executeerrorkind"]],["bool"]]],[11,"eq","jsonrpc_http_server::tokio::prelude","",25,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",25,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","","",30,[[["self"],["async"]],["bool"]]],[11,"ne","","",30,[[["self"],["async"]],["bool"]]],[11,"default","jsonrpc_http_server::tokio::prelude::task","",133,[[],["atomictask"]]],[11,"from","jsonrpc_http_server::tokio::io","Convert a `serde_json::Error` into an `io::Error`.",43,[[["error"]],["error"]]],[11,"encode","jsonrpc_http_server::tokio::codec::length_delimited","",135,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"spawn","jsonrpc_http_server::tokio::runtime","",136,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::runtime::current_thread","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::runtime","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::runtime::current_thread","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::executor","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::runtime","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::codec::length_delimited","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::runtime","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::codec::length_delimited","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::runtime::current_thread","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","jsonrpc_http_server::tokio::codec::length_delimited","",144,[[["self"]],["str"]]],[11,"drop","jsonrpc_http_server::tokio::runtime","",141,N],[11,"into_future","jsonrpc_http_server::tokio::executor","",140,N],[11,"execute","jsonrpc_http_server::tokio::runtime","",136,[[["self"],["t"]],["result",["executeerror"]]]],[11,"execute","jsonrpc_http_server::tokio::runtime::current_thread","",139,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_http_server::tokio::codec::length_delimited","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","jsonrpc_http_server::tokio::runtime::current_thread","",139,[[["self"]],["handle"]]],[11,"clone","jsonrpc_http_server::tokio::runtime","",136,[[["self"]],["taskexecutor"]]],[11,"clone","jsonrpc_http_server::tokio::codec::length_delimited","",142,[[["self"]],["builder"]]],[11,"poll","jsonrpc_http_server::tokio::runtime","",143,[[["self"]],["result",["async"]]]],[11,"decode","jsonrpc_http_server::tokio::codec::length_delimited","",135,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"spawn","jsonrpc_http_server::tokio::executor","",146,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",146,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",147,[[["self"]],["str"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",146,[[["self"]],["defaultexecutor"]]],[11,"execute","","",146,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_http_server::tokio::io","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::codec","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::io","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::codec","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::io","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"shutdown","","",154,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",154,[[["self"],["b"]],["result",["async","error"]]]],[11,"read_buf","","",158,[[["self"],["b"]],["result",["async","error"]]]],[11,"read","","",158,N],[11,"poll","","",160,[[["self"]],["result",["async","error"]]]],[11,"poll","jsonrpc_http_server::tokio::codec","",150,[[["self"]],["result",["async"]]]],[11,"poll","","",149,[[["self"]],["result",["async"]]]],[11,"poll","","",156,[[["self"]],["result",["async"]]]],[11,"write","jsonrpc_http_server::tokio::io","",154,N],[11,"flush","","",154,[[["self"]],["result",["error"]]]],[11,"poll","","",152,[[["self"]],["result",["async","error"]]]],[11,"poll","","",151,[[["self"]],["result",["async","error"]]]],[11,"poll","","",159,[[["self"]],["result",["async","error"]]]],[11,"poll","","",155,[[["self"]],["result",["async","error"]]]],[11,"poll","","",148,[[["self"]],["result",["async","error"]]]],[11,"poll","","",157,[[["self"]],["result",["async","error"]]]],[11,"poll","","",153,[[["self"]],["result",["async","error"]]]],[11,"start_send","jsonrpc_http_server::tokio::codec","",150,N],[11,"poll_complete","","",150,[[["self"]],["result",["async"]]]],[11,"close","","",150,[[["self"]],["result",["async"]]]],[11,"start_send","","",156,N],[11,"poll_complete","","",156,[[["self"]],["result",["async"]]]],[11,"close","","",156,[[["self"]],["result",["async"]]]],[11,"start_send","","",149,N],[11,"poll_complete","","",149,[[["self"]],["result",["async"]]]],[11,"close","","",149,[[["self"]],["result",["async"]]]],[11,"eq","","",161,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",161,[[["self"],["linescodec"]],["bool"]]],[11,"eq","","",162,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",162,[[["self"],["bytescodec"]],["bool"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",161,N],[11,"hash","","",162,N],[11,"decode","","",161,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",161,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode","","",162,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"partial_cmp","","",161,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",161,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",161,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",161,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",161,[[["self"],["linescodec"]],["bool"]]],[11,"partial_cmp","","",162,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",162,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",162,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",162,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",162,[[["self"],["bytescodec"]],["bool"]]],[11,"encode","","",161,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"encode","","",162,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"clone","","",161,[[["self"]],["linescodec"]]],[11,"clone","","",162,[[["self"]],["bytescodec"]]],[11,"cmp","","",161,[[["self"],["linescodec"]],["ordering"]]],[11,"cmp","","",162,[[["self"],["bytescodec"]],["ordering"]]],[11,"fmt","jsonrpc_http_server::tokio::fs::file","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::fs","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::fs::file","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::fs","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::io","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::fs::os::unix","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::io","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::fs::file","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","jsonrpc_http_server::tokio::fs","",167,N],[11,"poll","jsonrpc_http_server::tokio::fs::file","",165,[[["self"]],["result",["async"]]]],[11,"poll","","",166,[[["self"]],["result",["async"]]]],[11,"poll","","",163,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::fs::os::unix","",170,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_http_server::tokio::fs::file","",172,[[["self"]],["result",["async"]]]],[11,"from","jsonrpc_http_server::tokio::fs","",164,[[["openoptions"]],["openoptions"]]],[11,"read","jsonrpc_http_server::tokio::io","",169,N],[11,"read","jsonrpc_http_server::tokio::fs","",167,N],[11,"clone","","",164,[[["self"]],["openoptions"]]],[11,"write","","",167,N],[11,"flush","","",167,[[["self"]],["result",["error"]]]],[11,"write","jsonrpc_http_server::tokio::io","",168,N],[11,"flush","","",168,[[["self"]],["result",["error"]]]],[11,"write","","",171,N],[11,"flush","","",171,[[["self"]],["result",["error"]]]],[11,"shutdown","jsonrpc_http_server::tokio::fs","",167,[[["self"]],["result",["async","error"]]]],[11,"shutdown","jsonrpc_http_server::tokio::io","",171,[[["self"]],["result",["async","error"]]]],[11,"shutdown","","",168,[[["self"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",169,N],[11,"prepare_uninitialized_buffer","jsonrpc_http_server::tokio::fs","",167,N],[11,"from","jsonrpc_http_server::tokio::io","",43,[[["error"]],["error"]]],[11,"unpark","jsonrpc_http_server::tokio::reactor","",173,N],[11,"fmt","","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",174,N],[11,"drop","","",177,N],[11,"read","","",174,N],[11,"clone","","",173,[[["self"]],["handle"]]],[11,"shutdown","","",174,[[["self"]],["result",["async","error"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",173,[[],["handle"]]],[11,"write","","",174,N],[11,"flush","","",174,[[["self"]],["result",["error"]]]],[11,"unpark","","",175,N],[11,"park","","",175,[[["self"]],["result",["error"]]]],[11,"park_timeout","","",175,[[["self"],["duration"]],["result",["error"]]]],[11,"poll","jsonrpc_http_server::tokio::timer","",179,[[["self"]],["result",["async"]]]],[11,"poll","","",180,[[["self"]],["result",["async"]]]],[11,"poll","","",181,[[["self"]],["result",["async","error"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::timer::delay_queue","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::timer","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::timer::timeout","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::timer","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::timer::delay_queue","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::timer","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",185,[[["self"]],["str"]]],[11,"description","jsonrpc_http_server::tokio::timer::timeout","",184,[[["self"]],["str"]]],[11,"fmt","jsonrpc_http_server::tokio::timer","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::tokio::timer::timeout","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","jsonrpc_http_server::tokio::timer","",182,[[["self"]],["result",["async"]]]],[11,"poll","","",180,[[["self"]],["result",["async"]]]],[11,"fmt","jsonrpc_http_server::tokio::net::tcp","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",188,[[["self"]],["result",["async","error"]]]],[11,"read","","",190,N],[11,"as_raw_fd","","",190,[[["self"]],["i32"]]],[11,"as_raw_fd","","",187,[[["self"]],["i32"]]],[11,"poll","","",189,[[["self"]],["result",["async","error"]]]],[11,"write","","",190,N],[11,"flush","","",190,[[["self"]],["result",["error"]]]],[11,"shutdown","","",190,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",190,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",190,N],[11,"read_buf","","",190,[[["self"],["b"]],["result",["async","error"]]]],[11,"fmt","jsonrpc_http_server::tokio::net::udp","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",193,[[["self"]],["result",["async"]]]],[11,"as_raw_fd","","",192,[[["self"]],["i32"]]],[11,"poll","","",194,[[["self"]],["result",["async","error"]]]],[11,"poll","","",191,[[["self"]],["result",["async","error"]]]],[11,"start_send","","",193,N],[11,"poll_complete","","",193,[[["self"]],["result",["async"]]]],[11,"close","","",193,[[["self"]],["result",["async"]]]],[11,"eq","jsonrpc_http_server::tokio::net::unix","",14,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",14,[[["self"],["ucred"]],["bool"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",14,N],[11,"shutdown","","",199,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",199,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",199,N],[11,"read_buf","","",199,[[["self"],["b"]],["result",["async","error"]]]],[11,"poll","","",197,[[["self"]],["result",["async","error"]]]],[11,"read","","",199,N],[11,"clone","","",14,[[["self"]],["ucred"]]],[11,"as_raw_fd","","",199,[[["self"]],["i32"]]],[11,"as_raw_fd","","",198,[[["self"]],["i32"]]],[11,"as_raw_fd","","",195,[[["self"]],["i32"]]],[11,"poll","","",201,[[["self"]],["result",["async","error"]]]],[11,"poll","","",196,[[["self"]],["result",["async"]]]],[11,"poll","","",200,[[["self"]],["result",["async"]]]],[11,"write","","",199,N],[11,"flush","","",199,[[["self"]],["result",["error"]]]],[11,"to_owned","jsonrpc_http_server","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"equivalent","","",0,[[["self"],["k"]],["bool"]]],[11,"to_owned","jsonrpc_http_server::cors","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"equivalent","","",1,[[["self"],["k"]],["bool"]]],[11,"new","jsonrpc_http_server","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",45,[[["originprotocol"],["str"],["t"]],["origin"]]],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",45,[[["str"]],["origin"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"equivalent","","",45,[[["self"],["k"]],["bool"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"equivalent","","",2,[[["self"],["k"]],["bool"]]],[11,"to_owned","jsonrpc_http_server::cors","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"map","jsonrpc_http_server","Maps `Ok` variant of `AllowCors`.",4,[[["self"],["f"]],["allowcors"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"equivalent","","",4,[[["self"],["k"]],["bool"]]],[11,"new","jsonrpc_http_server::cors","",44,[[["s"]],["ascii"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"equivalent","","",44,[[["self"],["k"]],["bool"]]],[11,"new","jsonrpc_http_server::tokio::codec::length_delimited","Creates a new length delimited codec builder with default configuration values.",142,[[],["builder"]]],[11,"big_endian","","Read the length field as a big endian integer",142,[[["self"]],["builder"]]],[11,"little_endian","","Read the length field as a little endian integer",142,[[["self"]],["builder"]]],[11,"native_endian","","Read the length field as a native endian integer",142,[[["self"]],["builder"]]],[11,"max_frame_length","","Sets the max frame length",142,[[["self"],["usize"]],["builder"]]],[11,"length_field_length","","Sets the number of bytes used to represent the length field",142,[[["self"],["usize"]],["builder"]]],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",142,[[["self"],["usize"]],["builder"]]],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",142,[[["self"],["isize"]],["builder"]]],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",142,[[["self"],["usize"]],["builder"]]],[11,"new_codec","","Create a configured length delimited `LengthDelimitedCodec`",142,[[["self"]],["lengthdelimitedcodec"]]],[11,"new_read","","Create a configured length delimited `FramedRead`",142,[[["self"],["t"]],["framedread",["lengthdelimitedcodec"]]]],[11,"new_write","","Create a configured length delimited `FramedWrite`",142,[[["self"],["t"]],["framedwrite",["lengthdelimitedcodec"]]]],[11,"new_framed","","Create a configured length delimited `Framed`",142,[[["self"],["t"]],["framed",["lengthdelimitedcodec"]]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"to_string","","",144,[[["self"]],["string"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"new","","Creates a new `LengthDelimitedCodec` with the default configuration values.",135,[[],["lengthdelimitedcodec"]]],[11,"max_frame_length","","Returns the current max frame setting",135,[[["self"]],["usize"]]],[11,"set_max_frame_length","","Updates the max frame setting.",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::codec","Returns a `LinesCodec` for splitting up data into lines.",161,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",161,[[["usize"]],["linescodec"]]],[11,"max_length","","Returns the maximum line length when decoding.",161,[[["self"]],["usize"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"equivalent","","",161,[[["self"],["k"]],["bool"]]],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",156,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",156,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",156,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",156,[[["self"]],["t"]]],[11,"codec","","Returns a reference to the underlying codec wrapped by `Frame`.",156,[[["self"]],["u"]]],[11,"codec_mut","","Returns a mutable reference to the underlying codec wrapped by `Frame`.",156,[[["self"]],["u"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",156,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",156,[[["self"]],["framedparts"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",162,[[],["bytescodec"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"equivalent","","",162,[[["self"],["k"]],["bool"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",149,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",149,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",149,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",149,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",149,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",149,[[["self"]],["d"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"new","","Create a new, default, `FramedParts`",7,[[["t"],["u"]],["framedparts"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",150,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",150,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",150,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",150,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",150,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",150,[[["self"]],["e"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"from","jsonrpc_http_server::tokio::executor","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"into_future","","",140,[[["self"]],["f"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",147,[[],["spawnerror"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",147,[[],["spawnerror"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",147,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",147,[[["self"]],["bool"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"to_string","","",147,[[["self"]],["string"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the default executor for the current context.",146,[[],["defaultexecutor"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::fs","Creates a blank new set of options ready for configuration.",164,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",164,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",164,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",164,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",164,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",164,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",164,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",164,[[["self"],["p"]],["openfuture"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"from","jsonrpc_http_server::tokio::fs::os::unix","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"into_future","","",170,[[["self"]],["f"]]],[11,"open","jsonrpc_http_server::tokio::fs","Attempts to open a file in read-only mode.",167,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",167,[[["p"]],["createfuture"]]],[11,"from_std","","Convert a [`std::fs::File`][std] to a `tokio_fs::File`.",167,[[["file"]],["file"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",167,[[["self"],["seekfrom"]],["result",["async","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",167,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",167,[[["self"]],["result",["async","error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",167,[[["self"]],["result",["async","error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",167,[[["self"],["u64"]],["result",["async","error"]]]],[11,"metadata","","Queries metadata about the underlying file.",167,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",167,[[["self"]],["result",["async","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",167,[[["self"]],["result",["async","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",167,[[["self"],["permissions"]],["result",["async","error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",167,[[["self"]],["file"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"from","jsonrpc_http_server::tokio::fs::file","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"into_future","","",165,[[["self"]],["f"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"into_future","","",163,[[["self"]],["f"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"into_future","","",172,[[["self"]],["f"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"into_future","","",166,[[["self"]],["f"]]],[11,"from","jsonrpc_http_server::tokio::io","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"into_future","","",151,[[["self"]],["f"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"into_future","","",152,[[["self"]],["f"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"into_future","","",159,[[["self"]],["f"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into_future","","",148,[[["self"]],["f"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"into_future","","",157,[[["self"]],["f"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"into_future","","",155,[[["self"]],["f"]]],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",43,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",43,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",43,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",43,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",43,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",43,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",43,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",43,[[["self"]],["errorkind"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"into_future","","",153,[[["self"]],["f"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"equivalent","","",11,[[["self"],["k"]],["bool"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"into_inner","","Returns the underlying I/O object.",160,[[["self"]],["a"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"connect","jsonrpc_http_server::tokio::net::tcp","Create a new TCP stream connected to the specified address.",190,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",190,[[["tcpstream"],["handle"]],["result",["tcpstream","error"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",190,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",190,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",190,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",190,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",190,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",190,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",190,[[["self"],["shutdown"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",190,[[["self"]],["result",["bool","error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",190,[[["self"],["bool"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",190,[[["self"]],["result",["usize","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",190,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",190,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",190,[[["self"],["usize"]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",190,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",190,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",190,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",190,[[["self"],["u32"]],["result",["error"]]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",190,[[["self"]],["result",["option","error"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",190,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",190,[[["self"]],["result",["tcpstream","error"]]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"into_future","","",189,[[["self"]],["f"]]],[11,"bind","","Create a new TCP listener associated with this event loop.",187,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",187,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",187,[[["self"]],["result",["async","error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",187,[[["tcplistener"],["handle"]],["result",["tcplistener","error"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",187,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",187,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",187,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",187,[[["self"],["u32"]],["result",["error"]]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::net::udp","Create a new `UdpFramed` backed by the given socket and codec.",193,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",193,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",193,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",193,[[["self"]],["udpsocket"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"into_future","","",191,[[["self"]],["f"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",192,[[["socketaddr"]],["result",["udpsocket","error"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",192,[[["udpsocket"],["handle"]],["result",["udpsocket","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",192,[[["self"]],["result",["socketaddr","error"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",192,[[["self"],["socketaddr"]],["result",["error"]]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",192,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",192,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",192,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",192,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",192,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",192,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",192,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",192,[[["self"]],["result",["async","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",192,[[["self"]],["result",["bool","error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",192,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",192,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",192,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",192,[[["self"]],["result",["u32","error"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",192,[[["self"],["u32"]],["result",["error"]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",192,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",192,[[["self"],["bool"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",192,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",192,[[["self"],["u32"]],["result",["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",192,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",192,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",192,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",192,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"into_future","","",194,[[["self"]],["f"]]],[11,"to_owned","jsonrpc_http_server::tokio::net::unix","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"equivalent","","",14,[[["self"],["k"]],["bool"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"into_future","","",201,[[["self"]],["f"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"into_future","","",200,[[["self"]],["f"]]],[11,"connect","","Connects to the socket named by `path`.",199,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",199,[[["unixstream"],["handle"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",199,[[],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",199,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",199,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",199,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",199,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",199,[[["self"]],["result",["ucred","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",199,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",199,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",198,[[["p"]],["result",["unixdatagram","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",198,[[],["result",["error"]]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",198,[[["unixdatagram"],["handle"]],["result",["unixdatagram","error"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",198,[[],["result",["unixdatagram","error"]]]],[11,"connect","","Connects the socket to the specified address.",198,[[["self"],["p"]],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",198,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",198,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",198,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",198,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_recv_from","","Receives data from the socket.",198,N],[11,"poll_recv","","Receives data from the socket.",198,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",198,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",198,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",198,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",198,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",198,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",198,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",195,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",195,[[["unixlistener"],["handle"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",195,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",195,[[["self"],["ready"]],["result",["async","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",195,[[["self"]],["result",["option","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",195,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",195,[[["self"]],["result",["async","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",195,[[["self"]],["incoming"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"into_future","","",196,[[["self"]],["f"]]],[11,"new","jsonrpc_http_server::tokio::prelude::future","Create a new `ExecuteError`",130,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",130,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",130,[[["self"]],["f"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into_future","","",59,[[["self"]],["f"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_future","","",72,[[["self"]],["f"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into_future","","",51,[[["self"]],["f"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into_future","","",57,[[["self"]],["f"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into_future","","",56,[[["self"]],["f"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",68,[[["self"]],["bool"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_future","","",68,[[["self"]],["f"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into_future","","",70,[[["self"]],["f"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",77,[[["self"]],["option",["result"]]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"into_future","","",77,[[["self"]],["f"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into_future","","",71,[[["self"]],["f"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into_future","","",53,[[["self"]],["f"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into_future","","",80,[[["self"]],["f"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into_future","","",55,[[["self"]],["f"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into_future","","",69,[[["self"]],["f"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"into_future","","",23,[[["self"]],["f"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"to_string","","",50,[[["self"]],["string"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"into_future","","",82,[[["self"]],["f"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into_future","","",54,[[["self"]],["f"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into_future","","",65,[[["self"]],["f"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"into_future","","",58,[[["self"]],["f"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into_future","","",60,[[["self"]],["f"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"into_future","","",81,[[["self"]],["f"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into_future","","",61,[[["self"]],["f"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"map","jsonrpc_http_server::tokio::prelude","Change the NotReady value of this `AsyncSink` with the closure provided",25,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",25,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",25,[[["self"]],["bool"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::prelude::task","Create an `AtomicTask` initialized with the given `Task`",133,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",133,N],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",133,N],[11,"notify","","Notifies the task that last called `register`.",133,N],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",127,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",125,N],[11,"is_current","","Returns `true` when called from within the context of the task.",125,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",125,[[["self"]],["bool"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",128,[[["a"]],["taskrc"]]],[11,"with","","Operate with a reference to the underlying data.",128,[[["self"],["f"]],["r"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",131,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",131,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",131,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",131,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",131,[[["self"]],["result"]]],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",131,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",131,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",131,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",131,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",131,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",131,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",131,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",131,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",131,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",134,[[["self"],["f"]],["r"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"map","jsonrpc_http_server::tokio::prelude","Change the success value of this `Async` with the closure provided",30,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",30,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",30,[[["self"]],["bool"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",47,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",47,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",47,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",47,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",47,[[["self"]],["itermut"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into_iter","","",123,[[["self"]],["i"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_http_server::tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",99,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",99,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",99,[[["self"]],["s"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",96,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",96,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",96,[[["self"]],["s"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",48,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",48,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",48,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",105,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",105,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",105,[[["self"]],["s"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",102,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",102,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",102,[[["self"]],["s"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",88,[[["self"]],["s"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into_future","","",78,[[["self"]],["f"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",117,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into_future","","",52,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",85,[[["self"]],["s"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",91,[[["self"]],["result",["async"]]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",83,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",83,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",83,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",83,[[["self"]],["option"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"into_future","","",83,[[["self"]],["f"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,[[["self"]],["option"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into_future","","",76,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,[[["self"]],["s"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",101,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",101,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",101,[[["self"]],["s"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"send","","Sends a new value along this channel to the receiver.",129,[[["self"],["result"]],["futuresender"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",89,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,[[["self"]],["s"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",103,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",103,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",103,[[["self"]],["s"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",95,[[["self"]],["s"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",124,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",124,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",124,[[["self"]],["s"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into_iter","","",124,[[["self"]],["i"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",100,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",100,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",100,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",100,[[["self"]],["s"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",97,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",97,[[["self"]],["s"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_future","","",73,[[["self"]],["f"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into_future","","",79,[[["self"]],["f"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into_future","","",62,[[["self"]],["f"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",104,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",104,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",104,[[["self"]],["s"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",94,[[["self"]],["s"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",98,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",98,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",98,[[["self"]],["s"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"into_future","","",84,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",93,[[["self"]],["s"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"from","jsonrpc_http_server::tokio::reactor","",176,[[["t"]],["t"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"handle","","Returns a reference to the reactor handle.",177,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",177,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",177,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",177,N],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",175,[[],["result",["reactor","error"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",175,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",175,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",175,[[["self"],["option",["duration"]]],["result",["turn","error"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",175,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",175,[[["self"]],["result",["background","error"]]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the current reactor.",173,[[],["handle"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",174,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",174,[[["e"],["handle"]],["result",["pollevented","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",174,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",174,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",174,[[["self"]],["result",["error"]]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",174,[[["self"],["ready"]],["result",["async","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",174,[[["self"],["ready"]],["result",["error"]]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",174,[[["self"]],["result",["async","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",174,[[["self"]],["result",["error"]]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"new","","Create a new `Registration`.",178,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",178,[[["self"],["t"]],["result",["bool","error"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",178,[[["self"],["t"]],["result",["error"]]]],[11,"register_with","","Register the I/O resource with the specified reactor.",178,[[["self"],["t"],["handle"]],["result",["bool","error"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",178,[[["self"]],["result",["async","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",178,[[["self"]],["result",["option","error"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",178,[[["self"]],["result",["async","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",178,[[["self"]],["result",["option","error"]]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::runtime::current_thread","Returns a new runtime builder initialized with default configuration values.",137,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",137,[[["self"],["clock"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",137,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime initialized with default configuration values.",145,[[],["result",["runtime","error"]]]],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",145,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",145,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",145,[[["self"],["f"]],["result"]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",145,[[["self"]],["result",["runerror"]]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",139,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",139,[[["self"]],["result",["spawnerror"]]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::runtime","Create a new runtime instance with default configuration values.",141,[[],["result",["runtime","error"]]]],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",141,[[["self"]],["handle"]]],[11,"executor","","Return a handle to the runtime's executor.",141,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",141,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Run a future to completion on the Tokio runtime.",141,[[["self"],["f"]],["result"]]],[11,"block_on_all","","Run a future to completion on the Tokio runtime, then wait for all background futures to complete too.",141,[[["self"],["f"]],["result"]]],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",141,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",141,[[["self"]],["shutdown"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",136,N],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",138,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",138,[[["self"],["clock"]],["builder"]]],[11,"core_threads","","Set the maximum number of worker threads for the `Runtime`'s thread pool.",138,[[["self"],["usize"]],["builder"]]],[11,"blocking_threads","","Set the maximum number of concurrent blocking sections in the `Runtime`'s thread pool.",138,[[["self"],["usize"]],["builder"]]],[11,"name_prefix","","Set name prefix of threads spawned by the `Runtime`'s thread pool.",138,[[["self"],["s"]],["builder"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",138,[[["self"],["usize"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",138,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"into_future","","",143,[[["self"]],["f"]]],[11,"new","jsonrpc_http_server::tokio::timer","Create a new, empty, `DelayQueue`",181,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",181,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",181,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",181,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",181,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",181,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",181,N],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",181,N],[11,"clear","","Clears the queue, removing all items.",181,N],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",181,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",181,N],[11,"is_empty","","Returns `true` if there are no items in the queue.",181,[[["self"]],["bool"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_http_server::tokio::timer::delay_queue","Returns a reference to the inner value.",186,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",186,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",186,[[["self"]],["t"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::timer","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",180,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",180,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",180,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",180,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",180,[[["t"],["instant"]],["timeout"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"into_future","","",180,[[["self"]],["f"]]],[11,"shutdown","","Create an error representing a shutdown timer.",185,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",185,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",185,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",185,[[["self"]],["bool"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"to_string","","",185,[[["self"]],["string"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",179,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",179,[[["duration"]],["interval"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"inner","jsonrpc_http_server::tokio::timer::timeout","Create a new `Error` representing the inner value completing with `Err`.",184,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",184,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",184,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",184,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",184,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",184,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",184,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",184,[[["self"]],["option",["error"]]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"to_string","","",184,[[["self"]],["string"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"new","jsonrpc_http_server::tokio::timer","Create a new `Delay` instance that elapses at `deadline`.",182,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",182,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",182,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",182,N],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"into_future","","",182,[[["self"]],["f"]]],[11,"new","jsonrpc_http_server","construct a new Suspendable stream, given tokio::Incoming and the amount of time to pause for.",46,[[["s"]],["suspendablestream"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]]],"paths":[[4,"DomainsValidation"],[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"AccessControlAllowHeaders"],[4,"AllowCors"],[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[8,"Executor"],[8,"Read"],[8,"AsyncRead"],[4,"ErrorKind"],[8,"AsyncWrite"],[8,"Write"],[3,"UCred"],[8,"FutureExt"],[8,"Stream"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Sink"],[4,"AsyncSink"],[8,"Executor"],[8,"EventSet"],[8,"Unpark"],[8,"StreamExt"],[4,"Async"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Response"],[3,"Rpc"],[4,"RequestMiddlewareAction"],[4,"RestApi"],[3,"ServerHandler"],[8,"RequestMiddleware"],[8,"MetaExtractor"],[3,"ServerBuilder"],[3,"Server"],[3,"Host"],[3,"Error"],[3,"Ascii"],[3,"Origin"],[3,"SuspendableStream"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"SendError"],[3,"SharedError"],[3,"Err"],[3,"Concat"],[3,"Empty"],[3,"Flatten"],[3,"OrElse"],[3,"CatchUnwind"],[3,"Inspect"],[3,"Select2"],[3,"AndThen"],[3,"Select"],[3,"FromErr"],[3,"Collect"],[3,"Join"],[3,"PollFn"],[3,"SelectAll"],[3,"MapErr"],[3,"SelectNext"],[3,"Fuse"],[3,"Lazy"],[3,"LoopFn"],[3,"Join5"],[3,"Join4"],[3,"Concat2"],[3,"Join3"],[3,"Then"],[3,"StreamFuture"],[3,"Shared"],[3,"Fold"],[3,"ForEach"],[3,"Collect"],[3,"SelectOk"],[3,"Map"],[3,"Forward"],[3,"FutureSender"],[3,"InspectErr"],[3,"FromErr"],[3,"OrElse"],[3,"BufferUnordered"],[3,"SplitSink"],[3,"Take"],[3,"Peekable"],[3,"Then"],[3,"Buffered"],[3,"Flatten"],[3,"Inspect"],[3,"FilterMap"],[3,"TakeWhile"],[3,"SkipWhile"],[3,"Skip"],[3,"Fuse"],[3,"Chunks"],[3,"Filter"],[3,"AndThen"],[3,"Map"],[3,"MapErr"],[3,"IntoStream"],[3,"Empty"],[3,"Unfold"],[3,"Chain"],[3,"Repeat"],[3,"IterResult"],[3,"Iter"],[3,"Merge"],[3,"Once"],[3,"PollFn"],[3,"Zip"],[3,"SplitStream"],[3,"Select"],[3,"FlattenStream"],[3,"Receiver"],[3,"IterOk"],[3,"CatchUnwind"],[3,"IterMut"],[3,"Wait"],[3,"Task"],[3,"SharedItem"],[3,"UnparkEvent"],[3,"TaskRc"],[3,"Sender"],[3,"ExecuteError"],[3,"Spawn"],[3,"Run"],[3,"AtomicTask"],[3,"LocalKey"],[3,"LengthDelimitedCodec"],[3,"TaskExecutor"],[3,"Builder"],[3,"Builder"],[3,"Handle"],[3,"Spawn"],[3,"Runtime"],[3,"Builder"],[3,"Shutdown"],[3,"FrameTooBig"],[3,"Runtime"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"Shutdown"],[3,"FramedRead"],[3,"FramedWrite"],[3,"ReadToEnd"],[3,"WriteAll"],[3,"Copy"],[3,"WriteHalf"],[3,"ReadUntil"],[3,"Framed"],[3,"ReadExact"],[3,"ReadHalf"],[3,"Flush"],[3,"Lines"],[3,"LinesCodec"],[3,"BytesCodec"],[3,"SeekFuture"],[3,"OpenOptions"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"File"],[3,"Stderr"],[3,"Stdin"],[3,"SymlinkFuture"],[3,"Stdout"],[3,"OpenFuture"],[3,"Handle"],[3,"PollEvented2"],[3,"Reactor"],[3,"Turn"],[3,"Background"],[3,"Registration"],[3,"Interval"],[3,"Timeout"],[3,"DelayQueue"],[3,"Delay"],[3,"Key"],[3,"Error"],[3,"Error"],[3,"Expired"],[3,"TcpListener"],[3,"Incoming"],[3,"ConnectFuture"],[3,"TcpStream"],[3,"SendDgram"],[3,"UdpSocket"],[3,"UdpFramed"],[3,"RecvDgram"],[3,"UnixListener"],[3,"RecvDgram"],[3,"Incoming"],[3,"UnixDatagram"],[3,"UnixStream"],[3,"SendDgram"],[3,"ConnectFuture"]]};
searchIndex["jsonrpc_ipc_server"]={"doc":"Cross-platform JSON-RPC IPC transport.","items":[[3,"SecurityAttributes","jsonrpc_ipc_server","A NOOP struct for bringing the API between Windows and Unix up to parity. To set permissions properly on Unix, you can just use `std::os::unix::fs::PermissionsExt`.",N,N],[0,"clock","jsonrpc_ipc_server::tokio","A configurable source of time.",N,N],[5,"now","jsonrpc_ipc_server::tokio::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[0,"codec","jsonrpc_ipc_server::tokio","Utilities for encoding and decoding frames.",N,N],[0,"length_delimited","jsonrpc_ipc_server::tokio::codec","Frame a stream of bytes based on a length prefix",N,N],[3,"Builder","jsonrpc_ipc_server::tokio::codec::length_delimited","Configure length delimited `LengthDelimitedCodec`s.",N,N],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",N,N],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",N,N],[3,"LinesCodec","jsonrpc_ipc_server::tokio::codec","A simple `Codec` implementation that splits up data into lines.",N,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[8,"Decoder","","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",0,N],[16,"Error","","The type of unrecoverable frame decoding errors.",0,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,[[["self"],["t"]],["framed"]]],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",1,N],[16,"Error","","The type of encoding errors.",1,N],[10,"encode","","Encodes a frame into the buffer provided.",1,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",2,N],[12,"codec","","The codec",2,N],[12,"read_buf","","The buffer with read but unprocessed data.",2,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[0,"executor","jsonrpc_ipc_server::tokio","Task execution utilities.",N,N],[3,"Spawn","jsonrpc_ipc_server::tokio::executor","Return value from the `spawn` function.",N,N],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[8,"Executor","","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",3,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",3,[[["self"]],["result",["spawnerror"]]]],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[0,"fs","jsonrpc_ipc_server::tokio","Asynchronous filesystem manipulation operations.",N,N],[5,"create_dir_all","jsonrpc_ipc_server::tokio::fs","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"create_dir","","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"hard_link","","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"read_dir","","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[0,"os","","OS-specific functionality.",N,N],[0,"unix","jsonrpc_ipc_server::tokio::fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[5,"symlink","jsonrpc_ipc_server::tokio::fs::os::unix","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[3,"SymlinkFuture","","Future returned by `symlink`.",N,N],[5,"remove_dir","jsonrpc_ipc_server::tokio::fs","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[3,"File","","A reference to an open file on the filesystem.",N,N],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"CreateFuture","jsonrpc_ipc_server::tokio::fs::file","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(File, Metadata)` instance.",N,N],[0,"io","jsonrpc_ipc_server::tokio","Asynchronous I/O.",N,N],[5,"copy","jsonrpc_ipc_server::tokio::io","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",4,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",4,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",4,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",4,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",4,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",4,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",4,[[["self"]],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",4,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",4,[[["self"],["u64"]],["take"]]],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",5,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",5,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",5,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",5,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",5,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",6,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",6,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",6,N],[13,"ConnectionReset","","The connection was reset by the remote server.",6,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",6,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",6,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",6,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",6,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",6,N],[13,"AlreadyExists","","An entity already exists, often a file.",6,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",6,N],[13,"InvalidInput","","A parameter was incorrect.",6,N],[13,"InvalidData","","Data not valid for the operation were encountered.",6,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",6,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",6,N],[13,"Interrupted","","This operation was interrupted.",6,N],[13,"Other","","Any I/O error not part of this list.",6,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",6,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",7,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",7,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",7,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",7,[[["self"],["b"]],["result",["async","error"]]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",8,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",8,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",8,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",8,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",8,[[["self"]],["self"]]],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[0,"net","jsonrpc_ipc_server::tokio","TCP/UDP/Unix bindings for `tokio`.",N,N],[0,"tcp","jsonrpc_ipc_server::tokio::net","TCP bindings for `tokio`.",N,N],[3,"TcpStream","jsonrpc_ipc_server::tokio::net::tcp","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[0,"udp","jsonrpc_ipc_server::tokio::net","UDP bindings for `tokio`.",N,N],[3,"UdpFramed","jsonrpc_ipc_server::tokio::net::udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[0,"unix","jsonrpc_ipc_server::tokio::net","Unix domain socket bindings for `tokio` (only available on unix systems).",N,N],[3,"UCred","jsonrpc_ipc_server::tokio::net::unix","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",9,N],[12,"gid","","GID (group ID) of the process",9,N],[3,"ConnectFuture","","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[0,"prelude","jsonrpc_ipc_server::tokio","A \"prelude\" for users of the `tokio` crate.",N,N],[8,"FutureExt","jsonrpc_ipc_server::tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new future which allows `self` until `timeout`.",10,[[["self"],["duration"]],["timeout"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",11,N],[16,"Error","","The type of error this stream may generate.",11,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",11,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",11,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",11,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",11,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",11,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",11,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",11,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",11,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",11,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",11,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",11,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",11,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",11,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",11,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",11,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",11,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",11,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",11,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",11,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",11,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",11,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",11,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",11,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",11,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",11,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",11,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",11,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",11,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",11,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",11,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",11,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",11,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",11,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",11,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",11,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",11,[[["self"],["f"]],["inspecterr"]]],[0,"future","","Futures",N,N],[8,"Future","jsonrpc_ipc_server::tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",12,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",12,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",12,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",12,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",12,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",12,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",12,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",12,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",12,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",12,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",12,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",12,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",12,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",12,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",12,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",12,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",12,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",12,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",12,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",12,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",13,N],[16,"Item","","The item that the future may resolve with.",13,N],[16,"Error","","The error that the future may resolve with.",13,N],[10,"into_future","","Consumes this object and produces a future.",13,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",14,N],[16,"Error","","Possible errors during conversion.",14,N],[10,"future_from","","Consume the given value, beginning the conversion.",14,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",15,[[["self"],["f"]],["result",["executeerror"]]]],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",16,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",16,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Err","","A future representing a value that is immediately ready.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",17,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",17,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[3,"Empty","","A future which is never resolved.",N,N],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",18,N],[13,"B","","Second branch of the type",18,N],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[8,"Sink","jsonrpc_ipc_server::tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",19,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",19,N],[10,"start_send","","Begin the process of sending a value to the sink.",19,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",19,[[["self"]],["result",["async"]]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",19,[[["self"]],["result",["async"]]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",19,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",19,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",19,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",19,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",19,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",19,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",19,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",19,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",19,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",19,[[["self"],["s"]],["sendall"]]],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",20,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",20,N],[0,"task","","Tasks used to drive a future computation",N,N],[5,"spawn","jsonrpc_ipc_server::tokio::prelude::task","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",21,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",22,N],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[5,"init","","Initialize the `futures` task system.",N,N],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",23,N],[8,"StreamExt","jsonrpc_ipc_server::tokio::prelude","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",24,[[["self"],["duration"]],["timeout"]]],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",25,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",25,N],[0,"stream","","Asynchronous streams",N,N],[0,"futures_unordered","jsonrpc_ipc_server::tokio::prelude::stream","An unbounded set of futures.",N,N],[3,"FuturesUnordered","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[5,"futures_unordered","jsonrpc_ipc_server::tokio::prelude::stream","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Sender","","The transmission end of a channel which is used to send values.",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",26,N],[12,"1","","",26,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",27,N],[13,"Second","","An item from the second stream",27,N],[13,"Both","","Items from both streams",27,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"FutureSender","","Future returned by `Sender::send`.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[6,"Poll","jsonrpc_ipc_server::tokio::prelude","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"reactor","jsonrpc_ipc_server::tokio","Event loop that drives Tokio I/O resources.",N,N],[3,"Turn","jsonrpc_ipc_server::tokio::reactor","Return value from the `turn` method on `Reactor`.",N,N],[3,"Background","","Handle to the reactor running on a background thread.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[0,"runtime","jsonrpc_ipc_server::tokio","A batteries included runtime for applications using Tokio.",N,N],[0,"current_thread","jsonrpc_ipc_server::tokio::runtime","A runtime implementation that runs everything on the current thread.",N,N],[5,"block_on_all","jsonrpc_ipc_server::tokio::runtime::current_thread","Run the provided future to completion using a runtime running on the current thread.",N,[[["f"]],["result"]]],[3,"Builder","","Builds a Single-threaded runtime with custom configuration values.",N,N],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",N,N],[3,"Runtime","jsonrpc_ipc_server::tokio::runtime","Handle to the Tokio runtime.",N,N],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,N],[3,"TaskExecutor","","Executes futures on the runtime",N,N],[3,"Builder","","Builds Tokio Runtime with custom configuration values.",N,N],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",N,N],[0,"timer","jsonrpc_ipc_server::tokio","Utilities for tracking time.",N,N],[3,"DelayQueue","jsonrpc_ipc_server::tokio::timer","A queue of delayed elements.",N,N],[0,"delay_queue","","A queue of delayed elements.",N,N],[3,"Expired","jsonrpc_ipc_server::tokio::timer::delay_queue","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[3,"Timeout","jsonrpc_ipc_server::tokio::timer","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[0,"timeout","","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Error","jsonrpc_ipc_server::tokio::timer::timeout","Error returned by `Timeout`.",N,N],[3,"Delay","jsonrpc_ipc_server::tokio::timer","A future that completes at a specified instant in time.",N,N],[0,"util","jsonrpc_ipc_server::tokio","Utilities for working with Tokio.",N,N],[4,"Separator","jsonrpc_ipc_server","Separator for enveloping messages in streaming codecs",N,N],[13,"Empty","","No envelope is expected between messages. Decoder will try to figure out message boundaries by accumulating incoming bytes until valid JSON is formed. Encoder will send messages without any boundaries between requests.",28,N],[13,"Byte","","Byte is used as an sentitel between messages",28,N],[8,"SessionStats","","Keeps track of open sessions",N,N],[10,"open_session","","Executed when new session is opened.",29,N],[10,"close_session","","Executed when session is closed.",29,N],[6,"SessionId","","Session id",N,N],[3,"NoopExtractor","","Noop-extractor",N,N],[3,"RequestContext","","Request context",N,N],[12,"session_id","","Session ID",30,N],[12,"endpoint_addr","","Remote UDS endpoint",30,N],[12,"sender","","Direct pipe sender",30,N],[3,"Server","","IPC Server handle",N,N],[3,"ServerBuilder","","IPC server builder",N,N],[3,"CloseHandle","","`CloseHandle` allows one to stop an `IpcServer` remotely.",N,N],[11,"new","","Creates new IPC server build given the `IoHandler`.",31,[[["t"]],["serverbuilder"]]],[11,"with_meta_extractor","","Creates new IPC server build given the `IoHandler` and metadata extractor.",31,[[["t"],["e"]],["serverbuilder"]]],[11,"event_loop_executor","","Sets shared different event loop executor.",31,[[["self"],["taskexecutor"]],["self"]]],[11,"session_meta_extractor","","Sets session metadata extractor.",31,[[["self"],["x"]],["self"]]],[11,"session_stats","","Session stats",31,[[["self"],["t"]],["self"]]],[11,"request_separators","","Sets the incoming and outgoing requests separator",31,[[["self"],["separator"],["separator"]],["self"]]],[11,"set_security_attributes","","Sets the security attributes for the underlying IPC socket/pipe",31,[[["self"],["securityattributes"]],["self"]]],[11,"set_client_buffer_size","","Sets how many concurrent requests per client can be processed at any one time. Set to 5 by default.",31,[[["self"],["usize"]],["self"]]],[11,"start","","Creates a new server from the given endpoint.",31,[[["self"],["str"]],["result",["server"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the server (waits for finish)",32,[[["self"]]]],[11,"close_handle","","Creates a close handle that can be used to stop the server remotely",32,[[["self"]],["closehandle"]]],[11,"wait","","Wait for the server to finish",32,[[["self"]]]],[11,"clone","","",33,[[["self"]],["closehandle"]]],[11,"close","","`close` closes the corresponding `IpcServer` instance.",33,[[["self"]]]],[11,"extract","","",34,[[["self"],["requestcontext"]],["m"]]],[8,"MetaExtractor","","Metadata extractor (per session)",N,N],[10,"extract","","Extracts metadata from request context",35,[[["self"],["requestcontext"]],["m"]]],[11,"empty","","New default security attributes.",36,[[],["securityattributes"]]],[11,"allow_everyone_connect","","New security attributes that allow everyone to connect.",36,[[],["result",["securityattributes","error"]]]],[11,"allow_everyone_create","","New security attributes that allow everyone to create.",36,[[],["result",["securityattributes","error"]]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"partial_cmp","jsonrpc_ipc_server::tokio::io","",6,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",37,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",37,[[["nulerror"]],["error"]]],[11,"from","","",37,[[["intoinnererror"]],["error"]]],[11,"description","","",37,[[["self"]],["str"]]],[11,"cause","","",37,[[["self"]],["option",["error"]]]],[11,"clone","","",6,[[["self"]],["errorkind"]]],[11,"hash","","",6,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",6,[[["self"],["errorkind"]],["bool"]]],[11,"cmp","","",6,[[["self"],["errorkind"]],["ordering"]]],[11,"fmt","jsonrpc_ipc_server","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",28,[[["self"]],["separator"]]],[11,"default","","",28,[[],["separator"]]],[11,"from_iter","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","",38,[[["t"]],["futuresunordered"]]],[11,"from_iter","jsonrpc_ipc_server::tokio::prelude::stream","",39,[[["t"]],["futuresordered"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",42,[[["result"]],["futureresult"]]],[11,"from","jsonrpc_ipc_server::tokio::prelude","",25,[[["t"]],["async"]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",43,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::future","",44,[[["self"]],["result",["async"]]]],[11,"poll","","",45,[[["self"]],["result",["async"]]]],[11,"poll","","",18,[[["self"]],["result",["async"]]]],[11,"poll","","",46,[[["self"]],["result",["async"]]]],[11,"poll","","",47,[[["self"]],["result",["async"]]]],[11,"poll","","",48,[[["self"]],["result",["async"]]]],[11,"poll","","",49,[[["self"]],["result",["async"]]]],[11,"poll","","",50,[[["self"]],["result",["async"]]]],[11,"poll","","",51,[[["self"]],["result",["async"]]]],[11,"poll","","",52,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",53,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::future","",54,[[["self"]],["result",["async"]]]],[11,"poll","","",55,[[["self"]],["result",["async"]]]],[11,"poll","","",56,[[["self"]],["result",["async"]]]],[11,"poll","","",57,[[["self"]],["result",["async"]]]],[11,"poll","","",58,[[["self"]],["result",["async"]]]],[11,"poll","","",59,[[["self"]],["result",["async"]]]],[11,"poll","","",60,[[["self"]],["result",["async"]]]],[11,"poll","","",61,[[["self"]],["result",["async"]]]],[11,"poll","","",62,[[["self"]],["result",["async"]]]],[11,"poll","","",63,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",64,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::future","",65,[[["self"]],["result",["async"]]]],[11,"poll","","",66,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",67,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::future","",68,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",69,[[["self"]],["result",["async"]]]],[11,"poll","","",70,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::future","",71,[[["self"]],["result",["async"]]]],[11,"poll","","",72,[[["self"]],["result",["async"]]]],[11,"poll","","",73,[[["self"]],["result",["async"]]]],[11,"poll","","",42,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",74,[[["self"]],["result",["async"]]]],[11,"poll","","",75,[[["self"]],["result",["async"]]]],[11,"start_send","","",76,N],[11,"poll_complete","","",76,[[["self"]],["result",["async"]]]],[11,"close","","",76,[[["self"]],["result",["async"]]]],[11,"start_send","","",77,N],[11,"poll_complete","","",77,[[["self"]],["result",["async"]]]],[11,"close","","",77,[[["self"]],["result",["async"]]]],[11,"start_send","","",78,N],[11,"poll_complete","","",78,[[["self"]],["result",["async"]]]],[11,"close","","",78,[[["self"]],["result",["async"]]]],[11,"start_send","","",79,N],[11,"poll_complete","","",79,[[["self"]],["result",["async"]]]],[11,"close","","",79,[[["self"]],["result",["async"]]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["result",["async"]]]],[11,"close","","",80,[[["self"]],["result",["async"]]]],[11,"start_send","","",81,N],[11,"poll_complete","","",81,[[["self"]],["result",["async"]]]],[11,"close","","",81,[[["self"]],["result",["async"]]]],[11,"start_send","","",82,N],[11,"poll_complete","","",82,[[["self"]],["result",["async"]]]],[11,"close","","",82,[[["self"]],["result",["async"]]]],[11,"start_send","","",83,N],[11,"poll_complete","","",83,[[["self"]],["result",["async"]]]],[11,"close","","",83,[[["self"]],["result",["async"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["result",["async"]]]],[11,"close","","",84,[[["self"]],["result",["async"]]]],[11,"start_send","","",85,N],[11,"poll_complete","","",85,[[["self"]],["result",["async"]]]],[11,"close","","",85,[[["self"]],["result",["async"]]]],[11,"start_send","","",86,N],[11,"poll_complete","","",86,[[["self"]],["result",["async"]]]],[11,"close","","",86,[[["self"]],["result",["async"]]]],[11,"start_send","","",87,N],[11,"poll_complete","","",87,[[["self"]],["result",["async"]]]],[11,"close","","",87,[[["self"]],["result",["async"]]]],[11,"start_send","","",88,N],[11,"poll_complete","","",88,[[["self"]],["result",["async"]]]],[11,"close","","",88,[[["self"]],["result",["async"]]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["result",["async"]]]],[11,"close","","",89,[[["self"]],["result",["async"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["result",["async"]]]],[11,"close","","",90,[[["self"]],["result",["async"]]]],[11,"start_send","","",91,N],[11,"poll_complete","","",91,[[["self"]],["result",["async"]]]],[11,"close","","",91,[[["self"]],["result",["async"]]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["result",["async"]]]],[11,"close","","",92,[[["self"]],["result",["async"]]]],[11,"start_send","","",93,N],[11,"poll_complete","","",93,[[["self"]],["result",["async"]]]],[11,"close","","",93,[[["self"]],["result",["async"]]]],[11,"start_send","","",94,N],[11,"poll_complete","","",94,[[["self"]],["result",["async"]]]],[11,"close","","",94,[[["self"]],["result",["async"]]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["result",["async"]]]],[11,"close","","",95,[[["self"]],["result",["async"]]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["result",["async"]]]],[11,"close","","",96,[[["self"]],["result",["async"]]]],[11,"drop","jsonrpc_ipc_server::tokio::prelude::future","",68,N],[11,"drop","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","",38,N],[11,"description","jsonrpc_ipc_server::tokio::prelude::stream","",40,[[["self"]],["str"]]],[11,"description","jsonrpc_ipc_server::tokio::prelude::future","",41,[[["self"]],["str"]]],[11,"cause","","",41,[[["self"]],["option",["error"]]]],[11,"description","jsonrpc_ipc_server::tokio::prelude::stream","",26,[[["self"]],["str"]]],[11,"poll","","",94,[[["self"]],["result",["async"]]]],[11,"poll","","",88,[[["self"]],["result",["async"]]]],[11,"poll","","",89,[[["self"]],["result",["async"]]]],[11,"poll","","",95,[[["self"]],["result",["async"]]]],[11,"poll","","",84,[[["self"]],["result",["async"]]]],[11,"poll","","",39,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::future","",97,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",98,[[["self"]],["result",["async"]]]],[11,"poll","","",99,[[["self"]],["result",["async"]]]],[11,"poll","","",76,[[["self"]],["result",["async"]]]],[11,"poll","","",87,[[["self"]],["result",["async"]]]],[11,"poll","","",100,[[["self"]],["result",["async"]]]],[11,"poll","","",101,[[["self"]],["result",["async"]]]],[11,"poll","","",102,[[["self"]],["result",["async"]]]],[11,"poll","","",79,[[["self"]],["result",["async"]]]],[11,"poll","","",103,[[["self"]],["result",["async"]]]],[11,"poll","","",104,[[["self"]],["result",["async"]]]],[11,"poll","","",105,[[["self"]],["result",["async"]]]],[11,"poll","","",92,[[["self"]],["result",["async"]]]],[11,"poll","","",83,[[["self"]],["result",["async"]]]],[11,"poll","","",106,[[["self"]],["result",["async"]]]],[11,"poll","","",85,[[["self"]],["result",["async"]]]],[11,"poll","","",91,[[["self"]],["result",["async"]]]],[11,"poll","","",107,[[["self"]],["result",["async"]]]],[11,"poll","","",78,[[["self"]],["result",["async"]]]],[11,"poll","","",90,[[["self"]],["result",["async"]]]],[11,"poll","","",81,[[["self"]],["result",["async"]]]],[11,"poll","","",108,[[["self"]],["result",["async"]]]],[11,"poll","","",93,[[["self"]],["result",["async"]]]],[11,"poll","","",77,[[["self"]],["result",["async"]]]],[11,"poll","","",109,[[["self"]],["result",["async"]]]],[11,"poll","","",96,[[["self"]],["result",["async"]]]],[11,"poll","","",86,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::future","",110,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","",38,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::prelude::stream","",82,[[["self"]],["result",["async"]]]],[11,"poll","","",111,[[["self"]],["result",["async"]]]],[11,"poll","","",112,[[["self"]],["result",["async"]]]],[11,"poll","","",113,[[["self"]],["result",["async"]]]],[11,"next","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","",114,[[["self"]],["option"]]],[11,"size_hint","","",114,N],[11,"next","jsonrpc_ipc_server::tokio::prelude::stream","",115,[[["self"]],["option"]]],[11,"clone","jsonrpc_ipc_server::tokio::prelude::future","",16,[[["self"]],["executeerrorkind"]]],[11,"clone","jsonrpc_ipc_server::tokio::prelude::task","",116,[[["self"]],["task"]]],[11,"clone","jsonrpc_ipc_server::tokio::prelude::future","",117,[[["self"]],["shareditem"]]],[11,"clone","jsonrpc_ipc_server::tokio::prelude","",20,[[["self"]],["asyncsink"]]],[11,"clone","","",25,[[["self"]],["async"]]],[11,"clone","jsonrpc_ipc_server::tokio::prelude::task","",118,[[["self"]],["unparkevent"]]],[11,"clone","","",119,[[["self"]],["taskrc"]]],[11,"clone","jsonrpc_ipc_server::tokio::prelude::future","",68,[[["self"]],["shared"]]],[11,"clone","","",42,[[["self"]],["futureresult"]]],[11,"clone","","",41,[[["self"]],["sharederror"]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::task","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::task","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::task","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::task","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::task","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::task","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::task","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::stream","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::prelude::future","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",117,[[["self"]],["t"]]],[11,"deref","","",41,[[["self"]],["e"]]],[11,"eq","","",16,[[["self"],["executeerrorkind"]],["bool"]]],[11,"eq","jsonrpc_ipc_server::tokio::prelude","",20,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",20,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","","",25,[[["self"],["async"]],["bool"]]],[11,"ne","","",25,[[["self"],["async"]],["bool"]]],[11,"default","jsonrpc_ipc_server::tokio::prelude::task","",124,[[],["atomictask"]]],[11,"from","jsonrpc_ipc_server::tokio::io","Convert a `serde_json::Error` into an `io::Error`.",37,[[["error"]],["error"]]],[11,"encode","jsonrpc_ipc_server::tokio::codec::length_delimited","",126,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"spawn","jsonrpc_ipc_server::tokio::runtime","",127,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::runtime::current_thread","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::runtime","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::runtime::current_thread","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::executor","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::runtime","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::codec::length_delimited","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::runtime","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::codec::length_delimited","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::runtime::current_thread","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","jsonrpc_ipc_server::tokio::codec::length_delimited","",135,[[["self"]],["str"]]],[11,"drop","jsonrpc_ipc_server::tokio::runtime","",132,N],[11,"into_future","jsonrpc_ipc_server::tokio::executor","",131,N],[11,"execute","jsonrpc_ipc_server::tokio::runtime","",127,[[["self"],["t"]],["result",["executeerror"]]]],[11,"execute","jsonrpc_ipc_server::tokio::runtime::current_thread","",130,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::codec::length_delimited","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","jsonrpc_ipc_server::tokio::runtime::current_thread","",130,[[["self"]],["handle"]]],[11,"clone","jsonrpc_ipc_server::tokio::runtime","",127,[[["self"]],["taskexecutor"]]],[11,"clone","jsonrpc_ipc_server::tokio::codec::length_delimited","",133,[[["self"]],["builder"]]],[11,"poll","jsonrpc_ipc_server::tokio::runtime","",134,[[["self"]],["result",["async"]]]],[11,"decode","jsonrpc_ipc_server::tokio::codec::length_delimited","",126,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"spawn","jsonrpc_ipc_server::tokio::executor","",137,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",137,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",138,[[["self"]],["str"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",137,[[["self"]],["defaultexecutor"]]],[11,"execute","","",137,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::io","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::codec","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::io","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::codec","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::io","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"shutdown","","",145,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",145,[[["self"],["b"]],["result",["async","error"]]]],[11,"read_buf","","",149,[[["self"],["b"]],["result",["async","error"]]]],[11,"read","","",149,N],[11,"poll","","",151,[[["self"]],["result",["async","error"]]]],[11,"poll","jsonrpc_ipc_server::tokio::codec","",141,[[["self"]],["result",["async"]]]],[11,"poll","","",140,[[["self"]],["result",["async"]]]],[11,"poll","","",147,[[["self"]],["result",["async"]]]],[11,"write","jsonrpc_ipc_server::tokio::io","",145,N],[11,"flush","","",145,[[["self"]],["result",["error"]]]],[11,"poll","","",143,[[["self"]],["result",["async","error"]]]],[11,"poll","","",142,[[["self"]],["result",["async","error"]]]],[11,"poll","","",150,[[["self"]],["result",["async","error"]]]],[11,"poll","","",146,[[["self"]],["result",["async","error"]]]],[11,"poll","","",139,[[["self"]],["result",["async","error"]]]],[11,"poll","","",148,[[["self"]],["result",["async","error"]]]],[11,"poll","","",144,[[["self"]],["result",["async","error"]]]],[11,"start_send","jsonrpc_ipc_server::tokio::codec","",141,N],[11,"poll_complete","","",141,[[["self"]],["result",["async"]]]],[11,"close","","",141,[[["self"]],["result",["async"]]]],[11,"start_send","","",147,N],[11,"poll_complete","","",147,[[["self"]],["result",["async"]]]],[11,"close","","",147,[[["self"]],["result",["async"]]]],[11,"start_send","","",140,N],[11,"poll_complete","","",140,[[["self"]],["result",["async"]]]],[11,"close","","",140,[[["self"]],["result",["async"]]]],[11,"eq","","",152,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",152,[[["self"],["linescodec"]],["bool"]]],[11,"eq","","",153,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",153,[[["self"],["bytescodec"]],["bool"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",152,N],[11,"hash","","",153,N],[11,"decode","","",152,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",152,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode","","",153,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"partial_cmp","","",152,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",152,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",152,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",152,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",152,[[["self"],["linescodec"]],["bool"]]],[11,"partial_cmp","","",153,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",153,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",153,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",153,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",153,[[["self"],["bytescodec"]],["bool"]]],[11,"encode","","",152,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"encode","","",153,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"clone","","",152,[[["self"]],["linescodec"]]],[11,"clone","","",153,[[["self"]],["bytescodec"]]],[11,"cmp","","",152,[[["self"],["linescodec"]],["ordering"]]],[11,"cmp","","",153,[[["self"],["bytescodec"]],["ordering"]]],[11,"fmt","jsonrpc_ipc_server::tokio::fs::file","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::fs","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::fs::file","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::fs","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::io","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::fs::os::unix","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::io","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::fs::file","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","jsonrpc_ipc_server::tokio::fs","",158,N],[11,"poll","jsonrpc_ipc_server::tokio::fs::file","",156,[[["self"]],["result",["async"]]]],[11,"poll","","",157,[[["self"]],["result",["async"]]]],[11,"poll","","",154,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::fs::os::unix","",161,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ipc_server::tokio::fs::file","",163,[[["self"]],["result",["async"]]]],[11,"from","jsonrpc_ipc_server::tokio::fs","",155,[[["openoptions"]],["openoptions"]]],[11,"read","jsonrpc_ipc_server::tokio::io","",160,N],[11,"read","jsonrpc_ipc_server::tokio::fs","",158,N],[11,"clone","","",155,[[["self"]],["openoptions"]]],[11,"write","","",158,N],[11,"flush","","",158,[[["self"]],["result",["error"]]]],[11,"write","jsonrpc_ipc_server::tokio::io","",159,N],[11,"flush","","",159,[[["self"]],["result",["error"]]]],[11,"write","","",162,N],[11,"flush","","",162,[[["self"]],["result",["error"]]]],[11,"shutdown","jsonrpc_ipc_server::tokio::fs","",158,[[["self"]],["result",["async","error"]]]],[11,"shutdown","jsonrpc_ipc_server::tokio::io","",162,[[["self"]],["result",["async","error"]]]],[11,"shutdown","","",159,[[["self"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",160,N],[11,"prepare_uninitialized_buffer","jsonrpc_ipc_server::tokio::fs","",158,N],[11,"from","jsonrpc_ipc_server::tokio::io","",37,[[["error"]],["error"]]],[11,"unpark","jsonrpc_ipc_server::tokio::reactor","",164,N],[11,"fmt","","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",165,N],[11,"drop","","",168,N],[11,"read","","",165,N],[11,"clone","","",164,[[["self"]],["handle"]]],[11,"shutdown","","",165,[[["self"]],["result",["async","error"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",164,[[],["handle"]]],[11,"write","","",165,N],[11,"flush","","",165,[[["self"]],["result",["error"]]]],[11,"unpark","","",166,N],[11,"park","","",166,[[["self"]],["result",["error"]]]],[11,"park_timeout","","",166,[[["self"],["duration"]],["result",["error"]]]],[11,"poll","jsonrpc_ipc_server::tokio::timer","",170,[[["self"]],["result",["async"]]]],[11,"poll","","",171,[[["self"]],["result",["async"]]]],[11,"poll","","",172,[[["self"]],["result",["async","error"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer::delay_queue","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer::timeout","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer::delay_queue","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",176,[[["self"]],["str"]]],[11,"description","jsonrpc_ipc_server::tokio::timer::timeout","",175,[[["self"]],["str"]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::timer::timeout","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","jsonrpc_ipc_server::tokio::timer","",173,[[["self"]],["result",["async"]]]],[11,"poll","","",171,[[["self"]],["result",["async"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::net::tcp","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",179,[[["self"]],["result",["async","error"]]]],[11,"read","","",181,N],[11,"as_raw_fd","","",181,[[["self"]],["i32"]]],[11,"as_raw_fd","","",178,[[["self"]],["i32"]]],[11,"poll","","",180,[[["self"]],["result",["async","error"]]]],[11,"write","","",181,N],[11,"flush","","",181,[[["self"]],["result",["error"]]]],[11,"shutdown","","",181,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",181,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",181,N],[11,"read_buf","","",181,[[["self"],["b"]],["result",["async","error"]]]],[11,"fmt","jsonrpc_ipc_server::tokio::net::udp","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",184,[[["self"]],["result",["async"]]]],[11,"as_raw_fd","","",183,[[["self"]],["i32"]]],[11,"poll","","",185,[[["self"]],["result",["async","error"]]]],[11,"poll","","",182,[[["self"]],["result",["async","error"]]]],[11,"start_send","","",184,N],[11,"poll_complete","","",184,[[["self"]],["result",["async"]]]],[11,"close","","",184,[[["self"]],["result",["async"]]]],[11,"eq","jsonrpc_ipc_server::tokio::net::unix","",9,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",9,[[["self"],["ucred"]],["bool"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",9,N],[11,"shutdown","","",190,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",190,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",190,N],[11,"read_buf","","",190,[[["self"],["b"]],["result",["async","error"]]]],[11,"poll","","",188,[[["self"]],["result",["async","error"]]]],[11,"read","","",190,N],[11,"clone","","",9,[[["self"]],["ucred"]]],[11,"as_raw_fd","","",190,[[["self"]],["i32"]]],[11,"as_raw_fd","","",189,[[["self"]],["i32"]]],[11,"as_raw_fd","","",186,[[["self"]],["i32"]]],[11,"poll","","",192,[[["self"]],["result",["async","error"]]]],[11,"poll","","",187,[[["self"]],["result",["async"]]]],[11,"poll","","",191,[[["self"]],["result",["async"]]]],[11,"write","","",190,N],[11,"flush","","",190,[[["self"]],["result",["error"]]]],[11,"new","jsonrpc_ipc_server::tokio::codec::length_delimited","Creates a new length delimited codec builder with default configuration values.",133,[[],["builder"]]],[11,"big_endian","","Read the length field as a big endian integer",133,[[["self"]],["builder"]]],[11,"little_endian","","Read the length field as a little endian integer",133,[[["self"]],["builder"]]],[11,"native_endian","","Read the length field as a native endian integer",133,[[["self"]],["builder"]]],[11,"max_frame_length","","Sets the max frame length",133,[[["self"],["usize"]],["builder"]]],[11,"length_field_length","","Sets the number of bytes used to represent the length field",133,[[["self"],["usize"]],["builder"]]],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",133,[[["self"],["usize"]],["builder"]]],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",133,[[["self"],["isize"]],["builder"]]],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",133,[[["self"],["usize"]],["builder"]]],[11,"new_codec","","Create a configured length delimited `LengthDelimitedCodec`",133,[[["self"]],["lengthdelimitedcodec"]]],[11,"new_read","","Create a configured length delimited `FramedRead`",133,[[["self"],["t"]],["framedread",["lengthdelimitedcodec"]]]],[11,"new_write","","Create a configured length delimited `FramedWrite`",133,[[["self"],["t"]],["framedwrite",["lengthdelimitedcodec"]]]],[11,"new_framed","","Create a configured length delimited `Framed`",133,[[["self"],["t"]],["framed",["lengthdelimitedcodec"]]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"to_string","","",135,[[["self"]],["string"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"new","","Creates a new `LengthDelimitedCodec` with the default configuration values.",126,[[],["lengthdelimitedcodec"]]],[11,"max_frame_length","","Returns the current max frame setting",126,[[["self"]],["usize"]]],[11,"set_max_frame_length","","Updates the max frame setting.",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::codec","Returns a `LinesCodec` for splitting up data into lines.",152,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",152,[[["usize"]],["linescodec"]]],[11,"max_length","","Returns the maximum line length when decoding.",152,[[["self"]],["usize"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",147,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",147,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",147,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",147,[[["self"]],["t"]]],[11,"codec","","Returns a reference to the underlying codec wrapped by `Frame`.",147,[[["self"]],["u"]]],[11,"codec_mut","","Returns a mutable reference to the underlying codec wrapped by `Frame`.",147,[[["self"]],["u"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",147,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",147,[[["self"]],["framedparts"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",153,[[],["bytescodec"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",140,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",140,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",140,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",140,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",140,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",140,[[["self"]],["d"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"new","","Create a new, default, `FramedParts`",2,[[["t"],["u"]],["framedparts"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",141,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",141,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",141,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",141,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",141,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",141,[[["self"]],["e"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ipc_server::tokio::executor","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"into_future","","",131,[[["self"]],["f"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",138,[[],["spawnerror"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",138,[[],["spawnerror"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",138,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",138,[[["self"]],["bool"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"to_string","","",138,[[["self"]],["string"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the default executor for the current context.",137,[[],["defaultexecutor"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::fs","Creates a blank new set of options ready for configuration.",155,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",155,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",155,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",155,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",155,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",155,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",155,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",155,[[["self"],["p"]],["openfuture"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ipc_server::tokio::fs::os::unix","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"into_future","","",161,[[["self"]],["f"]]],[11,"open","jsonrpc_ipc_server::tokio::fs","Attempts to open a file in read-only mode.",158,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",158,[[["p"]],["createfuture"]]],[11,"from_std","","Convert a [`std::fs::File`][std] to a `tokio_fs::File`.",158,[[["file"]],["file"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",158,[[["self"],["seekfrom"]],["result",["async","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",158,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",158,[[["self"]],["result",["async","error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",158,[[["self"]],["result",["async","error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",158,[[["self"],["u64"]],["result",["async","error"]]]],[11,"metadata","","Queries metadata about the underlying file.",158,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",158,[[["self"]],["result",["async","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",158,[[["self"]],["result",["async","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",158,[[["self"],["permissions"]],["result",["async","error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",158,[[["self"]],["file"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ipc_server::tokio::fs::file","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"into_future","","",156,[[["self"]],["f"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"into_future","","",154,[[["self"]],["f"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"into_future","","",163,[[["self"]],["f"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"into_future","","",157,[[["self"]],["f"]]],[11,"from","jsonrpc_ipc_server::tokio::io","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"into_future","","",142,[[["self"]],["f"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"into_future","","",143,[[["self"]],["f"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"into_future","","",150,[[["self"]],["f"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"into_future","","",139,[[["self"]],["f"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into_future","","",148,[[["self"]],["f"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"into_future","","",146,[[["self"]],["f"]]],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",37,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",37,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",37,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",37,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",37,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",37,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",37,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",37,[[["self"]],["errorkind"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"into_future","","",144,[[["self"]],["f"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"into_inner","","Returns the underlying I/O object.",151,[[["self"]],["a"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"connect","jsonrpc_ipc_server::tokio::net::tcp","Create a new TCP stream connected to the specified address.",181,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",181,[[["tcpstream"],["handle"]],["result",["tcpstream","error"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",181,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",181,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",181,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",181,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",181,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",181,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",181,[[["self"],["shutdown"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",181,[[["self"]],["result",["bool","error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",181,[[["self"],["bool"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",181,[[["self"]],["result",["usize","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",181,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",181,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",181,[[["self"],["usize"]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",181,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",181,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",181,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",181,[[["self"],["u32"]],["result",["error"]]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",181,[[["self"]],["result",["option","error"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",181,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",181,[[["self"]],["result",["tcpstream","error"]]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"into_future","","",180,[[["self"]],["f"]]],[11,"bind","","Create a new TCP listener associated with this event loop.",178,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",178,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",178,[[["self"]],["result",["async","error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",178,[[["tcplistener"],["handle"]],["result",["tcplistener","error"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",178,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",178,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",178,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",178,[[["self"],["u32"]],["result",["error"]]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::net::udp","Create a new `UdpFramed` backed by the given socket and codec.",184,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",184,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",184,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",184,[[["self"]],["udpsocket"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"into_future","","",182,[[["self"]],["f"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",183,[[["socketaddr"]],["result",["udpsocket","error"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",183,[[["udpsocket"],["handle"]],["result",["udpsocket","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",183,[[["self"]],["result",["socketaddr","error"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",183,[[["self"],["socketaddr"]],["result",["error"]]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",183,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",183,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",183,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",183,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",183,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",183,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",183,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",183,[[["self"]],["result",["async","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",183,[[["self"]],["result",["bool","error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",183,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",183,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",183,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",183,[[["self"]],["result",["u32","error"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",183,[[["self"],["u32"]],["result",["error"]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",183,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",183,[[["self"],["bool"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",183,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",183,[[["self"],["u32"]],["result",["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",183,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",183,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",183,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",183,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"into_future","","",185,[[["self"]],["f"]]],[11,"to_owned","jsonrpc_ipc_server::tokio::net::unix","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"into_future","","",192,[[["self"]],["f"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"into_future","","",191,[[["self"]],["f"]]],[11,"connect","","Connects to the socket named by `path`.",190,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",190,[[["unixstream"],["handle"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",190,[[],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",190,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",190,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",190,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",190,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",190,[[["self"]],["result",["ucred","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",190,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",190,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",189,[[["p"]],["result",["unixdatagram","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",189,[[],["result",["error"]]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",189,[[["unixdatagram"],["handle"]],["result",["unixdatagram","error"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",189,[[],["result",["unixdatagram","error"]]]],[11,"connect","","Connects the socket to the specified address.",189,[[["self"],["p"]],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",189,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",189,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",189,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",189,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_recv_from","","Receives data from the socket.",189,N],[11,"poll_recv","","Receives data from the socket.",189,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",189,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",189,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",189,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",189,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",189,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",189,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",186,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",186,[[["unixlistener"],["handle"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",186,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",186,[[["self"],["ready"]],["result",["async","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",186,[[["self"]],["result",["option","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",186,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",186,[[["self"]],["result",["async","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",186,[[["self"]],["incoming"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"into_future","","",187,[[["self"]],["f"]]],[11,"new","jsonrpc_ipc_server::tokio::prelude::future","Create a new `ExecuteError`",121,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",121,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",121,[[["self"]],["f"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"into_future","","",50,[[["self"]],["f"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"into_future","","",42,[[["self"]],["f"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into_future","","",48,[[["self"]],["f"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into_future","","",47,[[["self"]],["f"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",59,[[["self"]],["bool"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into_future","","",59,[[["self"]],["f"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into_future","","",61,[[["self"]],["f"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into_future","","",57,[[["self"]],["f"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into_future","","",55,[[["self"]],["f"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"into_future","","",58,[[["self"]],["f"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",68,[[["self"]],["option",["result"]]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_future","","",68,[[["self"]],["f"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into_future","","",62,[[["self"]],["f"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into_future","","",44,[[["self"]],["f"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into_future","","",71,[[["self"]],["f"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"into_future","","",46,[[["self"]],["f"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into_future","","",60,[[["self"]],["f"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into_future","","",65,[[["self"]],["f"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_future","","",18,[[["self"]],["f"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_future","","",73,[[["self"]],["f"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"into_future","","",45,[[["self"]],["f"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into_future","","",56,[[["self"]],["f"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into_future","","",49,[[["self"]],["f"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into_future","","",54,[[["self"]],["f"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into_future","","",51,[[["self"]],["f"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_future","","",72,[[["self"]],["f"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into_future","","",52,[[["self"]],["f"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"map","jsonrpc_ipc_server::tokio::prelude","Change the NotReady value of this `AsyncSink` with the closure provided",20,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",20,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",20,[[["self"]],["bool"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::prelude::task","Create an `AtomicTask` initialized with the given `Task`",124,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",124,N],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",124,N],[11,"notify","","Notifies the task that last called `register`.",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",118,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",116,N],[11,"is_current","","Returns `true` when called from within the context of the task.",116,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",116,[[["self"]],["bool"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",119,[[["a"]],["taskrc"]]],[11,"with","","Operate with a reference to the underlying data.",119,[[["self"],["f"]],["r"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",122,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",122,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",122,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",122,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",122,[[["self"]],["result"]]],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",122,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",122,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",122,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",122,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",122,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",122,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",122,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",122,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",122,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",125,[[["self"],["f"]],["r"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"map","jsonrpc_ipc_server::tokio::prelude","Change the success value of this `Async` with the closure provided",25,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",25,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",25,[[["self"]],["bool"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",38,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",38,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",38,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",38,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",38,[[["self"]],["itermut"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into_iter","","",114,[[["self"]],["i"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_ipc_server::tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,[[["self"]],["s"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",87,[[["self"]],["s"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",39,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",39,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",39,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",96,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",96,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",96,[[["self"]],["s"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",93,[[["self"]],["s"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",79,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",79,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",79,[[["self"]],["s"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into_future","","",69,[[["self"]],["f"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",108,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into_future","","",43,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,[[["self"]],["s"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",82,[[["self"]],["result",["async"]]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",74,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",74,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",74,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",74,[[["self"]],["option"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,[[["self"]],["option"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",81,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",81,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",81,[[["self"]],["s"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",92,[[["self"]],["s"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"send","","Sends a new value along this channel to the receiver.",120,[[["self"],["result"]],["futuresender"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",80,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,[[["self"]],["s"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",94,[[["self"]],["s"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,[[["self"]],["s"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",115,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",115,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",115,[[["self"]],["s"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into_iter","","",115,[[["self"]],["i"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",91,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",91,[[["self"]],["s"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",88,[[["self"]],["s"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into_future","","",70,[[["self"]],["f"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into_future","","",53,[[["self"]],["f"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",95,[[["self"]],["s"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",85,[[["self"]],["s"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",89,[[["self"]],["s"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",84,[[["self"]],["s"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ipc_server::tokio::reactor","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"handle","","Returns a reference to the reactor handle.",168,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",168,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",168,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",168,N],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",166,[[],["result",["reactor","error"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",166,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",166,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",166,[[["self"],["option",["duration"]]],["result",["turn","error"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",166,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",166,[[["self"]],["result",["background","error"]]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the current reactor.",164,[[],["handle"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",165,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",165,[[["e"],["handle"]],["result",["pollevented","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",165,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",165,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",165,[[["self"]],["result",["error"]]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",165,[[["self"],["ready"]],["result",["async","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",165,[[["self"],["ready"]],["result",["error"]]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",165,[[["self"]],["result",["async","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",165,[[["self"]],["result",["error"]]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"new","","Create a new `Registration`.",169,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",169,[[["self"],["t"]],["result",["bool","error"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",169,[[["self"],["t"]],["result",["error"]]]],[11,"register_with","","Register the I/O resource with the specified reactor.",169,[[["self"],["t"],["handle"]],["result",["bool","error"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",169,[[["self"]],["result",["async","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",169,[[["self"]],["result",["option","error"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",169,[[["self"]],["result",["async","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",169,[[["self"]],["result",["option","error"]]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::runtime::current_thread","Returns a new runtime builder initialized with default configuration values.",128,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",128,[[["self"],["clock"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",128,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime initialized with default configuration values.",136,[[],["result",["runtime","error"]]]],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",136,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",136,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",136,[[["self"],["f"]],["result"]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",136,[[["self"]],["result",["runerror"]]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",130,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",130,[[["self"]],["result",["spawnerror"]]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::runtime","Create a new runtime instance with default configuration values.",132,[[],["result",["runtime","error"]]]],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",132,[[["self"]],["handle"]]],[11,"executor","","Return a handle to the runtime's executor.",132,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",132,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Run a future to completion on the Tokio runtime.",132,[[["self"],["f"]],["result"]]],[11,"block_on_all","","Run a future to completion on the Tokio runtime, then wait for all background futures to complete too.",132,[[["self"],["f"]],["result"]]],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",132,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",132,[[["self"]],["shutdown"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",127,N],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",129,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",129,[[["self"],["clock"]],["builder"]]],[11,"core_threads","","Set the maximum number of worker threads for the `Runtime`'s thread pool.",129,[[["self"],["usize"]],["builder"]]],[11,"blocking_threads","","Set the maximum number of concurrent blocking sections in the `Runtime`'s thread pool.",129,[[["self"],["usize"]],["builder"]]],[11,"name_prefix","","Set name prefix of threads spawned by the `Runtime`'s thread pool.",129,[[["self"],["s"]],["builder"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",129,[[["self"],["usize"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",129,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"into_future","","",134,[[["self"]],["f"]]],[11,"new","jsonrpc_ipc_server::tokio::timer","Create a new, empty, `DelayQueue`",172,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",172,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",172,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",172,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",172,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",172,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",172,N],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",172,N],[11,"clear","","Clears the queue, removing all items.",172,N],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",172,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",172,N],[11,"is_empty","","Returns `true` if there are no items in the queue.",172,[[["self"]],["bool"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_ipc_server::tokio::timer::delay_queue","Returns a reference to the inner value.",177,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",177,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",177,[[["self"]],["t"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::timer","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",171,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",171,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",171,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",171,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",171,[[["t"],["instant"]],["timeout"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"into_future","","",171,[[["self"]],["f"]]],[11,"shutdown","","Create an error representing a shutdown timer.",176,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",176,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",176,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",176,[[["self"]],["bool"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"to_string","","",176,[[["self"]],["string"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",170,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",170,[[["duration"]],["interval"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"inner","jsonrpc_ipc_server::tokio::timer::timeout","Create a new `Error` representing the inner value completing with `Err`.",175,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",175,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",175,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",175,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",175,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",175,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",175,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",175,[[["self"]],["option",["error"]]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"to_string","","",175,[[["self"]],["string"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ipc_server::tokio::timer","Create a new `Delay` instance that elapses at `deadline`.",173,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",173,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",173,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"into_future","","",173,[[["self"]],["f"]]],[11,"to_owned","jsonrpc_ipc_server","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[8,"Executor"],[8,"Read"],[8,"AsyncRead"],[4,"ErrorKind"],[8,"AsyncWrite"],[8,"Write"],[3,"UCred"],[8,"FutureExt"],[8,"Stream"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Sink"],[4,"AsyncSink"],[8,"Executor"],[8,"EventSet"],[8,"Unpark"],[8,"StreamExt"],[4,"Async"],[3,"ReuniteError"],[4,"MergedItem"],[4,"Separator"],[8,"SessionStats"],[3,"RequestContext"],[3,"ServerBuilder"],[3,"Server"],[3,"CloseHandle"],[3,"NoopExtractor"],[8,"MetaExtractor"],[3,"SecurityAttributes"],[3,"Error"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"SendError"],[3,"SharedError"],[3,"Err"],[3,"Concat"],[3,"Empty"],[3,"Flatten"],[3,"OrElse"],[3,"CatchUnwind"],[3,"Inspect"],[3,"Select2"],[3,"AndThen"],[3,"Select"],[3,"FromErr"],[3,"Collect"],[3,"Join"],[3,"PollFn"],[3,"SelectAll"],[3,"MapErr"],[3,"SelectNext"],[3,"Fuse"],[3,"Lazy"],[3,"LoopFn"],[3,"Join5"],[3,"Join4"],[3,"Concat2"],[3,"Join3"],[3,"Then"],[3,"StreamFuture"],[3,"Shared"],[3,"Fold"],[3,"ForEach"],[3,"Collect"],[3,"SelectOk"],[3,"Map"],[3,"Forward"],[3,"FutureSender"],[3,"InspectErr"],[3,"FromErr"],[3,"OrElse"],[3,"BufferUnordered"],[3,"SplitSink"],[3,"Take"],[3,"Peekable"],[3,"Then"],[3,"Buffered"],[3,"Flatten"],[3,"Inspect"],[3,"FilterMap"],[3,"TakeWhile"],[3,"SkipWhile"],[3,"Skip"],[3,"Fuse"],[3,"Chunks"],[3,"Filter"],[3,"AndThen"],[3,"Map"],[3,"MapErr"],[3,"IntoStream"],[3,"Empty"],[3,"Unfold"],[3,"Chain"],[3,"Repeat"],[3,"IterResult"],[3,"Iter"],[3,"Merge"],[3,"Once"],[3,"PollFn"],[3,"Zip"],[3,"SplitStream"],[3,"Select"],[3,"FlattenStream"],[3,"Receiver"],[3,"IterOk"],[3,"CatchUnwind"],[3,"IterMut"],[3,"Wait"],[3,"Task"],[3,"SharedItem"],[3,"UnparkEvent"],[3,"TaskRc"],[3,"Sender"],[3,"ExecuteError"],[3,"Spawn"],[3,"Run"],[3,"AtomicTask"],[3,"LocalKey"],[3,"LengthDelimitedCodec"],[3,"TaskExecutor"],[3,"Builder"],[3,"Builder"],[3,"Handle"],[3,"Spawn"],[3,"Runtime"],[3,"Builder"],[3,"Shutdown"],[3,"FrameTooBig"],[3,"Runtime"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"Shutdown"],[3,"FramedRead"],[3,"FramedWrite"],[3,"ReadToEnd"],[3,"WriteAll"],[3,"Copy"],[3,"WriteHalf"],[3,"ReadUntil"],[3,"Framed"],[3,"ReadExact"],[3,"ReadHalf"],[3,"Flush"],[3,"Lines"],[3,"LinesCodec"],[3,"BytesCodec"],[3,"SeekFuture"],[3,"OpenOptions"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"File"],[3,"Stderr"],[3,"Stdin"],[3,"SymlinkFuture"],[3,"Stdout"],[3,"OpenFuture"],[3,"Handle"],[3,"PollEvented2"],[3,"Reactor"],[3,"Turn"],[3,"Background"],[3,"Registration"],[3,"Interval"],[3,"Timeout"],[3,"DelayQueue"],[3,"Delay"],[3,"Key"],[3,"Error"],[3,"Error"],[3,"Expired"],[3,"TcpListener"],[3,"Incoming"],[3,"ConnectFuture"],[3,"TcpStream"],[3,"SendDgram"],[3,"UdpSocket"],[3,"UdpFramed"],[3,"RecvDgram"],[3,"UnixListener"],[3,"RecvDgram"],[3,"Incoming"],[3,"UnixDatagram"],[3,"UnixStream"],[3,"SendDgram"],[3,"ConnectFuture"]]};
searchIndex["jsonrpc_macros"]={"doc":"High level, typed wrapper for `jsonrpc_core`.","items":[[3,"Trailing","jsonrpc_macros","A wrapper type without an implementation of `Deserialize` which allows a special implementation of `Wrap` for functions that take a trailing default parameter.",N,N],[3,"IoDelegate","","A set of RPC methods and notifications tied to single `delegate` struct.",N,N],[5,"to_value","","Converts a serializable value into `Value`.",N,[[["t"]],["value"]]],[11,"into","","",0,[[["self"]],["option"]]],[11,"from","","",0,[[["option"]],["self"]]],[11,"unwrap_or","","Returns a underlying value if present or provided value.",0,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Returns an underlying value or computes it if not present.",0,[[["self"],["f"]],["t"]]],[11,"unwrap_or_default","","Returns an underlying value or the default value.",0,[[["self"]],["t"]]],[11,"new","","Creates new `IoDelegate`",1,[[["arc"]],["self"]]],[11,"add_alias","","Adds an alias to existing method. NOTE: Aliases are not transitive, i.e. you cannot create alias to an alias.",1,[[["self"],["str"],["str"]]]],[11,"add_method","","Adds async method to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_method_with_meta","","Adds async method with metadata to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_notification","","Adds notification to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_subscription","","Adds subscription to the delegate.",1,N],[11,"into","","",1,[[["self"]],["hashmap",["string","remoteprocedure"]]]],[0,"pubsub","","PUB-SUB auto-serializing structures.",N,N],[4,"SubscriptionId","jsonrpc_macros::pubsub","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",N,N],[13,"Number","","U64 number",2,N],[13,"String","","String",2,N],[3,"Subscriber","","New PUB-SUB subcriber.",N,N],[3,"Sink","","Subscriber sink.",N,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Wrap non-typed subscriber.",3,[[["subscriber"]],["self"]]],[11,"new_test","","Create new subscriber for tests.",3,N],[11,"reject","","Reject subscription with given error.",3,[[["self"],["error"]],["result"]]],[11,"assign_id","","Assign id to this subscriber. This method consumes `Subscriber` and returns `Sink` if the connection is still open or error otherwise.",3,[[["self"],["subscriptionid"]],["result",["sink"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["sink"]]],[11,"notify","","Sends a notification to the subscriber.",4,[[["self"],["result"]],["sinkresult"]]],[11,"start_send","","",4,N],[11,"poll_complete","","",4,[[["self"]],["poll"]]],[11,"close","","",4,[[["self"]],["poll"]]],[14,"metadata","jsonrpc_macros","Auto-generates an RPC trait from trait definition.",N,N],[14,"build_rpc_trait","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"parse_value","jsonrpc_macros::pubsub","Parses `core::Value` into unique subscription id.",2,[[["value"]],["option",["subscriptionid"]]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"eq","","",2,[[["self"],["subscriptionid"]],["bool"]]],[11,"ne","","",2,[[["self"],["subscriptionid"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",2,N],[11,"from","","",2,[[["string"]],["subscriptionid"]]],[11,"from","","",2,[[["u64"]],["subscriptionid"]]],[11,"clone","","",2,[[["self"]],["subscriptionid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]]],"paths":[[3,"Trailing"],[3,"IoDelegate"],[4,"SubscriptionId"],[3,"Subscriber"],[3,"Sink"]]};
searchIndex["jsonrpc_minihttp_server"]={"doc":"jsonrpc http server.","items":[[0,"cors","jsonrpc_minihttp_server","CORS handling utility functions",N,N],[4,"OriginProtocol","jsonrpc_minihttp_server::cors","Origin Protocol",N,N],[13,"Http","","Http protocol",0,N],[13,"Https","","Https protocol",0,N],[13,"Custom","","Custom protocol",0,N],[3,"Origin","","Request Origin",N,N],[4,"AccessControlAllowOrigin","","Origins allowed to access",N,N],[13,"Value","","Specific hostname",1,N],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,N],[13,"Any","","Any non-null origin",1,N],[4,"AccessControlAllowHeaders","","Headers allowed to access",N,N],[13,"Only","","Specific headers",2,N],[13,"Any","","Any header",2,N],[4,"AllowCors","","CORS response headers",N,N],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",3,N],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",3,N],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",3,N],[5,"get_cors_allow_origin","","Returns correct CORS header (if any) given list of allowed origins and current origin.",N,[[["option",["str"]],["option",["str"]],["option"]],["allowcors",["accesscontrolalloworigin"]]]],[5,"get_cors_allow_headers","","Validates if the `AccessControlAllowedHeaders` in the request are allowed.",N,[[["impl iterator<item = t>"],["impl iterator<item = t>"],["accesscontrolallowheaders"],["f"]],["allowcors",["vec"]]]],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",N,N],[3,"Host","jsonrpc_minihttp_server","Host type",N,N],[4,"DomainsValidation","","Specifies if domains should be validated.",N,N],[13,"AllowOnly","","Allow only domains on the list.",4,N],[13,"Disabled","","Disable domains validation completely.",4,N],[3,"Req","","Request",N,N],[3,"ServerBuilder","","Convenient JSON-RPC HTTP Server builder.",N,N],[3,"RpcService","","Tokio-proto JSON-RPC HTTP Service",N,N],[3,"RpcResponse","","RPC response wrapper",N,N],[3,"Server","","jsonrpc http server instance",N,N],[11,"new","","Creates new `Req` object",5,[[["request"]],["self"]]],[11,"method","","Returns request method",5,[[["self"]],["method"]]],[11,"header","","Returns value of first header with given name. `None` if header is not found or value is not utf-8 encoded",5,[[["self"],["str"]],["option",["str"]]]],[11,"body","","Returns body of the request as a string",5,[[["self"]],["str"]]],[8,"MetaExtractor","","Extracts metadata from the HTTP request.",N,N],[10,"read_metadata","","Read the metadata from the request",6,[[["self"],["req"]],["m"]]],[11,"new","","Creates new `ServerBuilder` for given `IoHandler`.",7,[[["t"]],["self"]]],[11,"with_meta_extractor","","Creates new `ServerBuilder` for given `IoHandler` and meta extractor.",7,[[["t"],["e"]],["self"]]],[11,"threads","","Sets number of threads of the server to run. (not available for windows) Panics when set to `0`.",7,[[["self"],["usize"]],["self"]]],[11,"cors","","Configures a list of allowed CORS origins.",7,[[["self"],["domainsvalidation",["accesscontrolalloworigin"]]],["self"]]],[11,"meta_extractor","","Configures metadata extractor",7,[[["self"],["t"]],["self"]]],[11,"allow_only_bind_host","","Allow connections only with `Host` header set to binding address.",7,[[["self"]],["self"]]],[11,"allowed_hosts","","Specify a list of valid `Host` headers. Binding address is allowed automatically.",7,[[["self"],["domainsvalidation",["host"]]],["self"]]],[11,"start_http","","Start this JSON-RPC HTTP server trying to bind to specified `SocketAddr`.",7,[[["self"],["socketaddr"]],["result",["server"]]]],[11,"call","","",8,N],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"address","","Returns addresses of this server",10,[[["self"]],["socketaddr"]]],[11,"close","","Closes the server.",10,[[["self"]]]],[11,"wait","","Will block, waiting for the server to finish.",10,[[["self"]],["result"]]],[11,"drop","","",10,[[["self"]]]],[11,"to_owned","jsonrpc_minihttp_server::cors","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"eq","","",2,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",2,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",3,[[["self"],["allowcors"]],["bool"]]],[11,"ne","","",3,[[["self"],["allowcors"]],["bool"]]],[11,"eq","","",0,[[["self"],["originprotocol"]],["bool"]]],[11,"ne","","",0,[[["self"],["originprotocol"]],["bool"]]],[11,"eq","jsonrpc_minihttp_server","",11,[[["self"],["host"]],["bool"]]],[11,"ne","","",11,[[["self"],["host"]],["bool"]]],[11,"eq","jsonrpc_minihttp_server::cors","",1,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",1,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",12,[[["self"],["origin"]],["bool"]]],[11,"ne","","",12,[[["self"],["origin"]],["bool"]]],[11,"eq","jsonrpc_minihttp_server","",4,[[["self"],["domainsvalidation"]],["bool"]]],[11,"ne","","",4,[[["self"],["domainsvalidation"]],["bool"]]],[11,"fmt","jsonrpc_minihttp_server::cors","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_minihttp_server","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_minihttp_server::cors","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_minihttp_server","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_minihttp_server::cors","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",12,N],[11,"deref","jsonrpc_minihttp_server","",11,N],[11,"matches","","",11,[[["self"],["t"]],["bool"]]],[11,"matches","jsonrpc_minihttp_server::cors","",12,[[["self"],["t"]],["bool"]]],[11,"hash","","",0,N],[11,"hash","jsonrpc_minihttp_server","",11,N],[11,"hash","jsonrpc_minihttp_server::cors","",12,N],[11,"from","","",12,[[["t"]],["origin"]]],[11,"from","jsonrpc_minihttp_server","",11,[[["t"]],["host"]]],[11,"from","jsonrpc_minihttp_server::cors","",1,[[["t"]],["accesscontrolalloworigin"]]],[11,"from","jsonrpc_minihttp_server","",4,[[["option",["vec"]]],["domainsvalidation"]]],[11,"into","","",4,[[["self"]],["option",["vec"]]]],[11,"into","jsonrpc_minihttp_server::cors","",3,[[["self"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","jsonrpc_minihttp_server","",4,[[["self"]],["domainsvalidation"]]],[11,"clone","jsonrpc_minihttp_server::cors","",2,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",0,[[["self"]],["originprotocol"]]],[11,"clone","jsonrpc_minihttp_server","",11,[[["self"]],["host"]]],[11,"clone","jsonrpc_minihttp_server::cors","",1,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",12,[[["self"]],["origin"]]],[11,"clone","","",3,[[["self"]],["allowcors"]]],[11,"eq","","",13,[[["self"],["s2"]],["bool"]]],[11,"from_str","","",13,[[["str"]],["result",["ascii"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",13,[[["self"]],["s"]]],[11,"as_ref","","",13,[[["self"]],["str"]]],[11,"hash","","",13,N],[11,"partial_cmp","","",13,[[["self"],["ascii"]],["option",["ordering"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",13,[[["self"]],["ascii"]]],[11,"deref_mut","","",13,[[["self"]],["s"]]],[11,"cmp","","",13,[[["self"],["ascii"]],["ordering"]]],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",12,[[["originprotocol"],["str"],["t"]],["origin"]]],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",12,[[["str"]],["origin"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"map","","Maps `Ok` variant of `AllowCors`.",3,[[["self"],["f"]],["allowcors"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"new","","",13,[[["s"]],["ascii"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"new","jsonrpc_minihttp_server","Creates a new `Host` given hostname and port number.",11,[[["str"],["t"]],["host"]]],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",11,[[["str"]],["host"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"into_future","","",9,[[["self"]],["f"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]]],"paths":[[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"AccessControlAllowHeaders"],[4,"AllowCors"],[4,"DomainsValidation"],[3,"Req"],[8,"MetaExtractor"],[3,"ServerBuilder"],[3,"RpcService"],[3,"RpcResponse"],[3,"Server"],[3,"Host"],[3,"Origin"],[3,"Ascii"]]};
searchIndex["jsonrpc_pubsub"]={"doc":"Publish-Subscribe extension for JSON-RPC","items":[[3,"PubSubHandler","jsonrpc_pubsub","Publish-Subscribe extension of `IoHandler`.",N,N],[3,"Session","","RPC client session Keeps track of active subscriptions and unsubscribes from them upon dropping.",N,N],[3,"Sink","","A handle to send notifications directly to subscribed client.",N,N],[3,"Subscriber","","Represents a subscribing client. Subscription handlers can either reject this subscription request or assign an unique id.",N,N],[4,"SubscriptionId","","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",N,N],[13,"Number","","U64 number",0,N],[13,"String","","String",0,N],[5,"new_subscription","","Creates new subscribe and unsubscribe RPC methods",N,N],[11,"default","","",1,[[],["self"]]],[11,"new","","Creates new `PubSubHandler`",1,[[["metaiohandler"]],["self"]]],[11,"add_subscription","","Adds new subscription.",1,N],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"into","","",1,[[["self"]],["metaiohandler"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates new session given transport raw send capabilities. Session should be created as part of metadata, `sender` should be returned by transport.",2,[[["sender",["string"]]],["self"]]],[11,"sender","","Returns transport write stream",2,[[["self"]],["sender",["string"]]]],[11,"on_drop","","Adds a function to call when session is dropped.",2,[[["self"],["f"]]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["sink"]]],[11,"notify","","Sends a notification to a client.",3,[[["self"],["params"]],["sinkresult"]]],[11,"start_send","","",3,N],[11,"poll_complete","","",3,[[["self"]],["poll"]]],[11,"close","","",3,[[["self"]],["poll"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new_test","","Creates new subscriber.",4,N],[11,"assign_id","","Consumes `Subscriber` and assigns unique id to a requestor. Returns `Err` if request has already terminated.",4,[[["self"],["subscriptionid"]],["result",["sink"]]]],[11,"reject","","Rejects this subscription request with given error. Returns `Err` if request has already terminated.",4,[[["self"],["error"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["subscriptionid"]]],[11,"eq","","",0,[[["self"],["subscriptionid"]],["bool"]]],[11,"ne","","",0,[[["self"],["subscriptionid"]],["bool"]]],[11,"hash","","",0,N],[11,"parse_value","","Parses `core::Value` into unique subscription id.",0,[[["value"]],["option",["subscriptionid"]]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[6,"TransportError","","Raw transport error.",N,N],[6,"SinkResult","","Subscription send result.",N,N],[8,"SubscribeRpcMethod","","Subscribe handler",N,N],[10,"call","","Called when client is requesting new subscription to be started.",5,[[["self"],["params"],["m"],["subscriber"]]]],[8,"UnsubscribeRpcMethod","","Unsubscribe handler",N,N],[16,"Out","","Output type",6,N],[10,"call","","Called when client is requesting to cancel existing subscription.",6,N],[8,"PubSubMetadata","","Metadata extension for pub-sub method handling.",N,N],[10,"session","","Returns session object associated with given request/client. `None` indicates that sessions are not supported on the used transport.",7,[[["self"]],["option",["arc"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"SubscriptionId"],[3,"PubSubHandler"],[3,"Session"],[3,"Sink"],[3,"Subscriber"],[8,"SubscribeRpcMethod"],[8,"UnsubscribeRpcMethod"],[8,"PubSubMetadata"]]};
searchIndex["jsonrpc_pubsub_examples"]={"doc":"","items":[],"paths":[]};
searchIndex["jsonrpc_server_utils"]={"doc":"JSON-RPC servers utilities.","items":[[3,"SuspendableStream","jsonrpc_server_utils","`Incoming` is a stream of incoming sockets Polling the stream may return a temporary io::Error (for instance if we can't open the connection because of \"too many open files\" limit) we use for_each combinator which: 1. Runs for every Ok(socket) 2. Stops on the FIRST Err() So any temporary io::Error will cause the entire server to terminate. This wrapper type for tokio::Incoming stops accepting new connections for a specified amount of time once an io::Error is encountered",N,N],[0,"cors","","CORS handling utility functions",N,N],[3,"Ascii","jsonrpc_server_utils::cors","Case Insensitive wrapper of Ascii strings.",N,N],[3,"Origin","","Request Origin",N,N],[4,"OriginProtocol","","Origin Protocol",N,N],[13,"Http","","Http protocol",0,N],[13,"Https","","Https protocol",0,N],[13,"Custom","","Custom protocol",0,N],[4,"AccessControlAllowOrigin","","Origins allowed to access",N,N],[13,"Value","","Specific hostname",1,N],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,N],[13,"Any","","Any non-null origin",1,N],[4,"AccessControlAllowHeaders","","Headers allowed to access",N,N],[13,"Only","","Specific headers",2,N],[13,"Any","","Any header",2,N],[4,"AllowCors","","CORS response headers",N,N],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",3,N],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",3,N],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",3,N],[5,"get_cors_allow_origin","","Returns correct CORS header (if any) given list of allowed origins and current origin.",N,[[["option",["str"]],["option",["str"]],["option"]],["allowcors",["accesscontrolalloworigin"]]]],[5,"get_cors_allow_headers","","Validates if the `AccessControlAllowedHeaders` in the request are allowed.",N,N],[11,"clone","","",0,[[["self"]],["originprotocol"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["originprotocol"]],["bool"]]],[11,"ne","","",0,[[["self"],["originprotocol"]],["bool"]]],[11,"clone","","",4,[[["self"]],["origin"]]],[11,"eq","","",4,[[["self"],["origin"]],["bool"]]],[11,"ne","","",4,[[["self"],["origin"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"from","","",4,[[["t"]],["self"]]],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",4,[[["originprotocol"],["str"],["t"]],["self"]]],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",4,[[["str"]],["self"]]],[11,"matches","","",4,[[["self"],["t"]],["bool"]]],[11,"deref","","",4,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["accesscontrolalloworigin"]]],[11,"eq","","",1,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",1,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["t"]],["accesscontrolalloworigin"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["accesscontrolallowheaders"]]],[11,"eq","","",2,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",2,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["allowcors"]]],[11,"eq","","",3,[[["self"],["allowcors"]],["bool"]]],[11,"ne","","",3,[[["self"],["allowcors"]],["bool"]]],[11,"map","","Maps `Ok` variant of `AllowCors`.",3,[[["self"],["f"]],["allowcors"]]],[11,"into","","",3,[[["self"]],["option"]]],[0,"hosts","jsonrpc_server_utils","Host header validation.",N,N],[3,"Host","jsonrpc_server_utils::hosts","Host type",N,N],[4,"Port","","Port pattern",N,N],[13,"None","","No port specified (default port)",5,N],[13,"Pattern","","Port specified as a wildcard pattern",5,N],[13,"Fixed","","Fixed numeric port",5,N],[4,"DomainsValidation","","Specifies if domains should be validated.",N,N],[13,"AllowOnly","","Allow only domains on the list.",6,N],[13,"Disabled","","Disable domains validation completely.",6,N],[5,"is_host_valid","","Returns `true` when `Host` header is whitelisted in `allowed_hosts`.",N,[[["option",["str"]],["option"]],["bool"]]],[5,"update","","Updates given list of hosts with the address.",N,[[["option",["vec"]],["socketaddr"]],["option",["vec"]]]],[11,"clone","","",5,[[["self"]],["port"]]],[11,"hash","","",5,N],[11,"eq","","",5,[[["self"],["port"]],["bool"]]],[11,"ne","","",5,[[["self"],["port"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from","","",5,[[["option",["u16"]]],["self"]]],[11,"from","","",5,[[["u16"]],["port"]]],[11,"clone","","",7,[[["self"]],["host"]]],[11,"hash","","",7,N],[11,"eq","","",7,[[["self"],["host"]],["bool"]]],[11,"ne","","",7,[[["self"],["host"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"from","","",7,[[["t"]],["self"]]],[11,"new","","Creates a new `Host` given hostname and port number.",7,[[["str"],["t"]],["self"]]],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",7,[[["str"]],["self"]]],[11,"matches","","",7,[[["self"],["t"]],["bool"]]],[11,"deref","","",7,N],[11,"clone","","",6,[[["self"]],["domainsvalidation"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["domainsvalidation"]],["bool"]]],[11,"ne","","",6,[[["self"],["domainsvalidation"]],["bool"]]],[11,"into","","",6,[[["self"]],["option",["vec"]]]],[11,"from","","",6,[[["option",["vec"]]],["self"]]],[0,"session","jsonrpc_server_utils","Session statistics.",N,N],[6,"SessionId","jsonrpc_server_utils::session","Session id",N,N],[8,"SessionStats","","Keeps track of open sessions",N,N],[10,"open_session","","Executed when new session is opened.",8,[[["self"],["sessionid"]]]],[10,"close_session","","Executed when session is closed.",8,[[["self"],["sessionid"]]]],[0,"reactor","jsonrpc_server_utils","Event Loop Executor Either spawns a new event loop, or re-uses provided one.",N,N],[3,"RpcEventLoop","jsonrpc_server_utils::reactor","A handle to running event loop. Dropping the handle will cause event loop to finish.",N,N],[4,"UninitializedExecutor","","Possibly uninitialized event loop executor.",N,N],[13,"Shared","","Shared instance of executor.",9,N],[13,"Unspawned","","Event Loop should be spawned by the transport.",9,N],[4,"Executor","","Initialized Executor",N,N],[13,"Shared","","Shared instance",10,N],[13,"Spawned","","Spawned Event Loop",10,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"initialize","","Initializes executor. In case there is no shared executor, will spawn a new event loop. Dropping `Executor` closes the loop.",9,[[["self"]],["result",["executor"]]]],[11,"init_with_name","","Initializes executor. In case there is no shared executor, will spawn a new event loop. Dropping `Executor` closes the loop.",9,[[["self"],["t"]],["result",["executor"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"executor","","Get tokio executor associated with this event loop.",10,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",10,[[["self"],["f"]]]],[11,"close","","Closes underlying event loop (if any!).",10,[[["self"]]]],[11,"wait","","Wait for underlying event loop to finish (if any!).",10,[[["self"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"drop","","",11,[[["self"]]]],[11,"spawn","","Spawns a new thread with the `EventLoop`.",11,[[],["result"]]],[11,"with_name","","Spawns a new named thread with the `EventLoop`.",11,[[["option",["string"]]],["result"]]],[11,"executor","","Get executor for this event loop.",11,[[["self"]],["taskexecutor"]]],[11,"wait","","Blocks current thread and waits until the event loop is finished.",11,[[["self"]],["result"]]],[11,"close","","Finishes this event loop.",11,[[["self"]]]],[11,"new","jsonrpc_server_utils","construct a new Suspendable stream, given tokio::Incoming and the amount of time to pause for.",12,[[["s"]],["self"]]],[11,"poll","","",12,[[["self"]],["result",["async"]]]],[0,"codecs","","Codecs utilities",N,N],[3,"StreamCodec","jsonrpc_server_utils::codecs","Stream codec for streaming protocols (ipc, tcp)",N,N],[4,"Separator","","Separator for enveloping messages in streaming codecs",N,N],[13,"Empty","","No envelope is expected between messages. Decoder will try to figure out message boundaries by accumulating incoming bytes until valid JSON is formed. Encoder will send messages without any boundaries between requests.",13,N],[13,"Byte","","Byte is used as an sentitel between messages",13,N],[8,"Pattern","jsonrpc_server_utils","Pattern that can be matched to string.",N,N],[10,"matches","","Returns true if given string matches the pattern.",14,[[["self"],["t"]],["bool"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"new","jsonrpc_server_utils::cors","",15,[[["s"]],["ascii"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"eq","","",15,[[["self"],["s2"]],["bool"]]],[11,"from_str","","",15,[[["str"]],["result",["ascii"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",15,[[["self"]],["s"]]],[11,"as_ref","","",15,[[["self"]],["str"]]],[11,"hash","","",15,N],[11,"partial_cmp","","",15,[[["self"],["ascii"]],["option",["ordering"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",15,[[["self"]],["ascii"]]],[11,"deref_mut","","",15,[[["self"]],["s"]]],[11,"cmp","","",15,[[["self"],["ascii"]],["ordering"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","jsonrpc_server_utils::hosts","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","jsonrpc_server_utils::reactor","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","jsonrpc_server_utils::codecs","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["separator"]]],[11,"default","","",13,[[],["self"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"default","","",16,[[],["streamcodec"]]],[11,"stream_incoming","","Default codec with streaming input data. Input can be both enveloped and not.",16,[[],["self"]]],[11,"new","","New custom stream codec",16,[[["separator"],["separator"]],["self"]]],[11,"decode","","",16,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"encode","","",16,[[["self"],["string"],["bytesmut"]],["result"]]]],"paths":[[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"AccessControlAllowHeaders"],[4,"AllowCors"],[3,"Origin"],[4,"Port"],[4,"DomainsValidation"],[3,"Host"],[8,"SessionStats"],[4,"UninitializedExecutor"],[4,"Executor"],[3,"RpcEventLoop"],[3,"SuspendableStream"],[4,"Separator"],[8,"Pattern"],[3,"Ascii"],[3,"StreamCodec"]]};
searchIndex["jsonrpc_stdio_server"]={"doc":"jsonrpc server using stdin/stdout","items":[[3,"ServerBuilder","jsonrpc_stdio_server","Stdio server builder",N,N],[11,"new","","Returns a new server instance",0,[[["t"]],["self"]]],[11,"build","","Will block until EOF is read or until an error occurs. The server reads from STDIN line-by-line, one request is taken per line and each response is written to STDOUT on a new line.",0,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"ServerBuilder"]]};
searchIndex["jsonrpc_tcp_server"]={"doc":"jsonrpc server over tcp/ip","items":[[0,"clock","jsonrpc_tcp_server::tokio","A configurable source of time.",N,N],[5,"now","jsonrpc_tcp_server::tokio::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[0,"codec","jsonrpc_tcp_server::tokio","Utilities for encoding and decoding frames.",N,N],[0,"length_delimited","jsonrpc_tcp_server::tokio::codec","Frame a stream of bytes based on a length prefix",N,N],[3,"Builder","jsonrpc_tcp_server::tokio::codec::length_delimited","Configure length delimited `LengthDelimitedCodec`s.",N,N],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",N,N],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",N,N],[3,"LinesCodec","jsonrpc_tcp_server::tokio::codec","A simple `Codec` implementation that splits up data into lines.",N,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[8,"Decoder","","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",0,N],[16,"Error","","The type of unrecoverable frame decoding errors.",0,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,[[["self"],["t"]],["framed"]]],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",1,N],[16,"Error","","The type of encoding errors.",1,N],[10,"encode","","Encodes a frame into the buffer provided.",1,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",2,N],[12,"codec","","The codec",2,N],[12,"read_buf","","The buffer with read but unprocessed data.",2,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[0,"executor","jsonrpc_tcp_server::tokio","Task execution utilities.",N,N],[3,"Spawn","jsonrpc_tcp_server::tokio::executor","Return value from the `spawn` function.",N,N],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[8,"Executor","","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",3,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",3,[[["self"]],["result",["spawnerror"]]]],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[0,"fs","jsonrpc_tcp_server::tokio","Asynchronous filesystem manipulation operations.",N,N],[5,"create_dir_all","jsonrpc_tcp_server::tokio::fs","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"create_dir","","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"hard_link","","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"read_dir","","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[0,"os","","OS-specific functionality.",N,N],[0,"unix","jsonrpc_tcp_server::tokio::fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[5,"symlink","jsonrpc_tcp_server::tokio::fs::os::unix","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[3,"SymlinkFuture","","Future returned by `symlink`.",N,N],[5,"remove_dir","jsonrpc_tcp_server::tokio::fs","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[3,"File","","A reference to an open file on the filesystem.",N,N],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"CreateFuture","jsonrpc_tcp_server::tokio::fs::file","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(File, Metadata)` instance.",N,N],[0,"io","jsonrpc_tcp_server::tokio","Asynchronous I/O.",N,N],[5,"copy","jsonrpc_tcp_server::tokio::io","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",4,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",4,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",4,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",4,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",4,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",4,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",4,[[["self"]],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",4,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",4,[[["self"],["u64"]],["take"]]],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",5,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",5,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",5,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",5,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",5,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",6,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",6,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",6,N],[13,"ConnectionReset","","The connection was reset by the remote server.",6,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",6,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",6,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",6,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",6,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",6,N],[13,"AlreadyExists","","An entity already exists, often a file.",6,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",6,N],[13,"InvalidInput","","A parameter was incorrect.",6,N],[13,"InvalidData","","Data not valid for the operation were encountered.",6,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",6,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",6,N],[13,"Interrupted","","This operation was interrupted.",6,N],[13,"Other","","Any I/O error not part of this list.",6,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",6,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",7,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",7,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",7,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",7,[[["self"],["b"]],["result",["async","error"]]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",8,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",8,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",8,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",8,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",8,[[["self"]],["self"]]],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[0,"net","jsonrpc_tcp_server::tokio","TCP/UDP/Unix bindings for `tokio`.",N,N],[0,"tcp","jsonrpc_tcp_server::tokio::net","TCP bindings for `tokio`.",N,N],[3,"TcpStream","jsonrpc_tcp_server::tokio::net::tcp","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[0,"udp","jsonrpc_tcp_server::tokio::net","UDP bindings for `tokio`.",N,N],[3,"UdpFramed","jsonrpc_tcp_server::tokio::net::udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[0,"unix","jsonrpc_tcp_server::tokio::net","Unix domain socket bindings for `tokio` (only available on unix systems).",N,N],[3,"UCred","jsonrpc_tcp_server::tokio::net::unix","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",9,N],[12,"gid","","GID (group ID) of the process",9,N],[3,"ConnectFuture","","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[0,"prelude","jsonrpc_tcp_server::tokio","A \"prelude\" for users of the `tokio` crate.",N,N],[8,"FutureExt","jsonrpc_tcp_server::tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new future which allows `self` until `timeout`.",10,[[["self"],["duration"]],["timeout"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",11,N],[16,"Error","","The type of error this stream may generate.",11,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",11,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",11,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",11,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",11,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",11,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",11,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",11,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",11,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",11,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",11,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",11,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",11,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",11,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",11,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",11,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",11,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",11,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",11,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",11,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",11,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",11,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",11,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",11,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",11,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",11,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",11,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",11,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",11,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",11,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",11,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",11,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",11,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",11,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",11,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",11,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",11,[[["self"],["f"]],["inspecterr"]]],[0,"future","","Futures",N,N],[8,"Future","jsonrpc_tcp_server::tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",12,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",12,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",12,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",12,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",12,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",12,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",12,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",12,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",12,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",12,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",12,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",12,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",12,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",12,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",12,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",12,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",12,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",12,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",12,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",12,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",12,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",13,N],[16,"Item","","The item that the future may resolve with.",13,N],[16,"Error","","The error that the future may resolve with.",13,N],[10,"into_future","","Consumes this object and produces a future.",13,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",14,N],[16,"Error","","Possible errors during conversion.",14,N],[10,"future_from","","Consume the given value, beginning the conversion.",14,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",15,[[["self"],["f"]],["result",["executeerror"]]]],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",16,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",16,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Err","","A future representing a value that is immediately ready.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",17,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",17,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[3,"Empty","","A future which is never resolved.",N,N],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",18,N],[13,"B","","Second branch of the type",18,N],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[8,"Sink","jsonrpc_tcp_server::tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",19,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",19,N],[10,"start_send","","Begin the process of sending a value to the sink.",19,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",19,[[["self"]],["result",["async"]]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",19,[[["self"]],["result",["async"]]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",19,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",19,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",19,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",19,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",19,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",19,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",19,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",19,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",19,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",19,[[["self"],["s"]],["sendall"]]],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",20,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",20,N],[0,"task","","Tasks used to drive a future computation",N,N],[5,"spawn","jsonrpc_tcp_server::tokio::prelude::task","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",21,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",22,N],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[5,"init","","Initialize the `futures` task system.",N,N],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",23,N],[8,"StreamExt","jsonrpc_tcp_server::tokio::prelude","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",24,[[["self"],["duration"]],["timeout"]]],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",25,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",25,N],[0,"stream","","Asynchronous streams",N,N],[0,"futures_unordered","jsonrpc_tcp_server::tokio::prelude::stream","An unbounded set of futures.",N,N],[3,"FuturesUnordered","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[5,"futures_unordered","jsonrpc_tcp_server::tokio::prelude::stream","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Sender","","The transmission end of a channel which is used to send values.",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",26,N],[12,"1","","",26,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",27,N],[13,"Second","","An item from the second stream",27,N],[13,"Both","","Items from both streams",27,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"FutureSender","","Future returned by `Sender::send`.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[6,"Poll","jsonrpc_tcp_server::tokio::prelude","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"reactor","jsonrpc_tcp_server::tokio","Event loop that drives Tokio I/O resources.",N,N],[3,"Turn","jsonrpc_tcp_server::tokio::reactor","Return value from the `turn` method on `Reactor`.",N,N],[3,"Background","","Handle to the reactor running on a background thread.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[0,"runtime","jsonrpc_tcp_server::tokio","A batteries included runtime for applications using Tokio.",N,N],[0,"current_thread","jsonrpc_tcp_server::tokio::runtime","A runtime implementation that runs everything on the current thread.",N,N],[5,"block_on_all","jsonrpc_tcp_server::tokio::runtime::current_thread","Run the provided future to completion using a runtime running on the current thread.",N,[[["f"]],["result"]]],[3,"Builder","","Builds a Single-threaded runtime with custom configuration values.",N,N],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",N,N],[3,"Runtime","jsonrpc_tcp_server::tokio::runtime","Handle to the Tokio runtime.",N,N],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,N],[3,"TaskExecutor","","Executes futures on the runtime",N,N],[3,"Builder","","Builds Tokio Runtime with custom configuration values.",N,N],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",N,N],[0,"timer","jsonrpc_tcp_server::tokio","Utilities for tracking time.",N,N],[3,"DelayQueue","jsonrpc_tcp_server::tokio::timer","A queue of delayed elements.",N,N],[0,"delay_queue","","A queue of delayed elements.",N,N],[3,"Expired","jsonrpc_tcp_server::tokio::timer::delay_queue","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[3,"Timeout","jsonrpc_tcp_server::tokio::timer","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[0,"timeout","","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Error","jsonrpc_tcp_server::tokio::timer::timeout","Error returned by `Timeout`.",N,N],[3,"Delay","jsonrpc_tcp_server::tokio::timer","A future that completes at a specified instant in time.",N,N],[0,"util","jsonrpc_tcp_server::tokio","Utilities for working with Tokio.",N,N],[4,"Separator","jsonrpc_tcp_server","Separator for enveloping messages in streaming codecs",N,N],[13,"Empty","","No envelope is expected between messages. Decoder will try to figure out message boundaries by accumulating incoming bytes until valid JSON is formed. Encoder will send messages without any boundaries between requests.",28,N],[13,"Byte","","Byte is used as an sentitel between messages",28,N],[3,"Dispatcher","","Peer-messages dispatcher.",N,N],[3,"RequestContext","","Request context",N,N],[12,"peer_addr","","Peer Address",29,N],[12,"sender","","Peer Sender channel",29,N],[3,"ServerBuilder","","TCP server builder",N,N],[3,"Server","","TCP Server handle",N,N],[4,"PushMessageError","","Push Message Error",N,N],[13,"NoSuchPeer","","Invalid peer",30,N],[13,"Send","","Send error",30,N],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"from","","",30,[[["senderror",["string"]]],["self"]]],[11,"clone","","",31,[[["self"]],["dispatcher"]]],[11,"new","","Creates a new dispatcher",31,[[["arc",["mutex"]]],["self"]]],[11,"push_message","","Pushes message to given peer",31,[[["self"],["socketaddr"],["string"]],["result",["pushmessageerror"]]]],[11,"is_connected","","Returns `true` if the peer is still connnected",31,[[["self"],["socketaddr"]],["bool"]]],[11,"peer_count","","Returns current peer count.",31,[[["self"]],["usize"]]],[11,"new","","Creates new `ServerBuilder` wih given `IoHandler`",32,[[["t"]],["self"]]],[11,"with_meta_extractor","","Creates new `ServerBuilder` wih given `IoHandler`",32,[[["t"],["e"]],["self"]]],[11,"event_loop_executor","","Utilize existing event loop executor.",32,[[["self"],["taskexecutor"]],["self"]]],[11,"session_meta_extractor","","Sets session meta extractor",32,[[["self"],["t"]],["self"]]],[11,"request_separators","","Sets the incoming and outgoing requests separator",32,[[["self"],["separator"],["separator"]],["self"]]],[11,"start","","Starts a new server",32,[[["self"],["socketaddr"]],["result",["server"]]]],[11,"dispatcher","","Returns dispatcher",32,[[["self"]],["dispatcher"]]],[11,"close","","Closes the server (waits for finish)",33,[[["self"]]]],[11,"wait","","Wait for the server to finish",33,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[8,"MetaExtractor","","Metadata extractor (per session)",N,N],[10,"extract","","Extracts metadata from request context",34,[[["self"],["requestcontext"]],["m"]]],[11,"new","jsonrpc_tcp_server::tokio::codec::length_delimited","Creates a new length delimited codec builder with default configuration values.",35,[[],["builder"]]],[11,"big_endian","","Read the length field as a big endian integer",35,[[["self"]],["builder"]]],[11,"little_endian","","Read the length field as a little endian integer",35,[[["self"]],["builder"]]],[11,"native_endian","","Read the length field as a native endian integer",35,[[["self"]],["builder"]]],[11,"max_frame_length","","Sets the max frame length",35,[[["self"],["usize"]],["builder"]]],[11,"length_field_length","","Sets the number of bytes used to represent the length field",35,[[["self"],["usize"]],["builder"]]],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",35,[[["self"],["usize"]],["builder"]]],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",35,[[["self"],["isize"]],["builder"]]],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",35,[[["self"],["usize"]],["builder"]]],[11,"new_codec","","Create a configured length delimited `LengthDelimitedCodec`",35,[[["self"]],["lengthdelimitedcodec"]]],[11,"new_read","","Create a configured length delimited `FramedRead`",35,[[["self"],["t"]],["framedread",["lengthdelimitedcodec"]]]],[11,"new_write","","Create a configured length delimited `FramedWrite`",35,[[["self"],["t"]],["framedwrite",["lengthdelimitedcodec"]]]],[11,"new_framed","","Create a configured length delimited `Framed`",35,[[["self"],["t"]],["framed",["lengthdelimitedcodec"]]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"partial_cmp","jsonrpc_tcp_server::tokio::io","",6,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",36,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",36,[[["nulerror"]],["error"]]],[11,"from","","",36,[[["intoinnererror"]],["error"]]],[11,"description","","",36,[[["self"]],["str"]]],[11,"cause","","",36,[[["self"]],["option",["error"]]]],[11,"clone","","",6,[[["self"]],["errorkind"]]],[11,"hash","","",6,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",6,[[["self"],["errorkind"]],["bool"]]],[11,"cmp","","",6,[[["self"],["errorkind"]],["ordering"]]],[11,"fmt","jsonrpc_tcp_server","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",28,[[["self"]],["separator"]]],[11,"default","","",28,[[],["separator"]]],[11,"from_iter","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","",37,[[["t"]],["futuresunordered"]]],[11,"from_iter","jsonrpc_tcp_server::tokio::prelude::stream","",38,[[["t"]],["futuresordered"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",41,[[["result"]],["futureresult"]]],[11,"from","jsonrpc_tcp_server::tokio::prelude","",25,[[["t"]],["async"]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",42,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::future","",43,[[["self"]],["result",["async"]]]],[11,"poll","","",44,[[["self"]],["result",["async"]]]],[11,"poll","","",18,[[["self"]],["result",["async"]]]],[11,"poll","","",45,[[["self"]],["result",["async"]]]],[11,"poll","","",46,[[["self"]],["result",["async"]]]],[11,"poll","","",47,[[["self"]],["result",["async"]]]],[11,"poll","","",48,[[["self"]],["result",["async"]]]],[11,"poll","","",49,[[["self"]],["result",["async"]]]],[11,"poll","","",50,[[["self"]],["result",["async"]]]],[11,"poll","","",51,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",52,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::future","",53,[[["self"]],["result",["async"]]]],[11,"poll","","",54,[[["self"]],["result",["async"]]]],[11,"poll","","",55,[[["self"]],["result",["async"]]]],[11,"poll","","",56,[[["self"]],["result",["async"]]]],[11,"poll","","",57,[[["self"]],["result",["async"]]]],[11,"poll","","",58,[[["self"]],["result",["async"]]]],[11,"poll","","",59,[[["self"]],["result",["async"]]]],[11,"poll","","",60,[[["self"]],["result",["async"]]]],[11,"poll","","",61,[[["self"]],["result",["async"]]]],[11,"poll","","",62,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",63,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::future","",64,[[["self"]],["result",["async"]]]],[11,"poll","","",65,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",66,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::future","",67,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",68,[[["self"]],["result",["async"]]]],[11,"poll","","",69,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::future","",70,[[["self"]],["result",["async"]]]],[11,"poll","","",71,[[["self"]],["result",["async"]]]],[11,"poll","","",72,[[["self"]],["result",["async"]]]],[11,"poll","","",41,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",73,[[["self"]],["result",["async"]]]],[11,"poll","","",74,[[["self"]],["result",["async"]]]],[11,"start_send","","",75,N],[11,"poll_complete","","",75,[[["self"]],["result",["async"]]]],[11,"close","","",75,[[["self"]],["result",["async"]]]],[11,"start_send","","",76,N],[11,"poll_complete","","",76,[[["self"]],["result",["async"]]]],[11,"close","","",76,[[["self"]],["result",["async"]]]],[11,"start_send","","",77,N],[11,"poll_complete","","",77,[[["self"]],["result",["async"]]]],[11,"close","","",77,[[["self"]],["result",["async"]]]],[11,"start_send","","",78,N],[11,"poll_complete","","",78,[[["self"]],["result",["async"]]]],[11,"close","","",78,[[["self"]],["result",["async"]]]],[11,"start_send","","",79,N],[11,"poll_complete","","",79,[[["self"]],["result",["async"]]]],[11,"close","","",79,[[["self"]],["result",["async"]]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["result",["async"]]]],[11,"close","","",80,[[["self"]],["result",["async"]]]],[11,"start_send","","",81,N],[11,"poll_complete","","",81,[[["self"]],["result",["async"]]]],[11,"close","","",81,[[["self"]],["result",["async"]]]],[11,"start_send","","",82,N],[11,"poll_complete","","",82,[[["self"]],["result",["async"]]]],[11,"close","","",82,[[["self"]],["result",["async"]]]],[11,"start_send","","",83,N],[11,"poll_complete","","",83,[[["self"]],["result",["async"]]]],[11,"close","","",83,[[["self"]],["result",["async"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["result",["async"]]]],[11,"close","","",84,[[["self"]],["result",["async"]]]],[11,"start_send","","",85,N],[11,"poll_complete","","",85,[[["self"]],["result",["async"]]]],[11,"close","","",85,[[["self"]],["result",["async"]]]],[11,"start_send","","",86,N],[11,"poll_complete","","",86,[[["self"]],["result",["async"]]]],[11,"close","","",86,[[["self"]],["result",["async"]]]],[11,"start_send","","",87,N],[11,"poll_complete","","",87,[[["self"]],["result",["async"]]]],[11,"close","","",87,[[["self"]],["result",["async"]]]],[11,"start_send","","",88,N],[11,"poll_complete","","",88,[[["self"]],["result",["async"]]]],[11,"close","","",88,[[["self"]],["result",["async"]]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["result",["async"]]]],[11,"close","","",89,[[["self"]],["result",["async"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["result",["async"]]]],[11,"close","","",90,[[["self"]],["result",["async"]]]],[11,"start_send","","",91,N],[11,"poll_complete","","",91,[[["self"]],["result",["async"]]]],[11,"close","","",91,[[["self"]],["result",["async"]]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["result",["async"]]]],[11,"close","","",92,[[["self"]],["result",["async"]]]],[11,"start_send","","",93,N],[11,"poll_complete","","",93,[[["self"]],["result",["async"]]]],[11,"close","","",93,[[["self"]],["result",["async"]]]],[11,"start_send","","",94,N],[11,"poll_complete","","",94,[[["self"]],["result",["async"]]]],[11,"close","","",94,[[["self"]],["result",["async"]]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["result",["async"]]]],[11,"close","","",95,[[["self"]],["result",["async"]]]],[11,"drop","jsonrpc_tcp_server::tokio::prelude::future","",67,N],[11,"drop","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","",37,N],[11,"description","jsonrpc_tcp_server::tokio::prelude::stream","",39,[[["self"]],["str"]]],[11,"description","jsonrpc_tcp_server::tokio::prelude::future","",40,[[["self"]],["str"]]],[11,"cause","","",40,[[["self"]],["option",["error"]]]],[11,"description","jsonrpc_tcp_server::tokio::prelude::stream","",26,[[["self"]],["str"]]],[11,"poll","","",93,[[["self"]],["result",["async"]]]],[11,"poll","","",87,[[["self"]],["result",["async"]]]],[11,"poll","","",88,[[["self"]],["result",["async"]]]],[11,"poll","","",94,[[["self"]],["result",["async"]]]],[11,"poll","","",83,[[["self"]],["result",["async"]]]],[11,"poll","","",38,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::future","",96,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",97,[[["self"]],["result",["async"]]]],[11,"poll","","",98,[[["self"]],["result",["async"]]]],[11,"poll","","",75,[[["self"]],["result",["async"]]]],[11,"poll","","",86,[[["self"]],["result",["async"]]]],[11,"poll","","",99,[[["self"]],["result",["async"]]]],[11,"poll","","",100,[[["self"]],["result",["async"]]]],[11,"poll","","",101,[[["self"]],["result",["async"]]]],[11,"poll","","",78,[[["self"]],["result",["async"]]]],[11,"poll","","",102,[[["self"]],["result",["async"]]]],[11,"poll","","",103,[[["self"]],["result",["async"]]]],[11,"poll","","",104,[[["self"]],["result",["async"]]]],[11,"poll","","",91,[[["self"]],["result",["async"]]]],[11,"poll","","",82,[[["self"]],["result",["async"]]]],[11,"poll","","",105,[[["self"]],["result",["async"]]]],[11,"poll","","",84,[[["self"]],["result",["async"]]]],[11,"poll","","",90,[[["self"]],["result",["async"]]]],[11,"poll","","",106,[[["self"]],["result",["async"]]]],[11,"poll","","",77,[[["self"]],["result",["async"]]]],[11,"poll","","",89,[[["self"]],["result",["async"]]]],[11,"poll","","",80,[[["self"]],["result",["async"]]]],[11,"poll","","",107,[[["self"]],["result",["async"]]]],[11,"poll","","",92,[[["self"]],["result",["async"]]]],[11,"poll","","",76,[[["self"]],["result",["async"]]]],[11,"poll","","",108,[[["self"]],["result",["async"]]]],[11,"poll","","",95,[[["self"]],["result",["async"]]]],[11,"poll","","",85,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::future","",109,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","",37,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::prelude::stream","",81,[[["self"]],["result",["async"]]]],[11,"poll","","",110,[[["self"]],["result",["async"]]]],[11,"poll","","",111,[[["self"]],["result",["async"]]]],[11,"poll","","",112,[[["self"]],["result",["async"]]]],[11,"next","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","",113,[[["self"]],["option"]]],[11,"size_hint","","",113,N],[11,"next","jsonrpc_tcp_server::tokio::prelude::stream","",114,[[["self"]],["option"]]],[11,"clone","jsonrpc_tcp_server::tokio::prelude::future","",16,[[["self"]],["executeerrorkind"]]],[11,"clone","jsonrpc_tcp_server::tokio::prelude::task","",115,[[["self"]],["task"]]],[11,"clone","jsonrpc_tcp_server::tokio::prelude::future","",116,[[["self"]],["shareditem"]]],[11,"clone","jsonrpc_tcp_server::tokio::prelude","",20,[[["self"]],["asyncsink"]]],[11,"clone","","",25,[[["self"]],["async"]]],[11,"clone","jsonrpc_tcp_server::tokio::prelude::task","",117,[[["self"]],["unparkevent"]]],[11,"clone","","",118,[[["self"]],["taskrc"]]],[11,"clone","jsonrpc_tcp_server::tokio::prelude::future","",67,[[["self"]],["shared"]]],[11,"clone","","",41,[[["self"]],["futureresult"]]],[11,"clone","","",40,[[["self"]],["sharederror"]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::task","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude","",20,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::task","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::task","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::task","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::task","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::task","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::task","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::stream","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::prelude::future","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",116,[[["self"]],["t"]]],[11,"deref","","",40,[[["self"]],["e"]]],[11,"eq","","",16,[[["self"],["executeerrorkind"]],["bool"]]],[11,"eq","jsonrpc_tcp_server::tokio::prelude","",20,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",20,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","","",25,[[["self"],["async"]],["bool"]]],[11,"ne","","",25,[[["self"],["async"]],["bool"]]],[11,"default","jsonrpc_tcp_server::tokio::prelude::task","",123,[[],["atomictask"]]],[11,"from","jsonrpc_tcp_server::tokio::io","Convert a `serde_json::Error` into an `io::Error`.",36,[[["error"]],["error"]]],[11,"encode","jsonrpc_tcp_server::tokio::codec::length_delimited","",125,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"spawn","jsonrpc_tcp_server::tokio::runtime","",126,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::runtime::current_thread","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::runtime","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::runtime::current_thread","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::executor","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::runtime","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::codec::length_delimited","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::runtime","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::codec::length_delimited","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::runtime::current_thread","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","jsonrpc_tcp_server::tokio::codec::length_delimited","",133,[[["self"]],["str"]]],[11,"drop","jsonrpc_tcp_server::tokio::runtime","",131,N],[11,"into_future","jsonrpc_tcp_server::tokio::executor","",130,N],[11,"execute","jsonrpc_tcp_server::tokio::runtime","",126,[[["self"],["t"]],["result",["executeerror"]]]],[11,"execute","jsonrpc_tcp_server::tokio::runtime::current_thread","",129,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::codec::length_delimited","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","jsonrpc_tcp_server::tokio::runtime::current_thread","",129,[[["self"]],["handle"]]],[11,"clone","jsonrpc_tcp_server::tokio::runtime","",126,[[["self"]],["taskexecutor"]]],[11,"clone","jsonrpc_tcp_server::tokio::codec::length_delimited","",35,[[["self"]],["builder"]]],[11,"poll","jsonrpc_tcp_server::tokio::runtime","",132,[[["self"]],["result",["async"]]]],[11,"decode","jsonrpc_tcp_server::tokio::codec::length_delimited","",125,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"spawn","jsonrpc_tcp_server::tokio::executor","",135,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",135,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",136,[[["self"]],["str"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",135,[[["self"]],["defaultexecutor"]]],[11,"execute","","",135,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::io","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::codec","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::io","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::codec","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::io","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"shutdown","","",143,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",143,[[["self"],["b"]],["result",["async","error"]]]],[11,"read_buf","","",147,[[["self"],["b"]],["result",["async","error"]]]],[11,"read","","",147,N],[11,"poll","","",149,[[["self"]],["result",["async","error"]]]],[11,"poll","jsonrpc_tcp_server::tokio::codec","",139,[[["self"]],["result",["async"]]]],[11,"poll","","",138,[[["self"]],["result",["async"]]]],[11,"poll","","",145,[[["self"]],["result",["async"]]]],[11,"write","jsonrpc_tcp_server::tokio::io","",143,N],[11,"flush","","",143,[[["self"]],["result",["error"]]]],[11,"poll","","",141,[[["self"]],["result",["async","error"]]]],[11,"poll","","",140,[[["self"]],["result",["async","error"]]]],[11,"poll","","",148,[[["self"]],["result",["async","error"]]]],[11,"poll","","",144,[[["self"]],["result",["async","error"]]]],[11,"poll","","",137,[[["self"]],["result",["async","error"]]]],[11,"poll","","",146,[[["self"]],["result",["async","error"]]]],[11,"poll","","",142,[[["self"]],["result",["async","error"]]]],[11,"start_send","jsonrpc_tcp_server::tokio::codec","",139,N],[11,"poll_complete","","",139,[[["self"]],["result",["async"]]]],[11,"close","","",139,[[["self"]],["result",["async"]]]],[11,"start_send","","",145,N],[11,"poll_complete","","",145,[[["self"]],["result",["async"]]]],[11,"close","","",145,[[["self"]],["result",["async"]]]],[11,"start_send","","",138,N],[11,"poll_complete","","",138,[[["self"]],["result",["async"]]]],[11,"close","","",138,[[["self"]],["result",["async"]]]],[11,"eq","","",150,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",150,[[["self"],["linescodec"]],["bool"]]],[11,"eq","","",151,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",151,[[["self"],["bytescodec"]],["bool"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",150,N],[11,"hash","","",151,N],[11,"decode","","",150,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",150,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode","","",151,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"partial_cmp","","",150,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",150,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",150,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",150,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",150,[[["self"],["linescodec"]],["bool"]]],[11,"partial_cmp","","",151,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",151,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",151,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",151,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",151,[[["self"],["bytescodec"]],["bool"]]],[11,"encode","","",150,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"encode","","",151,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"clone","","",150,[[["self"]],["linescodec"]]],[11,"clone","","",151,[[["self"]],["bytescodec"]]],[11,"cmp","","",150,[[["self"],["linescodec"]],["ordering"]]],[11,"cmp","","",151,[[["self"],["bytescodec"]],["ordering"]]],[11,"fmt","jsonrpc_tcp_server::tokio::fs::file","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::fs","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::fs::file","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::fs","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::io","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::fs::os::unix","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::io","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::fs::file","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","jsonrpc_tcp_server::tokio::fs","",156,N],[11,"poll","jsonrpc_tcp_server::tokio::fs::file","",154,[[["self"]],["result",["async"]]]],[11,"poll","","",155,[[["self"]],["result",["async"]]]],[11,"poll","","",152,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::fs::os::unix","",159,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_tcp_server::tokio::fs::file","",161,[[["self"]],["result",["async"]]]],[11,"from","jsonrpc_tcp_server::tokio::fs","",153,[[["openoptions"]],["openoptions"]]],[11,"read","jsonrpc_tcp_server::tokio::io","",158,N],[11,"read","jsonrpc_tcp_server::tokio::fs","",156,N],[11,"clone","","",153,[[["self"]],["openoptions"]]],[11,"write","","",156,N],[11,"flush","","",156,[[["self"]],["result",["error"]]]],[11,"write","jsonrpc_tcp_server::tokio::io","",157,N],[11,"flush","","",157,[[["self"]],["result",["error"]]]],[11,"write","","",160,N],[11,"flush","","",160,[[["self"]],["result",["error"]]]],[11,"shutdown","jsonrpc_tcp_server::tokio::fs","",156,[[["self"]],["result",["async","error"]]]],[11,"shutdown","jsonrpc_tcp_server::tokio::io","",160,[[["self"]],["result",["async","error"]]]],[11,"shutdown","","",157,[[["self"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",158,N],[11,"prepare_uninitialized_buffer","jsonrpc_tcp_server::tokio::fs","",156,N],[11,"from","jsonrpc_tcp_server::tokio::io","",36,[[["error"]],["error"]]],[11,"unpark","jsonrpc_tcp_server::tokio::reactor","",162,N],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",163,N],[11,"drop","","",166,N],[11,"read","","",163,N],[11,"clone","","",162,[[["self"]],["handle"]]],[11,"shutdown","","",163,[[["self"]],["result",["async","error"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",162,[[],["handle"]]],[11,"write","","",163,N],[11,"flush","","",163,[[["self"]],["result",["error"]]]],[11,"unpark","","",164,N],[11,"park","","",164,[[["self"]],["result",["error"]]]],[11,"park_timeout","","",164,[[["self"],["duration"]],["result",["error"]]]],[11,"poll","jsonrpc_tcp_server::tokio::timer","",168,[[["self"]],["result",["async"]]]],[11,"poll","","",169,[[["self"]],["result",["async"]]]],[11,"poll","","",170,[[["self"]],["result",["async","error"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer::delay_queue","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer::timeout","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer::delay_queue","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",174,[[["self"]],["str"]]],[11,"description","jsonrpc_tcp_server::tokio::timer::timeout","",173,[[["self"]],["str"]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::timer::timeout","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","jsonrpc_tcp_server::tokio::timer","",171,[[["self"]],["result",["async"]]]],[11,"poll","","",169,[[["self"]],["result",["async"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::net::tcp","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",177,[[["self"]],["result",["async","error"]]]],[11,"read","","",179,N],[11,"as_raw_fd","","",179,[[["self"]],["i32"]]],[11,"as_raw_fd","","",176,[[["self"]],["i32"]]],[11,"poll","","",178,[[["self"]],["result",["async","error"]]]],[11,"write","","",179,N],[11,"flush","","",179,[[["self"]],["result",["error"]]]],[11,"shutdown","","",179,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",179,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",179,N],[11,"read_buf","","",179,[[["self"],["b"]],["result",["async","error"]]]],[11,"fmt","jsonrpc_tcp_server::tokio::net::udp","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",182,[[["self"]],["result",["async"]]]],[11,"as_raw_fd","","",181,[[["self"]],["i32"]]],[11,"poll","","",183,[[["self"]],["result",["async","error"]]]],[11,"poll","","",180,[[["self"]],["result",["async","error"]]]],[11,"start_send","","",182,N],[11,"poll_complete","","",182,[[["self"]],["result",["async"]]]],[11,"close","","",182,[[["self"]],["result",["async"]]]],[11,"eq","jsonrpc_tcp_server::tokio::net::unix","",9,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",9,[[["self"],["ucred"]],["bool"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",9,N],[11,"shutdown","","",188,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",188,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",188,N],[11,"read_buf","","",188,[[["self"],["b"]],["result",["async","error"]]]],[11,"poll","","",186,[[["self"]],["result",["async","error"]]]],[11,"read","","",188,N],[11,"clone","","",9,[[["self"]],["ucred"]]],[11,"as_raw_fd","","",188,[[["self"]],["i32"]]],[11,"as_raw_fd","","",187,[[["self"]],["i32"]]],[11,"as_raw_fd","","",184,[[["self"]],["i32"]]],[11,"poll","","",190,[[["self"]],["result",["async","error"]]]],[11,"poll","","",185,[[["self"]],["result",["async"]]]],[11,"poll","","",189,[[["self"]],["result",["async"]]]],[11,"write","","",188,N],[11,"flush","","",188,[[["self"]],["result",["error"]]]],[11,"from","jsonrpc_tcp_server::tokio::codec::length_delimited","",133,[[["t"]],["t"]]],[11,"to_string","","",133,[[["self"]],["string"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"new","","Creates a new `LengthDelimitedCodec` with the default configuration values.",125,[[],["lengthdelimitedcodec"]]],[11,"max_frame_length","","Returns the current max frame setting",125,[[["self"]],["usize"]]],[11,"set_max_frame_length","","Updates the max frame setting.",125,N],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::codec","Returns a `LinesCodec` for splitting up data into lines.",150,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",150,[[["usize"]],["linescodec"]]],[11,"max_length","","Returns the maximum line length when decoding.",150,[[["self"]],["usize"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",145,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",145,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",145,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",145,[[["self"]],["t"]]],[11,"codec","","Returns a reference to the underlying codec wrapped by `Frame`.",145,[[["self"]],["u"]]],[11,"codec_mut","","Returns a mutable reference to the underlying codec wrapped by `Frame`.",145,[[["self"]],["u"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",145,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",145,[[["self"]],["framedparts"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",151,[[],["bytescodec"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",138,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",138,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",138,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",138,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",138,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",138,[[["self"]],["d"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"new","","Create a new, default, `FramedParts`",2,[[["t"],["u"]],["framedparts"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",139,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",139,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",139,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",139,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",139,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",139,[[["self"]],["e"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"from","jsonrpc_tcp_server::tokio::executor","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"into_future","","",130,[[["self"]],["f"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",136,[[],["spawnerror"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",136,[[],["spawnerror"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",136,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",136,[[["self"]],["bool"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"to_string","","",136,[[["self"]],["string"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the default executor for the current context.",135,[[],["defaultexecutor"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::fs","Creates a blank new set of options ready for configuration.",153,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",153,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",153,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",153,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",153,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",153,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",153,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",153,[[["self"],["p"]],["openfuture"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"from","jsonrpc_tcp_server::tokio::fs::os::unix","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"into_future","","",159,[[["self"]],["f"]]],[11,"open","jsonrpc_tcp_server::tokio::fs","Attempts to open a file in read-only mode.",156,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",156,[[["p"]],["createfuture"]]],[11,"from_std","","Convert a [`std::fs::File`][std] to a `tokio_fs::File`.",156,[[["file"]],["file"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",156,[[["self"],["seekfrom"]],["result",["async","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",156,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",156,[[["self"]],["result",["async","error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",156,[[["self"]],["result",["async","error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",156,[[["self"],["u64"]],["result",["async","error"]]]],[11,"metadata","","Queries metadata about the underlying file.",156,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",156,[[["self"]],["result",["async","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",156,[[["self"]],["result",["async","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",156,[[["self"],["permissions"]],["result",["async","error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",156,[[["self"]],["file"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"from","jsonrpc_tcp_server::tokio::fs::file","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"into_future","","",154,[[["self"]],["f"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"into_future","","",152,[[["self"]],["f"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"into_future","","",161,[[["self"]],["f"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"into_future","","",155,[[["self"]],["f"]]],[11,"from","jsonrpc_tcp_server::tokio::io","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"into_future","","",140,[[["self"]],["f"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"into_future","","",141,[[["self"]],["f"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into_future","","",148,[[["self"]],["f"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"into_future","","",137,[[["self"]],["f"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"into_future","","",146,[[["self"]],["f"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"into_future","","",144,[[["self"]],["f"]]],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",36,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",36,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",36,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",36,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",36,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",36,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",36,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",36,[[["self"]],["errorkind"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"into_future","","",142,[[["self"]],["f"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"into_inner","","Returns the underlying I/O object.",149,[[["self"]],["a"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"connect","jsonrpc_tcp_server::tokio::net::tcp","Create a new TCP stream connected to the specified address.",179,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",179,[[["tcpstream"],["handle"]],["result",["tcpstream","error"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",179,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",179,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",179,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",179,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",179,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",179,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",179,[[["self"],["shutdown"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",179,[[["self"]],["result",["bool","error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",179,[[["self"],["bool"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",179,[[["self"]],["result",["usize","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",179,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",179,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",179,[[["self"],["usize"]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",179,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",179,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",179,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",179,[[["self"],["u32"]],["result",["error"]]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",179,[[["self"]],["result",["option","error"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",179,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",179,[[["self"]],["result",["tcpstream","error"]]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"into_future","","",178,[[["self"]],["f"]]],[11,"bind","","Create a new TCP listener associated with this event loop.",176,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",176,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",176,[[["self"]],["result",["async","error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",176,[[["tcplistener"],["handle"]],["result",["tcplistener","error"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",176,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",176,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",176,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",176,[[["self"],["u32"]],["result",["error"]]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::net::udp","Create a new `UdpFramed` backed by the given socket and codec.",182,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",182,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",182,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",182,[[["self"]],["udpsocket"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"into_future","","",180,[[["self"]],["f"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",181,[[["socketaddr"]],["result",["udpsocket","error"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",181,[[["udpsocket"],["handle"]],["result",["udpsocket","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",181,[[["self"]],["result",["socketaddr","error"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",181,[[["self"],["socketaddr"]],["result",["error"]]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",181,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",181,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",181,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",181,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",181,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",181,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",181,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",181,[[["self"]],["result",["async","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",181,[[["self"]],["result",["bool","error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",181,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",181,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",181,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",181,[[["self"]],["result",["u32","error"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",181,[[["self"],["u32"]],["result",["error"]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",181,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",181,[[["self"],["bool"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",181,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",181,[[["self"],["u32"]],["result",["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",181,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",181,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",181,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",181,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"into_future","","",183,[[["self"]],["f"]]],[11,"to_owned","jsonrpc_tcp_server::tokio::net::unix","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"into_future","","",190,[[["self"]],["f"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"into_future","","",189,[[["self"]],["f"]]],[11,"connect","","Connects to the socket named by `path`.",188,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",188,[[["unixstream"],["handle"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",188,[[],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",188,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",188,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",188,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",188,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",188,[[["self"]],["result",["ucred","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",188,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",188,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",187,[[["p"]],["result",["unixdatagram","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",187,[[],["result",["error"]]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",187,[[["unixdatagram"],["handle"]],["result",["unixdatagram","error"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",187,[[],["result",["unixdatagram","error"]]]],[11,"connect","","Connects the socket to the specified address.",187,[[["self"],["p"]],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",187,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",187,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",187,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",187,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_recv_from","","Receives data from the socket.",187,N],[11,"poll_recv","","Receives data from the socket.",187,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",187,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",187,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",187,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",187,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",187,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",187,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",184,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",184,[[["unixlistener"],["handle"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",184,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",184,[[["self"],["ready"]],["result",["async","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",184,[[["self"]],["result",["option","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",184,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",184,[[["self"]],["result",["async","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",184,[[["self"]],["incoming"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"into_future","","",185,[[["self"]],["f"]]],[11,"new","jsonrpc_tcp_server::tokio::prelude::future","Create a new `ExecuteError`",120,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",120,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",120,[[["self"]],["f"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into_future","","",49,[[["self"]],["f"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into_future","","",62,[[["self"]],["f"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"into_future","","",41,[[["self"]],["f"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into_future","","",47,[[["self"]],["f"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"into_future","","",46,[[["self"]],["f"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",58,[[["self"]],["bool"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"into_future","","",58,[[["self"]],["f"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into_future","","",60,[[["self"]],["f"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into_future","","",56,[[["self"]],["f"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into_future","","",65,[[["self"]],["f"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into_future","","",54,[[["self"]],["f"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into_future","","",57,[[["self"]],["f"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",67,[[["self"]],["option",["result"]]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into_future","","",61,[[["self"]],["f"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"into_future","","",43,[[["self"]],["f"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into_future","","",70,[[["self"]],["f"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"into_future","","",45,[[["self"]],["f"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into_future","","",59,[[["self"]],["f"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_future","","",18,[[["self"]],["f"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_future","","",72,[[["self"]],["f"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"into_future","","",44,[[["self"]],["f"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into_future","","",55,[[["self"]],["f"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into_future","","",48,[[["self"]],["f"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into_future","","",53,[[["self"]],["f"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"into_future","","",50,[[["self"]],["f"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into_future","","",71,[[["self"]],["f"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into_future","","",51,[[["self"]],["f"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"map","jsonrpc_tcp_server::tokio::prelude","Change the NotReady value of this `AsyncSink` with the closure provided",20,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",20,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",20,[[["self"]],["bool"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::prelude::task","Create an `AtomicTask` initialized with the given `Task`",123,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",123,N],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",123,N],[11,"notify","","Notifies the task that last called `register`.",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",117,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",115,N],[11,"is_current","","Returns `true` when called from within the context of the task.",115,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",115,[[["self"]],["bool"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",118,[[["a"]],["taskrc"]]],[11,"with","","Operate with a reference to the underlying data.",118,[[["self"],["f"]],["r"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",121,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",121,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",121,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",121,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",121,[[["self"]],["result"]]],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",121,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",121,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",121,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",121,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",121,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",121,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",121,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",121,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",121,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",124,[[["self"],["f"]],["r"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"map","jsonrpc_tcp_server::tokio::prelude","Change the success value of this `Async` with the closure provided",25,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",25,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",25,[[["self"]],["bool"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",37,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",37,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",37,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",37,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",37,[[["self"]],["itermut"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into_iter","","",113,[[["self"]],["i"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_tcp_server::tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",89,[[["self"]],["s"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,[[["self"]],["s"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",38,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",38,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",38,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",38,N],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",95,[[["self"]],["s"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",92,[[["self"]],["s"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,[[["self"]],["s"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_future","","",68,[[["self"]],["f"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",107,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"into_future","","",42,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",75,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",75,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",75,[[["self"]],["s"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",81,[[["self"]],["result",["async"]]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",73,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",73,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",73,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",73,[[["self"]],["option"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_future","","",73,[[["self"]],["f"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",66,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",66,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",66,[[["self"]],["option"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,[[["self"]],["s"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",91,[[["self"]],["s"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"send","","Sends a new value along this channel to the receiver.",119,[[["self"],["result"]],["futuresender"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",79,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",76,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",76,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",76,[[["self"]],["s"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",93,[[["self"]],["s"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",85,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",85,[[["self"]],["s"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",114,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",114,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",114,[[["self"]],["s"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into_iter","","",114,[[["self"]],["i"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",90,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,[[["self"]],["s"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",87,[[["self"]],["s"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into_future","","",69,[[["self"]],["f"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into_future","","",52,[[["self"]],["f"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",94,[[["self"]],["s"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",84,[[["self"]],["s"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",88,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",88,[[["self"]],["s"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",83,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",83,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",83,[[["self"]],["s"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","jsonrpc_tcp_server::tokio::reactor","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"handle","","Returns a reference to the reactor handle.",166,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",166,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",166,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",166,N],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",164,[[],["result",["reactor","error"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",164,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",164,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",164,[[["self"],["option",["duration"]]],["result",["turn","error"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",164,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",164,[[["self"]],["result",["background","error"]]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the current reactor.",162,[[],["handle"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",163,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",163,[[["e"],["handle"]],["result",["pollevented","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",163,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",163,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",163,[[["self"]],["result",["error"]]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",163,[[["self"],["ready"]],["result",["async","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",163,[[["self"],["ready"]],["result",["error"]]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",163,[[["self"]],["result",["async","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",163,[[["self"]],["result",["error"]]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"new","","Create a new `Registration`.",167,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",167,[[["self"],["t"]],["result",["bool","error"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",167,[[["self"],["t"]],["result",["error"]]]],[11,"register_with","","Register the I/O resource with the specified reactor.",167,[[["self"],["t"],["handle"]],["result",["bool","error"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",167,[[["self"]],["result",["async","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",167,[[["self"]],["result",["option","error"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",167,[[["self"]],["result",["async","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",167,[[["self"]],["result",["option","error"]]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::runtime::current_thread","Returns a new runtime builder initialized with default configuration values.",127,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",127,[[["self"],["clock"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",127,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime initialized with default configuration values.",134,[[],["result",["runtime","error"]]]],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",134,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",134,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",134,[[["self"],["f"]],["result"]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",134,[[["self"]],["result",["runerror"]]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",129,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",129,[[["self"]],["result",["spawnerror"]]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::runtime","Create a new runtime instance with default configuration values.",131,[[],["result",["runtime","error"]]]],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",131,[[["self"]],["handle"]]],[11,"executor","","Return a handle to the runtime's executor.",131,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",131,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Run a future to completion on the Tokio runtime.",131,[[["self"],["f"]],["result"]]],[11,"block_on_all","","Run a future to completion on the Tokio runtime, then wait for all background futures to complete too.",131,[[["self"],["f"]],["result"]]],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",131,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",131,[[["self"]],["shutdown"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",126,N],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",128,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",128,[[["self"],["clock"]],["builder"]]],[11,"core_threads","","Set the maximum number of worker threads for the `Runtime`'s thread pool.",128,[[["self"],["usize"]],["builder"]]],[11,"blocking_threads","","Set the maximum number of concurrent blocking sections in the `Runtime`'s thread pool.",128,[[["self"],["usize"]],["builder"]]],[11,"name_prefix","","Set name prefix of threads spawned by the `Runtime`'s thread pool.",128,[[["self"],["s"]],["builder"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",128,[[["self"],["usize"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",128,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"into_future","","",132,[[["self"]],["f"]]],[11,"new","jsonrpc_tcp_server::tokio::timer","Create a new, empty, `DelayQueue`",170,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",170,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",170,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",170,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",170,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",170,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",170,N],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",170,N],[11,"clear","","Clears the queue, removing all items.",170,N],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",170,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",170,N],[11,"is_empty","","Returns `true` if there are no items in the queue.",170,[[["self"]],["bool"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_tcp_server::tokio::timer::delay_queue","Returns a reference to the inner value.",175,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",175,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",175,[[["self"]],["t"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::timer","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",169,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",169,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",169,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",169,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",169,[[["t"],["instant"]],["timeout"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"into_future","","",169,[[["self"]],["f"]]],[11,"shutdown","","Create an error representing a shutdown timer.",174,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",174,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",174,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",174,[[["self"]],["bool"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"to_string","","",174,[[["self"]],["string"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",168,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",168,[[["duration"]],["interval"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"inner","jsonrpc_tcp_server::tokio::timer::timeout","Create a new `Error` representing the inner value completing with `Err`.",173,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",173,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",173,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",173,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",173,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",173,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",173,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",173,[[["self"]],["option",["error"]]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"to_string","","",173,[[["self"]],["string"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"new","jsonrpc_tcp_server::tokio::timer","Create a new `Delay` instance that elapses at `deadline`.",171,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",171,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",171,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",171,N],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"into_future","","",171,[[["self"]],["f"]]],[11,"to_owned","jsonrpc_tcp_server","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[8,"Executor"],[8,"Read"],[8,"AsyncRead"],[4,"ErrorKind"],[8,"AsyncWrite"],[8,"Write"],[3,"UCred"],[8,"FutureExt"],[8,"Stream"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Sink"],[4,"AsyncSink"],[8,"Executor"],[8,"EventSet"],[8,"Unpark"],[8,"StreamExt"],[4,"Async"],[3,"ReuniteError"],[4,"MergedItem"],[4,"Separator"],[3,"RequestContext"],[4,"PushMessageError"],[3,"Dispatcher"],[3,"ServerBuilder"],[3,"Server"],[8,"MetaExtractor"],[3,"Builder"],[3,"Error"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"SendError"],[3,"SharedError"],[3,"Err"],[3,"Concat"],[3,"Empty"],[3,"Flatten"],[3,"OrElse"],[3,"CatchUnwind"],[3,"Inspect"],[3,"Select2"],[3,"AndThen"],[3,"Select"],[3,"FromErr"],[3,"Collect"],[3,"Join"],[3,"PollFn"],[3,"SelectAll"],[3,"MapErr"],[3,"SelectNext"],[3,"Fuse"],[3,"Lazy"],[3,"LoopFn"],[3,"Join5"],[3,"Join4"],[3,"Concat2"],[3,"Join3"],[3,"Then"],[3,"StreamFuture"],[3,"Shared"],[3,"Fold"],[3,"ForEach"],[3,"Collect"],[3,"SelectOk"],[3,"Map"],[3,"Forward"],[3,"FutureSender"],[3,"InspectErr"],[3,"FromErr"],[3,"OrElse"],[3,"BufferUnordered"],[3,"SplitSink"],[3,"Take"],[3,"Peekable"],[3,"Then"],[3,"Buffered"],[3,"Flatten"],[3,"Inspect"],[3,"FilterMap"],[3,"TakeWhile"],[3,"SkipWhile"],[3,"Skip"],[3,"Fuse"],[3,"Chunks"],[3,"Filter"],[3,"AndThen"],[3,"Map"],[3,"MapErr"],[3,"IntoStream"],[3,"Empty"],[3,"Unfold"],[3,"Chain"],[3,"Repeat"],[3,"IterResult"],[3,"Iter"],[3,"Merge"],[3,"Once"],[3,"PollFn"],[3,"Zip"],[3,"SplitStream"],[3,"Select"],[3,"FlattenStream"],[3,"Receiver"],[3,"IterOk"],[3,"CatchUnwind"],[3,"IterMut"],[3,"Wait"],[3,"Task"],[3,"SharedItem"],[3,"UnparkEvent"],[3,"TaskRc"],[3,"Sender"],[3,"ExecuteError"],[3,"Spawn"],[3,"Run"],[3,"AtomicTask"],[3,"LocalKey"],[3,"LengthDelimitedCodec"],[3,"TaskExecutor"],[3,"Builder"],[3,"Builder"],[3,"Handle"],[3,"Spawn"],[3,"Runtime"],[3,"Shutdown"],[3,"FrameTooBig"],[3,"Runtime"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"Shutdown"],[3,"FramedRead"],[3,"FramedWrite"],[3,"ReadToEnd"],[3,"WriteAll"],[3,"Copy"],[3,"WriteHalf"],[3,"ReadUntil"],[3,"Framed"],[3,"ReadExact"],[3,"ReadHalf"],[3,"Flush"],[3,"Lines"],[3,"LinesCodec"],[3,"BytesCodec"],[3,"SeekFuture"],[3,"OpenOptions"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"File"],[3,"Stderr"],[3,"Stdin"],[3,"SymlinkFuture"],[3,"Stdout"],[3,"OpenFuture"],[3,"Handle"],[3,"PollEvented2"],[3,"Reactor"],[3,"Turn"],[3,"Background"],[3,"Registration"],[3,"Interval"],[3,"Timeout"],[3,"DelayQueue"],[3,"Delay"],[3,"Key"],[3,"Error"],[3,"Error"],[3,"Expired"],[3,"TcpListener"],[3,"Incoming"],[3,"ConnectFuture"],[3,"TcpStream"],[3,"SendDgram"],[3,"UdpSocket"],[3,"UdpFramed"],[3,"RecvDgram"],[3,"UnixListener"],[3,"RecvDgram"],[3,"Incoming"],[3,"UnixDatagram"],[3,"UnixStream"],[3,"SendDgram"],[3,"ConnectFuture"]]};
searchIndex["jsonrpc_test"]={"doc":"An utility package to test jsonrpc-core based projects.","items":[[3,"Options","jsonrpc_test","Test RPC options.",N,N],[12,"no_print","","Disable printing requests and responses.",0,N],[3,"Rpc","","RPC instance.",N,N],[12,"io","","Underlying `IoHandler`.",1,N],[12,"options","","Options",1,N],[11,"default","","",0,[[],["options"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["rpc"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["iohandler"]],["self"]]],[11,"new","","Create a new RPC instance from a single delegate.",1,[[["d"]],["self"]]],[11,"request","","Perform a single, synchronous method call.",1,[[["self"],["str"],["t"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"Options"],[3,"Rpc"]]};
searchIndex["jsonrpc_ws_server"]={"doc":"`WebSockets` server.","items":[[3,"Origin","jsonrpc_ws_server","Request Origin",N,N],[3,"Host","","Host type",N,N],[4,"DomainsValidation","","Specifies if domains should be validated.",N,N],[13,"AllowOnly","","Allow only domains on the list.",0,N],[13,"Disabled","","Disable domains validation completely.",0,N],[0,"clock","jsonrpc_ws_server::tokio","A configurable source of time.",N,N],[5,"now","jsonrpc_ws_server::tokio::clock","Returns an `Instant` corresponding to \"now\".",N,[[],["instant"]]],[0,"codec","jsonrpc_ws_server::tokio","Utilities for encoding and decoding frames.",N,N],[0,"length_delimited","jsonrpc_ws_server::tokio::codec","Frame a stream of bytes based on a length prefix",N,N],[3,"Builder","jsonrpc_ws_server::tokio::codec::length_delimited","Configure length delimited `LengthDelimitedCodec`s.",N,N],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",N,N],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",N,N],[3,"LinesCodec","jsonrpc_ws_server::tokio::codec","A simple `Codec` implementation that splits up data into lines.",N,N],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",N,N],[8,"Decoder","","Decoding of frames via buffers.",N,N],[16,"Item","","The type of decoded frames.",1,N],[16,"Error","","The type of unrecoverable frame decoding errors.",1,N],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",1,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",1,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",1,[[["self"],["t"]],["framed"]]],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",N,N],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",N,N],[16,"Item","","The type of items consumed by the `Encoder`",2,N],[16,"Error","","The type of encoding errors.",2,N],[10,"encode","","Encodes a frame into the buffer provided.",2,N],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",N,N],[12,"io","","The inner transport used to read bytes to and write bytes to",3,N],[12,"codec","","The codec",3,N],[12,"read_buf","","The buffer with read but unprocessed data.",3,N],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",3,N],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",N,N],[0,"executor","jsonrpc_ws_server::tokio","Task execution utilities.",N,N],[3,"Spawn","jsonrpc_ws_server::tokio::executor","Return value from the `spawn` function.",N,N],[5,"spawn","","Spawns a future on the default executor.",N,[[["f"]],["spawn"]]],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[8,"Executor","","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",4,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",4,[[["self"]],["result",["spawnerror"]]]],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[0,"fs","jsonrpc_ws_server::tokio","Asynchronous filesystem manipulation operations.",N,N],[5,"create_dir_all","jsonrpc_ws_server::tokio::fs","Recursively create a directory and all of its parent components if they are missing.",N,[[["p"]],["createdirallfuture"]]],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",N,[[["p"]],["readlinkfuture"]]],[5,"create_dir","","Creates a new, empty directory at the provided path",N,[[["p"]],["createdirfuture"]]],[5,"hard_link","","Creates a new hard link on the filesystem.",N,[[["p"],["q"]],["hardlinkfuture"]]],[5,"read_dir","","Returns a stream over the entries within a directory.",N,[[["p"]],["readdirfuture"]]],[5,"remove_file","","Removes a file from the filesystem.",N,[[["p"]],["removefilefuture"]]],[5,"symlink_metadata","","Queries the file system metadata for a path.",N,[[["p"]],["symlinkmetadatafuture"]]],[5,"set_permissions","","Changes the permissions found on a file or a directory.",N,[[["p"],["permissions"]],["setpermissionsfuture"]]],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",N,N],[0,"os","","OS-specific functionality.",N,N],[0,"unix","jsonrpc_ws_server::tokio::fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",N,N],[5,"symlink","jsonrpc_ws_server::tokio::fs::os::unix","Creates a new symbolic link on the filesystem.",N,[[["p"],["q"]],["symlinkfuture"]]],[3,"SymlinkFuture","","Future returned by `symlink`.",N,N],[5,"remove_dir","jsonrpc_ws_server::tokio::fs","Removes an existing, empty directory.",N,[[["p"]],["removedirfuture"]]],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",N,[[["p"],["q"]],["renamefuture"]]],[3,"File","","A reference to an open file on the filesystem.",N,N],[5,"metadata","","Queries the file system metadata for a path.",N,[[["p"]],["metadatafuture"]]],[0,"file","","Types for working with [`File`].",N,N],[3,"CreateFuture","jsonrpc_ws_server::tokio::fs::file","Future returned by `File::create` and resolves to a `File` instance.",N,N],[3,"SeekFuture","","Future returned by `File::seek`.",N,N],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",N,N],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(File, Metadata)` instance.",N,N],[0,"io","jsonrpc_ws_server::tokio","Asynchronous I/O.",N,N],[5,"copy","jsonrpc_ws_server::tokio::io","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[8,"Read","","The `Read` trait allows for reading bytes from a source.",N,N],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",5,N],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",5,[[["self"]],["initializer"]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",5,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",5,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",5,N],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",5,[[["self"]],["self"]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",5,[[["self"]],["bytes"]]],[11,"chain","","Creates an adaptor which will chain this stream with another.",5,[[["self"],["r"]],["chain"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",5,[[["self"],["u64"]],["take"]]],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"stderr","","Constructs a new handle to the standard error of the current process.",N,[[],["stderr"]]],[3,"Stdin","","A handle to the standard input stream of a process.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",6,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",6,N],[11,"read_buf","","Pull some bytes from this source into the specified `BufMut`, returning how many bytes were read.",6,[[["self"],["b"]],["result",["async","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this I/O object, using `Decode` and `Encode` to read and write the raw data.",6,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",6,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[5,"stdin","","Constructs a new handle to the standard input of the current process.",N,[[],["stdin"]]],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",7,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",7,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",7,N],[13,"ConnectionReset","","The connection was reset by the remote server.",7,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",7,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",7,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",7,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",7,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",7,N],[13,"AlreadyExists","","An entity already exists, often a file.",7,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",7,N],[13,"InvalidInput","","A parameter was incorrect.",7,N],[13,"InvalidData","","Data not valid for the operation were encountered.",7,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",7,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",7,N],[13,"Interrupted","","This operation was interrupted.",7,N],[13,"Other","","Any I/O error not part of this list.",7,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",7,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",8,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",8,[[["self"]],["result",["async","error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",8,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",8,[[["self"],["b"]],["result",["async","error"]]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",N,N],[10,"write","","Write a buffer into this object, returning how many bytes were written.",9,N],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",9,[[["self"]],["result",["error"]]]],[11,"write_all","","Attempts to write an entire buffer into this write.",9,N],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",9,[[["self"],["arguments"]],["result",["error"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",9,[[["self"]],["self"]]],[5,"stdout","","Constructs a new handle to the standard output of the current process.",N,[[],["stdout"]]],[3,"Stdout","","A handle to the standard output stream of a process.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[3,"Stderr","","A handle to the standard error stream of a process.",N,N],[0,"net","jsonrpc_ws_server::tokio","TCP/UDP/Unix bindings for `tokio`.",N,N],[0,"tcp","jsonrpc_ws_server::tokio::net","TCP bindings for `tokio`.",N,N],[3,"TcpStream","jsonrpc_ws_server::tokio::net::tcp","An I/O object representing a TCP stream connected to a remote endpoint.",N,N],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",N,N],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",N,N],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",N,N],[0,"udp","jsonrpc_ws_server::tokio::net","UDP bindings for `tokio`.",N,N],[3,"UdpFramed","jsonrpc_ws_server::tokio::net::udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",N,N],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",N,N],[3,"UdpSocket","","An I/O object representing a UDP socket.",N,N],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",N,N],[0,"unix","jsonrpc_ws_server::tokio::net","Unix domain socket bindings for `tokio` (only available on unix systems).",N,N],[3,"UCred","jsonrpc_ws_server::tokio::net::unix","Credentials of a process",N,N],[12,"uid","","UID (user ID) of the process",10,N],[12,"gid","","GID (group ID) of the process",10,N],[3,"ConnectFuture","","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",N,N],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",N,N],[3,"UnixStream","","A structure representing a connected Unix socket.",N,N],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",N,N],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",N,N],[3,"Incoming","","Stream of listeners",N,N],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",N,N],[0,"prelude","jsonrpc_ws_server::tokio","A \"prelude\" for users of the `tokio` crate.",N,N],[8,"FutureExt","jsonrpc_ws_server::tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new future which allows `self` until `timeout`.",11,[[["self"],["duration"]],["timeout"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",12,N],[16,"Error","","The type of error this stream may generate.",12,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",12,[[["self"]],["result",["async"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",12,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",12,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",12,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",12,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",12,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",12,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",12,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",12,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",12,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",12,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",12,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",12,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",12,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",12,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",12,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",12,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",12,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",12,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",12,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",12,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",12,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",12,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",12,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",12,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",12,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",12,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",12,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",12,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",12,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",12,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",12,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",12,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",12,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",12,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",12,[[["self"],["f"]],["inspecterr"]]],[0,"future","","Futures",N,N],[8,"Future","jsonrpc_ws_server::tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",13,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",13,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",13,[[["self"]],["result",["async"]]]],[11,"wait","","Block the current thread until this future is resolved.",13,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",13,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",13,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",13,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",13,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",13,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",13,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",13,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",13,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",13,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",13,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",13,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",13,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",13,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",13,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",13,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",13,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",13,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",13,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",13,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",14,N],[16,"Item","","The item that the future may resolve with.",14,N],[16,"Error","","The error that the future may resolve with.",14,N],[10,"into_future","","Consumes this object and produces a future.",14,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",15,N],[16,"Error","","Possible errors during conversion.",15,N],[10,"future_from","","Consume the given value, beginning the conversion.",15,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",16,[[["self"],["f"]],["result",["executeerror"]]]],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",17,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",17,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Err","","A future representing a value that is immediately ready.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",18,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",18,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[3,"Empty","","A future which is never resolved.",N,N],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",19,N],[13,"B","","Second branch of the type",19,N],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[8,"Sink","jsonrpc_ws_server::tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",20,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",20,N],[10,"start_send","","Begin the process of sending a value to the sink.",20,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",20,[[["self"]],["result",["async"]]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",20,[[["self"]],["result",["async"]]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",20,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",20,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",20,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",20,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",20,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",20,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",20,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",20,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",20,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",20,[[["self"],["s"]],["sendall"]]],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",21,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",21,N],[0,"task","","Tasks used to drive a future computation",N,N],[5,"spawn","jsonrpc_ws_server::tokio::prelude::task","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[8,"Executor","","A trait representing requests to poll futures.",N,N],[10,"execute","","Requests that `Run` is executed soon on the given executor.",22,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",23,N],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",N,N],[3,"Spawn","","Representation of a spawned future/stream.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[5,"init","","Initialize the `futures` task system.",N,N],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",24,N],[8,"StreamExt","jsonrpc_ws_server::tokio::prelude","An extension trait for `Stream` that provides a variety of convenient combinator functions.",N,N],[11,"timeout","","Creates a new stream which allows `self` until `timeout`.",25,[[["self"],["duration"]],["timeout"]]],[4,"Async","","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",26,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",26,N],[0,"stream","","Asynchronous streams",N,N],[0,"futures_unordered","jsonrpc_ws_server::tokio::prelude::stream","An unbounded set of futures.",N,N],[3,"FuturesUnordered","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[5,"futures_unordered","jsonrpc_ws_server::tokio::prelude::stream","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Sender","","The transmission end of a channel which is used to send values.",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",27,N],[12,"1","","",27,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",28,N],[13,"Second","","An item from the second stream",28,N],[13,"Both","","Items from both streams",28,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"FutureSender","","Future returned by `Sender::send`.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[6,"Poll","jsonrpc_ws_server::tokio::prelude","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[0,"reactor","jsonrpc_ws_server::tokio","Event loop that drives Tokio I/O resources.",N,N],[3,"Turn","jsonrpc_ws_server::tokio::reactor","Return value from the `turn` method on `Reactor`.",N,N],[3,"Background","","Handle to the reactor running on a background thread.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[0,"runtime","jsonrpc_ws_server::tokio","A batteries included runtime for applications using Tokio.",N,N],[0,"current_thread","jsonrpc_ws_server::tokio::runtime","A runtime implementation that runs everything on the current thread.",N,N],[5,"block_on_all","jsonrpc_ws_server::tokio::runtime::current_thread","Run the provided future to completion using a runtime running on the current thread.",N,[[["f"]],["result"]]],[3,"Builder","","Builds a Single-threaded runtime with custom configuration values.",N,N],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",N,N],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",N,N],[3,"Runtime","jsonrpc_ws_server::tokio::runtime","Handle to the Tokio runtime.",N,N],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",N,N],[3,"TaskExecutor","","Executes futures on the runtime",N,N],[3,"Builder","","Builds Tokio Runtime with custom configuration values.",N,N],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",N,N],[0,"timer","jsonrpc_ws_server::tokio","Utilities for tracking time.",N,N],[3,"DelayQueue","jsonrpc_ws_server::tokio::timer","A queue of delayed elements.",N,N],[0,"delay_queue","","A queue of delayed elements.",N,N],[3,"Expired","jsonrpc_ws_server::tokio::timer::delay_queue","An entry in `DelayQueue` that has expired and removed.",N,N],[3,"Key","","Token to a value stored in a `DelayQueue`.",N,N],[3,"Timeout","jsonrpc_ws_server::tokio::timer","Allows a `Future` or `Stream` to execute for a limited amount of time.",N,N],[3,"Error","","Errors encountered by the timer implementation.",N,N],[3,"Interval","","A stream representing notifications at fixed interval",N,N],[0,"timeout","","Allows a future or stream to execute for a maximum amount of time.",N,N],[3,"Error","jsonrpc_ws_server::tokio::timer::timeout","Error returned by `Timeout`.",N,N],[3,"Delay","jsonrpc_ws_server::tokio::timer","A future that completes at a specified instant in time.",N,N],[0,"util","jsonrpc_ws_server::tokio","Utilities for working with Tokio.",N,N],[6,"SessionId","jsonrpc_ws_server","Session id",N,N],[8,"SessionStats","","Keeps track of open sessions",N,N],[10,"open_session","","Executed when new session is opened.",29,N],[10,"close_session","","Executed when session is closed.",29,N],[3,"Error","","The Error type.",N,N],[12,"0","","The kind of the error.",30,N],[3,"RequestContext","","Request context",N,N],[12,"session_id","","Session id",31,N],[12,"origin","","Request Origin",31,N],[12,"protocols","","Requested protocols",31,N],[12,"out","","Direct channel to send messages to a client.",31,N],[12,"executor","","Remote to underlying event loop.",31,N],[3,"NoopExtractor","","Dummy metadata extractor",N,N],[3,"CloseHandle","","A handle that allows closing of a server even if it owned by a thread blocked in `wait`.",N,N],[3,"Server","","`WebSockets` server implementation.",N,N],[3,"ServerBuilder","","Builder for `WebSockets` server",N,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",32,N],[13,"Io","","",32,N],[13,"ConnectionClosed","","Attempted action on closed connection.",32,N],[4,"MiddlewareAction","","Request middleware action",N,N],[13,"Proceed","","Proceed with standard JSON-RPC behaviour.",33,N],[13,"Respond","","Terminate the request and return a response.",33,N],[12,"response","jsonrpc_ws_server::MiddlewareAction","Response to return",33,N],[12,"validate_origin","","Should origin be validated before returning the response?",33,N],[12,"validate_hosts","","Should hosts be validated before returning the response?",33,N],[11,"fmt","jsonrpc_ws_server","",30,[[["self"],["formatter"]],["result"]]],[11,"new","","",30,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",30,N],[11,"with_chain","","",30,[[["e"],["k"]],["self"]]],[11,"kind","","",30,N],[11,"iter","","",30,[[["self"]],["iter"]]],[11,"chain_err","","",30,[[["self"],["f"]],["self"]]],[11,"backtrace","","",30,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",30,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",30,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",30,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",30,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",30,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",30,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",30,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",30,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",30,[[["self"]],["str"]]],[11,"description","","",30,[[["self"]],["str"]]],[11,"cause","","",30,[[["self"]],["option",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"from","","",30,[[["error"]],["self"]]],[11,"from","","",30,[[["errorkind"]],["self"]]],[11,"from","","",30,[[["str"]],["self"]]],[11,"from","","",30,[[["string"]],["self"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",32,[[["self"]],["str"]]],[11,"from","","",32,[[["str"]],["self"]]],[11,"from","","",32,[[["string"]],["self"]]],[11,"from","","",32,[[["error"]],["self"]]],[11,"from","","",30,[[["error"]],["self"]]],[11,"sender","","Get this session as a `Sink` spawning a new future in the underlying event loop.",31,[[["self"]],["sender",["string"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["noopextractor"]]],[11,"extract","","",34,[[["self"],["requestcontext"]],["m"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"addr","","Returns the address this server is listening on",35,[[["self"]],["socketaddr"]]],[11,"start","","Starts a new `WebSocket` server in separate thread. Returns a `Server` handle which closes the server when droped.",35,[[["socketaddr"],["arc",["metaiohandler"]],["arc",["metaextractor"]],["option",["vec"]],["option",["vec"]],["option",["arc"]],["option",["arc"]],["uninitializedexecutor"],["usize"]],["result",["server"]]]],[11,"wait","","Consumes the server and waits for completion",35,[[["self"]],["result"]]],[11,"close","","Closes the server and waits for it to finish",35,[[["self"]]]],[11,"close_handle","","Returns a handle to the server that can be used to close it while another thread is blocking in `wait`.",35,[[["self"]],["closehandle"]]],[11,"drop","","",35,[[["self"]]]],[11,"clone","","",36,[[["self"]],["closehandle"]]],[11,"close","","Closes the `Server`.",36,[[["self"]]]],[11,"new","","Creates new `ServerBuilder`",37,[[["t"]],["self"]]],[11,"with_meta_extractor","","Creates new `ServerBuilder`",37,[[["t"],["e"]],["self"]]],[11,"event_loop_executor","","Utilize existing event loop executor to poll RPC results.",37,[[["self"],["taskexecutor"]],["self"]]],[11,"session_meta_extractor","","Sets a meta extractor.",37,[[["self"],["t"]],["self"]]],[11,"allowed_origins","","Allowed origins.",37,[[["self"],["domainsvalidation",["origin"]]],["self"]]],[11,"allowed_hosts","","Allowed hosts.",37,[[["self"],["domainsvalidation",["host"]]],["self"]]],[11,"session_stats","","Session stats",37,[[["self"],["t"]],["self"]]],[11,"request_middleware","","Sets a request middleware. Middleware will be invoked before each handshake request. You can either terminate the handshake in the middleware or run a default behaviour after.",37,[[["self"],["t"]],["self"]]],[11,"max_connections","","Maximal number of concurrent connections this server supports. Default: 100",37,[[["self"],["usize"]],["self"]]],[11,"start","","Starts a new `WebSocket` server in separate thread. Returns a `Server` handle which closes the server when droped.",37,[[["self"],["socketaddr"]],["result",["server"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"from","","",33,[[["option",["response"]]],["self"]]],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"MetaExtractor","","Metadata extractor from session data.",N,N],[10,"extract","","Extract metadata for given session",38,[[["self"],["requestcontext"]],["m"]]],[8,"RequestMiddleware","","Middleware to intercept server requests. You can either terminate the request (by returning a response) or just proceed with standard JSON-RPC handling.",N,N],[10,"process","","Process a request and decide what to do next.",39,[[["self"],["request"]],["middlewareaction"]]],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",40,[[["originprotocol"],["str"],["t"]],["origin"]]],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",40,[[["str"]],["origin"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"partial_cmp","jsonrpc_ws_server::tokio::io","",7,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",41,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",41,[[["nulerror"]],["error"]]],[11,"from","","",41,[[["intoinnererror"]],["error"]]],[11,"description","","",41,[[["self"]],["str"]]],[11,"cause","","",41,[[["self"]],["option",["error"]]]],[11,"clone","","",7,[[["self"]],["errorkind"]]],[11,"hash","","",7,N],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",7,[[["self"],["errorkind"]],["bool"]]],[11,"cmp","","",7,[[["self"],["errorkind"]],["ordering"]]],[11,"eq","jsonrpc_ws_server","",42,[[["self"],["host"]],["bool"]]],[11,"ne","","",42,[[["self"],["host"]],["bool"]]],[11,"eq","","",40,[[["self"],["origin"]],["bool"]]],[11,"ne","","",40,[[["self"],["origin"]],["bool"]]],[11,"eq","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"ne","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",40,N],[11,"deref","","",42,N],[11,"matches","","",42,[[["self"],["t"]],["bool"]]],[11,"matches","","",40,[[["self"],["t"]],["bool"]]],[11,"hash","","",42,N],[11,"hash","","",40,N],[11,"from","","",40,[[["t"]],["origin"]]],[11,"from","","",42,[[["t"]],["host"]]],[11,"from","","",0,[[["option",["vec"]]],["domainsvalidation"]]],[11,"into","","",0,[[["self"]],["option",["vec"]]]],[11,"clone","","",0,[[["self"]],["domainsvalidation"]]],[11,"clone","","",42,[[["self"]],["host"]]],[11,"clone","","",40,[[["self"]],["origin"]]],[11,"from_iter","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","",43,[[["t"]],["futuresunordered"]]],[11,"from_iter","jsonrpc_ws_server::tokio::prelude::stream","",44,[[["t"]],["futuresordered"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",47,[[["result"]],["futureresult"]]],[11,"from","jsonrpc_ws_server::tokio::prelude","",26,[[["t"]],["async"]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",48,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::future","",49,[[["self"]],["result",["async"]]]],[11,"poll","","",50,[[["self"]],["result",["async"]]]],[11,"poll","","",19,[[["self"]],["result",["async"]]]],[11,"poll","","",51,[[["self"]],["result",["async"]]]],[11,"poll","","",52,[[["self"]],["result",["async"]]]],[11,"poll","","",53,[[["self"]],["result",["async"]]]],[11,"poll","","",54,[[["self"]],["result",["async"]]]],[11,"poll","","",55,[[["self"]],["result",["async"]]]],[11,"poll","","",56,[[["self"]],["result",["async"]]]],[11,"poll","","",57,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",58,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::future","",59,[[["self"]],["result",["async"]]]],[11,"poll","","",60,[[["self"]],["result",["async"]]]],[11,"poll","","",61,[[["self"]],["result",["async"]]]],[11,"poll","","",62,[[["self"]],["result",["async"]]]],[11,"poll","","",63,[[["self"]],["result",["async"]]]],[11,"poll","","",64,[[["self"]],["result",["async"]]]],[11,"poll","","",65,[[["self"]],["result",["async"]]]],[11,"poll","","",66,[[["self"]],["result",["async"]]]],[11,"poll","","",67,[[["self"]],["result",["async"]]]],[11,"poll","","",68,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",69,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::future","",70,[[["self"]],["result",["async"]]]],[11,"poll","","",71,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",72,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::future","",73,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",74,[[["self"]],["result",["async"]]]],[11,"poll","","",75,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::future","",76,[[["self"]],["result",["async"]]]],[11,"poll","","",77,[[["self"]],["result",["async"]]]],[11,"poll","","",78,[[["self"]],["result",["async"]]]],[11,"poll","","",47,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",79,[[["self"]],["result",["async"]]]],[11,"poll","","",80,[[["self"]],["result",["async"]]]],[11,"start_send","","",81,N],[11,"poll_complete","","",81,[[["self"]],["result",["async"]]]],[11,"close","","",81,[[["self"]],["result",["async"]]]],[11,"start_send","","",82,N],[11,"poll_complete","","",82,[[["self"]],["result",["async"]]]],[11,"close","","",82,[[["self"]],["result",["async"]]]],[11,"start_send","","",83,N],[11,"poll_complete","","",83,[[["self"]],["result",["async"]]]],[11,"close","","",83,[[["self"]],["result",["async"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["result",["async"]]]],[11,"close","","",84,[[["self"]],["result",["async"]]]],[11,"start_send","","",85,N],[11,"poll_complete","","",85,[[["self"]],["result",["async"]]]],[11,"close","","",85,[[["self"]],["result",["async"]]]],[11,"start_send","","",86,N],[11,"poll_complete","","",86,[[["self"]],["result",["async"]]]],[11,"close","","",86,[[["self"]],["result",["async"]]]],[11,"start_send","","",87,N],[11,"poll_complete","","",87,[[["self"]],["result",["async"]]]],[11,"close","","",87,[[["self"]],["result",["async"]]]],[11,"start_send","","",88,N],[11,"poll_complete","","",88,[[["self"]],["result",["async"]]]],[11,"close","","",88,[[["self"]],["result",["async"]]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["result",["async"]]]],[11,"close","","",89,[[["self"]],["result",["async"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["result",["async"]]]],[11,"close","","",90,[[["self"]],["result",["async"]]]],[11,"start_send","","",91,N],[11,"poll_complete","","",91,[[["self"]],["result",["async"]]]],[11,"close","","",91,[[["self"]],["result",["async"]]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["result",["async"]]]],[11,"close","","",92,[[["self"]],["result",["async"]]]],[11,"start_send","","",93,N],[11,"poll_complete","","",93,[[["self"]],["result",["async"]]]],[11,"close","","",93,[[["self"]],["result",["async"]]]],[11,"start_send","","",94,N],[11,"poll_complete","","",94,[[["self"]],["result",["async"]]]],[11,"close","","",94,[[["self"]],["result",["async"]]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["result",["async"]]]],[11,"close","","",95,[[["self"]],["result",["async"]]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["result",["async"]]]],[11,"close","","",96,[[["self"]],["result",["async"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["result",["async"]]]],[11,"close","","",97,[[["self"]],["result",["async"]]]],[11,"start_send","","",98,N],[11,"poll_complete","","",98,[[["self"]],["result",["async"]]]],[11,"close","","",98,[[["self"]],["result",["async"]]]],[11,"start_send","","",99,N],[11,"poll_complete","","",99,[[["self"]],["result",["async"]]]],[11,"close","","",99,[[["self"]],["result",["async"]]]],[11,"start_send","","",100,N],[11,"poll_complete","","",100,[[["self"]],["result",["async"]]]],[11,"close","","",100,[[["self"]],["result",["async"]]]],[11,"start_send","","",101,N],[11,"poll_complete","","",101,[[["self"]],["result",["async"]]]],[11,"close","","",101,[[["self"]],["result",["async"]]]],[11,"drop","jsonrpc_ws_server::tokio::prelude::future","",73,N],[11,"drop","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","",43,N],[11,"description","jsonrpc_ws_server::tokio::prelude::stream","",45,[[["self"]],["str"]]],[11,"description","jsonrpc_ws_server::tokio::prelude::future","",46,[[["self"]],["str"]]],[11,"cause","","",46,[[["self"]],["option",["error"]]]],[11,"description","jsonrpc_ws_server::tokio::prelude::stream","",27,[[["self"]],["str"]]],[11,"poll","","",99,[[["self"]],["result",["async"]]]],[11,"poll","","",93,[[["self"]],["result",["async"]]]],[11,"poll","","",94,[[["self"]],["result",["async"]]]],[11,"poll","","",100,[[["self"]],["result",["async"]]]],[11,"poll","","",89,[[["self"]],["result",["async"]]]],[11,"poll","","",44,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::future","",102,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",103,[[["self"]],["result",["async"]]]],[11,"poll","","",104,[[["self"]],["result",["async"]]]],[11,"poll","","",81,[[["self"]],["result",["async"]]]],[11,"poll","","",92,[[["self"]],["result",["async"]]]],[11,"poll","","",105,[[["self"]],["result",["async"]]]],[11,"poll","","",106,[[["self"]],["result",["async"]]]],[11,"poll","","",107,[[["self"]],["result",["async"]]]],[11,"poll","","",84,[[["self"]],["result",["async"]]]],[11,"poll","","",108,[[["self"]],["result",["async"]]]],[11,"poll","","",109,[[["self"]],["result",["async"]]]],[11,"poll","","",110,[[["self"]],["result",["async"]]]],[11,"poll","","",97,[[["self"]],["result",["async"]]]],[11,"poll","","",88,[[["self"]],["result",["async"]]]],[11,"poll","","",111,[[["self"]],["result",["async"]]]],[11,"poll","","",90,[[["self"]],["result",["async"]]]],[11,"poll","","",96,[[["self"]],["result",["async"]]]],[11,"poll","","",112,[[["self"]],["result",["async"]]]],[11,"poll","","",83,[[["self"]],["result",["async"]]]],[11,"poll","","",95,[[["self"]],["result",["async"]]]],[11,"poll","","",86,[[["self"]],["result",["async"]]]],[11,"poll","","",113,[[["self"]],["result",["async"]]]],[11,"poll","","",98,[[["self"]],["result",["async"]]]],[11,"poll","","",82,[[["self"]],["result",["async"]]]],[11,"poll","","",114,[[["self"]],["result",["async"]]]],[11,"poll","","",101,[[["self"]],["result",["async"]]]],[11,"poll","","",91,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::future","",115,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","",43,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::prelude::stream","",87,[[["self"]],["result",["async"]]]],[11,"poll","","",116,[[["self"]],["result",["async"]]]],[11,"poll","","",117,[[["self"]],["result",["async"]]]],[11,"poll","","",118,[[["self"]],["result",["async"]]]],[11,"next","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","",119,[[["self"]],["option"]]],[11,"size_hint","","",119,N],[11,"next","jsonrpc_ws_server::tokio::prelude::stream","",120,[[["self"]],["option"]]],[11,"clone","jsonrpc_ws_server::tokio::prelude::future","",17,[[["self"]],["executeerrorkind"]]],[11,"clone","jsonrpc_ws_server::tokio::prelude::task","",121,[[["self"]],["task"]]],[11,"clone","jsonrpc_ws_server::tokio::prelude::future","",122,[[["self"]],["shareditem"]]],[11,"clone","jsonrpc_ws_server::tokio::prelude","",21,[[["self"]],["asyncsink"]]],[11,"clone","","",26,[[["self"]],["async"]]],[11,"clone","jsonrpc_ws_server::tokio::prelude::task","",123,[[["self"]],["unparkevent"]]],[11,"clone","","",124,[[["self"]],["taskrc"]]],[11,"clone","jsonrpc_ws_server::tokio::prelude::future","",73,[[["self"]],["shared"]]],[11,"clone","","",47,[[["self"]],["futureresult"]]],[11,"clone","","",46,[[["self"]],["sharederror"]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::task","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",17,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude","",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::task","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::task","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::task","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::task","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::task","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::task","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::stream","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::prelude::future","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",122,[[["self"]],["t"]]],[11,"deref","","",46,[[["self"]],["e"]]],[11,"eq","","",17,[[["self"],["executeerrorkind"]],["bool"]]],[11,"eq","jsonrpc_ws_server::tokio::prelude","",21,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",21,[[["self"],["asyncsink"]],["bool"]]],[11,"eq","","",26,[[["self"],["async"]],["bool"]]],[11,"ne","","",26,[[["self"],["async"]],["bool"]]],[11,"default","jsonrpc_ws_server::tokio::prelude::task","",129,[[],["atomictask"]]],[11,"from","jsonrpc_ws_server::tokio::io","Convert a `serde_json::Error` into an `io::Error`.",41,[[["error"]],["error"]]],[11,"encode","jsonrpc_ws_server::tokio::codec::length_delimited","",131,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"spawn","jsonrpc_ws_server::tokio::runtime","",132,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::runtime::current_thread","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::runtime","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::runtime::current_thread","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::executor","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::runtime","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::codec::length_delimited","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::runtime","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::codec::length_delimited","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::runtime::current_thread","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","jsonrpc_ws_server::tokio::codec::length_delimited","",140,[[["self"]],["str"]]],[11,"drop","jsonrpc_ws_server::tokio::runtime","",137,N],[11,"into_future","jsonrpc_ws_server::tokio::executor","",136,N],[11,"execute","jsonrpc_ws_server::tokio::runtime","",132,[[["self"],["t"]],["result",["executeerror"]]]],[11,"execute","jsonrpc_ws_server::tokio::runtime::current_thread","",135,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_ws_server::tokio::codec::length_delimited","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","jsonrpc_ws_server::tokio::runtime::current_thread","",135,[[["self"]],["handle"]]],[11,"clone","jsonrpc_ws_server::tokio::runtime","",132,[[["self"]],["taskexecutor"]]],[11,"clone","jsonrpc_ws_server::tokio::codec::length_delimited","",138,[[["self"]],["builder"]]],[11,"poll","jsonrpc_ws_server::tokio::runtime","",139,[[["self"]],["result",["async"]]]],[11,"decode","jsonrpc_ws_server::tokio::codec::length_delimited","",131,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"spawn","jsonrpc_ws_server::tokio::executor","",142,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",142,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",143,[[["self"]],["str"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",142,[[["self"]],["defaultexecutor"]]],[11,"execute","","",142,[[["self"],["t"]],["result",["executeerror"]]]],[11,"fmt","jsonrpc_ws_server::tokio::io","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::codec","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::io","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::codec","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::io","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"shutdown","","",150,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",150,[[["self"],["b"]],["result",["async","error"]]]],[11,"read_buf","","",154,[[["self"],["b"]],["result",["async","error"]]]],[11,"read","","",154,N],[11,"poll","","",156,[[["self"]],["result",["async","error"]]]],[11,"poll","jsonrpc_ws_server::tokio::codec","",146,[[["self"]],["result",["async"]]]],[11,"poll","","",145,[[["self"]],["result",["async"]]]],[11,"poll","","",152,[[["self"]],["result",["async"]]]],[11,"write","jsonrpc_ws_server::tokio::io","",150,N],[11,"flush","","",150,[[["self"]],["result",["error"]]]],[11,"poll","","",148,[[["self"]],["result",["async","error"]]]],[11,"poll","","",147,[[["self"]],["result",["async","error"]]]],[11,"poll","","",155,[[["self"]],["result",["async","error"]]]],[11,"poll","","",151,[[["self"]],["result",["async","error"]]]],[11,"poll","","",144,[[["self"]],["result",["async","error"]]]],[11,"poll","","",153,[[["self"]],["result",["async","error"]]]],[11,"poll","","",149,[[["self"]],["result",["async","error"]]]],[11,"start_send","jsonrpc_ws_server::tokio::codec","",146,N],[11,"poll_complete","","",146,[[["self"]],["result",["async"]]]],[11,"close","","",146,[[["self"]],["result",["async"]]]],[11,"start_send","","",152,N],[11,"poll_complete","","",152,[[["self"]],["result",["async"]]]],[11,"close","","",152,[[["self"]],["result",["async"]]]],[11,"start_send","","",145,N],[11,"poll_complete","","",145,[[["self"]],["result",["async"]]]],[11,"close","","",145,[[["self"]],["result",["async"]]]],[11,"eq","","",157,[[["self"],["linescodec"]],["bool"]]],[11,"ne","","",157,[[["self"],["linescodec"]],["bool"]]],[11,"eq","","",158,[[["self"],["bytescodec"]],["bool"]]],[11,"ne","","",158,[[["self"],["bytescodec"]],["bool"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",157,N],[11,"hash","","",158,N],[11,"decode","","",157,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode_eof","","",157,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"decode","","",158,[[["self"],["bytesmut"]],["result",["option","error"]]]],[11,"partial_cmp","","",157,[[["self"],["linescodec"]],["option",["ordering"]]]],[11,"lt","","",157,[[["self"],["linescodec"]],["bool"]]],[11,"le","","",157,[[["self"],["linescodec"]],["bool"]]],[11,"gt","","",157,[[["self"],["linescodec"]],["bool"]]],[11,"ge","","",157,[[["self"],["linescodec"]],["bool"]]],[11,"partial_cmp","","",158,[[["self"],["bytescodec"]],["option",["ordering"]]]],[11,"lt","","",158,[[["self"],["bytescodec"]],["bool"]]],[11,"le","","",158,[[["self"],["bytescodec"]],["bool"]]],[11,"gt","","",158,[[["self"],["bytescodec"]],["bool"]]],[11,"ge","","",158,[[["self"],["bytescodec"]],["bool"]]],[11,"encode","","",157,[[["self"],["string"],["bytesmut"]],["result",["error"]]]],[11,"encode","","",158,[[["self"],["bytes"],["bytesmut"]],["result",["error"]]]],[11,"clone","","",157,[[["self"]],["linescodec"]]],[11,"clone","","",158,[[["self"]],["bytescodec"]]],[11,"cmp","","",157,[[["self"],["linescodec"]],["ordering"]]],[11,"cmp","","",158,[[["self"],["bytescodec"]],["ordering"]]],[11,"fmt","jsonrpc_ws_server::tokio::fs::file","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::fs","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::fs::file","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::fs","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::io","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::fs::os::unix","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::io","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::fs::file","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","jsonrpc_ws_server::tokio::fs","",163,N],[11,"poll","jsonrpc_ws_server::tokio::fs::file","",161,[[["self"]],["result",["async"]]]],[11,"poll","","",162,[[["self"]],["result",["async"]]]],[11,"poll","","",159,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::fs::os::unix","",166,[[["self"]],["result",["async"]]]],[11,"poll","jsonrpc_ws_server::tokio::fs::file","",168,[[["self"]],["result",["async"]]]],[11,"from","jsonrpc_ws_server::tokio::fs","",160,[[["openoptions"]],["openoptions"]]],[11,"read","jsonrpc_ws_server::tokio::io","",165,N],[11,"read","jsonrpc_ws_server::tokio::fs","",163,N],[11,"clone","","",160,[[["self"]],["openoptions"]]],[11,"write","","",163,N],[11,"flush","","",163,[[["self"]],["result",["error"]]]],[11,"write","jsonrpc_ws_server::tokio::io","",164,N],[11,"flush","","",164,[[["self"]],["result",["error"]]]],[11,"write","","",167,N],[11,"flush","","",167,[[["self"]],["result",["error"]]]],[11,"shutdown","jsonrpc_ws_server::tokio::fs","",163,[[["self"]],["result",["async","error"]]]],[11,"shutdown","jsonrpc_ws_server::tokio::io","",167,[[["self"]],["result",["async","error"]]]],[11,"shutdown","","",164,[[["self"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",165,N],[11,"prepare_uninitialized_buffer","jsonrpc_ws_server::tokio::fs","",163,N],[11,"from","jsonrpc_ws_server::tokio::io","",41,[[["error"]],["error"]]],[11,"unpark","jsonrpc_ws_server::tokio::reactor","",169,N],[11,"fmt","","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",170,N],[11,"drop","","",173,N],[11,"read","","",170,N],[11,"clone","","",169,[[["self"]],["handle"]]],[11,"shutdown","","",170,[[["self"]],["result",["async","error"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",169,[[],["handle"]]],[11,"write","","",170,N],[11,"flush","","",170,[[["self"]],["result",["error"]]]],[11,"unpark","","",171,N],[11,"park","","",171,[[["self"]],["result",["error"]]]],[11,"park_timeout","","",171,[[["self"],["duration"]],["result",["error"]]]],[11,"poll","jsonrpc_ws_server::tokio::timer","",175,[[["self"]],["result",["async"]]]],[11,"poll","","",176,[[["self"]],["result",["async"]]]],[11,"poll","","",177,[[["self"]],["result",["async","error"]]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::timer::delay_queue","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::timer","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::timer::timeout","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::timer","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::timer::delay_queue","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::timer","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",181,[[["self"]],["str"]]],[11,"description","jsonrpc_ws_server::tokio::timer::timeout","",180,[[["self"]],["str"]]],[11,"fmt","jsonrpc_ws_server::tokio::timer","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::timer::timeout","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","jsonrpc_ws_server::tokio::timer","",178,[[["self"]],["result",["async"]]]],[11,"poll","","",176,[[["self"]],["result",["async"]]]],[11,"fmt","jsonrpc_ws_server::tokio::net::tcp","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",184,[[["self"]],["result",["async","error"]]]],[11,"read","","",186,N],[11,"as_raw_fd","","",186,[[["self"]],["i32"]]],[11,"as_raw_fd","","",183,[[["self"]],["i32"]]],[11,"poll","","",185,[[["self"]],["result",["async","error"]]]],[11,"write","","",186,N],[11,"flush","","",186,[[["self"]],["result",["error"]]]],[11,"shutdown","","",186,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",186,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",186,N],[11,"read_buf","","",186,[[["self"],["b"]],["result",["async","error"]]]],[11,"fmt","jsonrpc_ws_server::tokio::net::udp","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll","","",189,[[["self"]],["result",["async"]]]],[11,"as_raw_fd","","",188,[[["self"]],["i32"]]],[11,"poll","","",190,[[["self"]],["result",["async","error"]]]],[11,"poll","","",187,[[["self"]],["result",["async","error"]]]],[11,"start_send","","",189,N],[11,"poll_complete","","",189,[[["self"]],["result",["async"]]]],[11,"close","","",189,[[["self"]],["result",["async"]]]],[11,"eq","jsonrpc_ws_server::tokio::net::unix","",10,[[["self"],["ucred"]],["bool"]]],[11,"ne","","",10,[[["self"],["ucred"]],["bool"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"hash","","",10,N],[11,"shutdown","","",195,[[["self"]],["result",["async","error"]]]],[11,"write_buf","","",195,[[["self"],["b"]],["result",["async","error"]]]],[11,"prepare_uninitialized_buffer","","",195,N],[11,"read_buf","","",195,[[["self"],["b"]],["result",["async","error"]]]],[11,"poll","","",193,[[["self"]],["result",["async","error"]]]],[11,"read","","",195,N],[11,"clone","","",10,[[["self"]],["ucred"]]],[11,"as_raw_fd","","",195,[[["self"]],["i32"]]],[11,"as_raw_fd","","",194,[[["self"]],["i32"]]],[11,"as_raw_fd","","",191,[[["self"]],["i32"]]],[11,"poll","","",197,[[["self"]],["result",["async","error"]]]],[11,"poll","","",192,[[["self"]],["result",["async"]]]],[11,"poll","","",196,[[["self"]],["result",["async"]]]],[11,"write","","",195,N],[11,"flush","","",195,[[["self"]],["result",["error"]]]],[11,"new","jsonrpc_ws_server","Creates a new `Host` given hostname and port number.",42,[[["str"],["t"]],["host"]]],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",42,[[["str"]],["host"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::codec::length_delimited","Creates a new length delimited codec builder with default configuration values.",138,[[],["builder"]]],[11,"big_endian","","Read the length field as a big endian integer",138,[[["self"]],["builder"]]],[11,"little_endian","","Read the length field as a little endian integer",138,[[["self"]],["builder"]]],[11,"native_endian","","Read the length field as a native endian integer",138,[[["self"]],["builder"]]],[11,"max_frame_length","","Sets the max frame length",138,[[["self"],["usize"]],["builder"]]],[11,"length_field_length","","Sets the number of bytes used to represent the length field",138,[[["self"],["usize"]],["builder"]]],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",138,[[["self"],["usize"]],["builder"]]],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",138,[[["self"],["isize"]],["builder"]]],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",138,[[["self"],["usize"]],["builder"]]],[11,"new_codec","","Create a configured length delimited `LengthDelimitedCodec`",138,[[["self"]],["lengthdelimitedcodec"]]],[11,"new_read","","Create a configured length delimited `FramedRead`",138,[[["self"],["t"]],["framedread",["lengthdelimitedcodec"]]]],[11,"new_write","","Create a configured length delimited `FramedWrite`",138,[[["self"],["t"]],["framedwrite",["lengthdelimitedcodec"]]]],[11,"new_framed","","Create a configured length delimited `Framed`",138,[[["self"],["t"]],["framed",["lengthdelimitedcodec"]]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"to_string","","",140,[[["self"]],["string"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"new","","Creates a new `LengthDelimitedCodec` with the default configuration values.",131,[[],["lengthdelimitedcodec"]]],[11,"max_frame_length","","Returns the current max frame setting",131,[[["self"]],["usize"]]],[11,"set_max_frame_length","","Updates the max frame setting.",131,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::codec","Returns a `LinesCodec` for splitting up data into lines.",157,[[],["linescodec"]]],[11,"new_with_max_length","","Returns a `LinesCodec` with a maximum line length limit.",157,[[["usize"]],["linescodec"]]],[11,"max_length","","Returns the maximum line length when decoding.",157,[[["self"]],["usize"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",152,[[["t"],["u"]],["framed"]]],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",152,[[["framedparts"]],["framed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",152,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",152,[[["self"]],["t"]]],[11,"codec","","Returns a reference to the underlying codec wrapped by `Frame`.",152,[[["self"]],["u"]]],[11,"codec_mut","","Returns a mutable reference to the underlying codec wrapped by `Frame`.",152,[[["self"]],["u"]]],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",152,[[["self"]],["t"]]],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",152,[[["self"]],["framedparts"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",158,[[],["bytescodec"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",145,[[["t"],["d"]],["framedread"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",145,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",145,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",145,[[["self"]],["t"]]],[11,"decoder","","Returns a reference to the underlying decoder.",145,[[["self"]],["d"]]],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",145,[[["self"]],["d"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"new","","Create a new, default, `FramedParts`",3,[[["t"],["u"]],["framedparts"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",146,[[["t"],["e"]],["framedwrite"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",146,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",146,[[["self"]],["t"]]],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",146,[[["self"]],["t"]]],[11,"encoder","","Returns a reference to the underlying decoder.",146,[[["self"]],["e"]]],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",146,[[["self"]],["e"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ws_server::tokio::executor","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"into_future","","",136,[[["self"]],["f"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",143,[[],["spawnerror"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",143,[[],["spawnerror"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",143,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",143,[[["self"]],["bool"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"to_string","","",143,[[["self"]],["string"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the default executor for the current context.",142,[[],["defaultexecutor"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::fs","Creates a blank new set of options ready for configuration.",160,[[],["openoptions"]]],[11,"read","","See the underlying [`read`] call for details.",160,[[["self"],["bool"]],["openoptions"]]],[11,"write","","See the underlying [`write`] call for details.",160,[[["self"],["bool"]],["openoptions"]]],[11,"append","","See the underlying [`append`] call for details.",160,[[["self"],["bool"]],["openoptions"]]],[11,"truncate","","See the underlying [`truncate`] call for details.",160,[[["self"],["bool"]],["openoptions"]]],[11,"create","","See the underlying [`create`] call for details.",160,[[["self"],["bool"]],["openoptions"]]],[11,"create_new","","See the underlying [`create_new`] call for details.",160,[[["self"],["bool"]],["openoptions"]]],[11,"open","","Opens a file at `path` with the options specified by `self`.",160,[[["self"],["p"]],["openfuture"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ws_server::tokio::fs::os::unix","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"into_future","","",166,[[["self"]],["f"]]],[11,"open","jsonrpc_ws_server::tokio::fs","Attempts to open a file in read-only mode.",163,[[["p"]],["openfuture"]]],[11,"create","","Opens a file in write-only mode.",163,[[["p"]],["createfuture"]]],[11,"from_std","","Convert a [`std::fs::File`][std] to a `tokio_fs::File`.",163,[[["file"]],["file"]]],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",163,[[["self"],["seekfrom"]],["result",["async","error"]]]],[11,"seek","","Seek to an offset, in bytes, in a stream.",163,[[["self"],["seekfrom"]],["seekfuture"]]],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",163,[[["self"]],["result",["async","error"]]]],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",163,[[["self"]],["result",["async","error"]]]],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",163,[[["self"],["u64"]],["result",["async","error"]]]],[11,"metadata","","Queries metadata about the underlying file.",163,[[["self"]],["metadatafuture"]]],[11,"poll_metadata","","Queries metadata about the underlying file.",163,[[["self"]],["result",["async","error"]]]],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",163,[[["self"]],["result",["async","error"]]]],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",163,[[["self"],["permissions"]],["result",["async","error"]]]],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",163,[[["self"]],["file"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ws_server::tokio::fs::file","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"into_future","","",161,[[["self"]],["f"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"into_future","","",159,[[["self"]],["f"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"into_future","","",168,[[["self"]],["f"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"into_future","","",162,[[["self"]],["f"]]],[11,"from","jsonrpc_ws_server::tokio::io","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"into_future","","",147,[[["self"]],["f"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"into_future","","",148,[[["self"]],["f"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"into_future","","",155,[[["self"]],["f"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"into_future","","",144,[[["self"]],["f"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"into_future","","",153,[[["self"]],["f"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"into_future","","",151,[[["self"]],["f"]]],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",41,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",41,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",41,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",41,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",41,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",41,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",41,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",41,[[["self"]],["errorkind"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"to_string","","",41,[[["self"]],["string"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"into_future","","",149,[[["self"]],["f"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"into_inner","","Returns the underlying I/O object.",156,[[["self"]],["a"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"connect","jsonrpc_ws_server::tokio::net::tcp","Create a new TCP stream connected to the specified address.",186,[[["socketaddr"]],["connectfuture"]]],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",186,[[["tcpstream"],["handle"]],["result",["tcpstream","error"]]]],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",186,[[["tcpstream"],["socketaddr"],["handle"]],["connectfuture"]]],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",186,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",186,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this stream is bound to.",186,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the remote address that this stream is connected to.",186,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",186,N],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",186,[[["self"],["shutdown"]],["result",["error"]]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",186,[[["self"]],["result",["bool","error"]]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",186,[[["self"],["bool"]],["result",["error"]]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",186,[[["self"]],["result",["usize","error"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",186,[[["self"],["usize"]],["result",["error"]]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",186,[[["self"]],["result",["usize","error"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",186,[[["self"],["usize"]],["result",["error"]]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",186,[[["self"]],["result",["option","error"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",186,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",186,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",186,[[["self"],["u32"]],["result",["error"]]]],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",186,[[["self"]],["result",["option","error"]]]],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",186,[[["self"],["option",["duration"]]],["result",["error"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",186,[[["self"]],["result",["tcpstream","error"]]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"into_future","","",185,[[["self"]],["f"]]],[11,"bind","","Create a new TCP listener associated with this event loop.",183,[[["socketaddr"]],["result",["tcplistener","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",183,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",183,[[["self"]],["result",["async","error"]]]],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",183,[[["tcplistener"],["handle"]],["result",["tcplistener","error"]]]],[11,"local_addr","","Returns the local address that this listener is bound to.",183,[[["self"]],["result",["socketaddr","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",183,[[["self"]],["incoming"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",183,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",183,[[["self"],["u32"]],["result",["error"]]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::net::udp","Create a new `UdpFramed` backed by the given socket and codec.",189,[[["udpsocket"],["c"]],["udpframed"]]],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",189,[[["self"]],["udpsocket"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",189,[[["self"]],["udpsocket"]]],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",189,[[["self"]],["udpsocket"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[["self"]],["u"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"try_into","","",187,[[["self"]],["result"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"get_type_id","","",187,[[["self"]],["typeid"]]],[11,"into_future","","",187,[[["self"]],["f"]]],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",188,[[["socketaddr"]],["result",["udpsocket","error"]]]],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",188,[[["udpsocket"],["handle"]],["result",["udpsocket","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",188,[[["self"]],["result",["socketaddr","error"]]]],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",188,[[["self"],["socketaddr"]],["result",["error"]]]],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",188,N],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",188,N],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",188,N],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",188,[[["self"],["t"],["socketaddr"]],["senddgram"]]],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",188,N],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",188,[[["self"],["t"]],["recvdgram"]]],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",188,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",188,[[["self"]],["result",["async","error"]]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",188,[[["self"]],["result",["bool","error"]]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",188,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",188,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",188,[[["self"],["bool"]],["result",["error"]]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",188,[[["self"]],["result",["u32","error"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",188,[[["self"],["u32"]],["result",["error"]]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",188,[[["self"]],["result",["bool","error"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",188,[[["self"],["bool"]],["result",["error"]]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",188,[[["self"]],["result",["u32","error"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",188,[[["self"],["u32"]],["result",["error"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",188,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",188,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",188,[[["self"],["ipv4addr"],["ipv4addr"]],["result",["error"]]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",188,[[["self"],["ipv6addr"],["u32"]],["result",["error"]]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[["self"]],["u"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"try_into","","",188,[[["self"]],["result"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"get_type_id","","",188,[[["self"]],["typeid"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"into_future","","",190,[[["self"]],["f"]]],[11,"to_owned","jsonrpc_ws_server::tokio::net::unix","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"into_future","","",197,[[["self"]],["f"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"into_future","","",196,[[["self"]],["f"]]],[11,"connect","","Connects to the socket named by `path`.",195,[[["p"]],["connectfuture"]]],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",195,[[["unixstream"],["handle"]],["result",["unixstream","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",195,[[],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",195,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",195,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the socket address of the local half of this connection.",195,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",195,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",195,[[["self"]],["result",["ucred","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",195,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",195,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",194,[[["p"]],["result",["unixdatagram","error"]]]],[11,"pair","","Creates an unnamed pair of connected sockets.",194,[[],["result",["error"]]]],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",194,[[["unixdatagram"],["handle"]],["result",["unixdatagram","error"]]]],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",194,[[],["result",["unixdatagram","error"]]]],[11,"connect","","Connects the socket to the specified address.",194,[[["self"],["p"]],["result",["error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",194,[[["self"],["ready"]],["result",["async","error"]]]],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",194,[[["self"]],["result",["async","error"]]]],[11,"local_addr","","Returns the local address that this socket is bound to.",194,[[["self"]],["result",["socketaddr","error"]]]],[11,"peer_addr","","Returns the address of this socket's peer.",194,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_recv_from","","Receives data from the socket.",194,N],[11,"poll_recv","","Receives data from the socket.",194,N],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",194,[[["self"],["t"]],["recvdgram"]]],[11,"poll_send_to","","Sends data on the socket to the specified address.",194,N],[11,"poll_send","","Sends data on the socket to the socket's peer.",194,N],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",194,[[["self"],["t"],["p"]],["senddgram"]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",194,[[["self"]],["result",["option","error"]]]],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",194,[[["self"],["shutdown"]],["result",["error"]]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",191,[[["p"]],["result",["unixlistener","error"]]]],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",191,[[["unixlistener"],["handle"]],["result",["unixlistener","error"]]]],[11,"local_addr","","Returns the local socket address of this listener.",191,[[["self"]],["result",["socketaddr","error"]]]],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",191,[[["self"],["ready"]],["result",["async","error"]]]],[11,"take_error","","Returns the value of the `SO_ERROR` option.",191,[[["self"]],["result",["option","error"]]]],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",191,[[["self"]],["result",["async","error"]]]],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",191,[[["self"]],["result",["async","error"]]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",191,[[["self"]],["incoming"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[["self"]],["u"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"try_into","","",191,[[["self"]],["result"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"get_type_id","","",191,[[["self"]],["typeid"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"into_future","","",192,[[["self"]],["f"]]],[11,"new","jsonrpc_ws_server::tokio::prelude::future","Create a new `ExecuteError`",126,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",126,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",126,[[["self"]],["f"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"into_future","","",55,[[["self"]],["f"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"into_future","","",68,[[["self"]],["f"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"into_future","","",47,[[["self"]],["f"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"into_future","","",53,[[["self"]],["f"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"into_future","","",52,[[["self"]],["f"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",64,[[["self"]],["bool"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_future","","",64,[[["self"]],["f"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"into_future","","",66,[[["self"]],["f"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"into_future","","",62,[[["self"]],["f"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"into_future","","",71,[[["self"]],["f"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"into_future","","",60,[[["self"]],["f"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"into_future","","",63,[[["self"]],["f"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",73,[[["self"]],["option",["result"]]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"into_future","","",73,[[["self"]],["f"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"into_future","","",67,[[["self"]],["f"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"into_future","","",49,[[["self"]],["f"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"into_future","","",76,[[["self"]],["f"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"into_future","","",51,[[["self"]],["f"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"into_future","","",65,[[["self"]],["f"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"into_future","","",70,[[["self"]],["f"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into_future","","",19,[[["self"]],["f"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"into_future","","",78,[[["self"]],["f"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"into_future","","",50,[[["self"]],["f"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"into_future","","",61,[[["self"]],["f"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"into_future","","",54,[[["self"]],["f"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"into_future","","",59,[[["self"]],["f"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"into_future","","",56,[[["self"]],["f"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"into_future","","",77,[[["self"]],["f"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"into_future","","",57,[[["self"]],["f"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"map","jsonrpc_ws_server::tokio::prelude","Change the NotReady value of this `AsyncSink` with the closure provided",21,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",21,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",21,[[["self"]],["bool"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::prelude::task","Create an `AtomicTask` initialized with the given `Task`",129,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",129,N],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",129,N],[11,"notify","","Notifies the task that last called `register`.",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",123,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",121,N],[11,"is_current","","Returns `true` when called from within the context of the task.",121,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",121,[[["self"]],["bool"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",124,[[["a"]],["taskrc"]]],[11,"with","","Operate with a reference to the underlying data.",124,[[["self"],["f"]],["r"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",127,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",127,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",127,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",127,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",127,[[["self"]],["result"]]],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",127,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",127,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",127,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",127,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",127,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",127,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",127,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",127,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",127,[[["self"],["n"],["usize"]],["result",["async"]]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",130,[[["self"],["f"]],["r"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"map","jsonrpc_ws_server::tokio::prelude","Change the success value of this `Async` with the closure provided",26,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",26,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",26,[[["self"]],["bool"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",43,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",43,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",43,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",43,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",43,[[["self"]],["itermut"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into_iter","","",119,[[["self"]],["i"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_ws_server::tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",95,[[["self"]],["s"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",92,[[["self"]],["s"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",44,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",44,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",44,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",101,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",101,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",101,[[["self"]],["s"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",98,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",98,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",98,[[["self"]],["s"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",84,[[["self"]],["s"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"into_future","","",74,[[["self"]],["f"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",113,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"into_future","","",48,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",81,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",81,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",81,[[["self"]],["s"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",87,[[["self"]],["result",["async"]]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",79,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",79,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",79,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",79,[[["self"]],["option"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"into_future","","",79,[[["self"]],["f"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,[[["self"]],["option"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"into_future","","",72,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,[[["self"]],["s"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",97,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",97,[[["self"]],["s"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"send","","Sends a new value along this channel to the receiver.",125,[[["self"],["result"]],["futuresender"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",85,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,[[["self"]],["s"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",99,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",99,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",99,[[["self"]],["s"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",91,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",91,[[["self"]],["s"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",120,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",120,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",120,[[["self"]],["s"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into_iter","","",120,[[["self"]],["i"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",96,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",96,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",96,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",96,[[["self"]],["s"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",93,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",93,[[["self"]],["s"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"into_future","","",69,[[["self"]],["f"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"into_future","","",75,[[["self"]],["f"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"into_future","","",58,[[["self"]],["f"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",100,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",100,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",100,[[["self"]],["s"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,[[["self"]],["s"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",94,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",94,[[["self"]],["s"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"into_future","","",80,[[["self"]],["f"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",89,[[["self"]],["s"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"from","jsonrpc_ws_server::tokio::reactor","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"handle","","Returns a reference to the reactor handle.",173,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",173,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",173,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",173,N],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",171,[[],["result",["reactor","error"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",171,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",171,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",171,[[["self"],["option",["duration"]]],["result",["turn","error"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",171,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",171,[[["self"]],["result",["background","error"]]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"current","","Returns a handle to the current reactor.",169,[[],["handle"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",170,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",170,[[["e"],["handle"]],["result",["pollevented","error"]]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",170,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",170,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",170,[[["self"]],["result",["error"]]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",170,[[["self"],["ready"]],["result",["async","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",170,[[["self"],["ready"]],["result",["error"]]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",170,[[["self"]],["result",["async","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",170,[[["self"]],["result",["error"]]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"new","","Create a new `Registration`.",174,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",174,[[["self"],["t"]],["result",["bool","error"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",174,[[["self"],["t"]],["result",["error"]]]],[11,"register_with","","Register the I/O resource with the specified reactor.",174,[[["self"],["t"],["handle"]],["result",["bool","error"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",174,[[["self"]],["result",["async","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",174,[[["self"]],["result",["option","error"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",174,[[["self"]],["result",["async","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",174,[[["self"]],["result",["option","error"]]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::runtime::current_thread","Returns a new runtime builder initialized with default configuration values.",133,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",133,[[["self"],["clock"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",133,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime initialized with default configuration values.",141,[[],["result",["runtime","error"]]]],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",141,[[["self"]],["handle"]]],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",141,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",141,[[["self"],["f"]],["result"]]],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",141,[[["self"]],["result",["runerror"]]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",135,[[["self"],["f"]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",135,[[["self"]],["result",["spawnerror"]]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::runtime","Create a new runtime instance with default configuration values.",137,[[],["result",["runtime","error"]]]],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",137,[[["self"]],["handle"]]],[11,"executor","","Return a handle to the runtime's executor.",137,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",137,[[["self"],["f"]],["runtime"]]],[11,"block_on","","Run a future to completion on the Tokio runtime.",137,[[["self"],["f"]],["result"]]],[11,"block_on_all","","Run a future to completion on the Tokio runtime, then wait for all background futures to complete too.",137,[[["self"],["f"]],["result"]]],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",137,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",137,[[["self"]],["shutdown"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",132,N],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"new","","Returns a new runtime builder initialized with default configuration values.",134,[[],["builder"]]],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",134,[[["self"],["clock"]],["builder"]]],[11,"core_threads","","Set the maximum number of worker threads for the `Runtime`'s thread pool.",134,[[["self"],["usize"]],["builder"]]],[11,"blocking_threads","","Set the maximum number of concurrent blocking sections in the `Runtime`'s thread pool.",134,[[["self"],["usize"]],["builder"]]],[11,"name_prefix","","Set name prefix of threads spawned by the `Runtime`'s thread pool.",134,[[["self"],["s"]],["builder"]]],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",134,[[["self"],["usize"]],["builder"]]],[11,"build","","Create the configured `Runtime`.",134,[[["self"]],["result",["runtime","error"]]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"into_future","","",139,[[["self"]],["f"]]],[11,"new","jsonrpc_ws_server::tokio::timer","Create a new, empty, `DelayQueue`",177,[[],["delayqueue"]]],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",177,[[["usize"],["handle"]],["delayqueue"]]],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",177,[[["usize"]],["delayqueue"]]],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",177,[[["self"],["t"],["instant"]],["key"]]],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",177,[[["self"],["t"],["duration"]],["key"]]],[11,"remove","","Remove the item associated with `key` from the queue.",177,[[["self"],["key"]],["expired"]]],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",177,N],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",177,N],[11,"clear","","Clears the queue, removing all items.",177,N],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",177,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",177,N],[11,"is_empty","","Returns `true` if there are no items in the queue.",177,[[["self"]],["bool"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"get_ref","jsonrpc_ws_server::tokio::timer::delay_queue","Returns a reference to the inner value.",182,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner value.",182,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self` and returns the inner value.",182,[[["self"]],["t"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::timer","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",176,[[["t"],["duration"]],["timeout"]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",176,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",176,[[["self"]],["t"]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",176,[[["self"]],["t"]]],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",176,[[["t"],["instant"]],["timeout"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"into_future","","",176,[[["self"]],["f"]]],[11,"shutdown","","Create an error representing a shutdown timer.",181,[[],["error"]]],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",181,[[["self"]],["bool"]]],[11,"at_capacity","","Create an error representing a timer at capacity.",181,[[],["error"]]],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",181,[[["self"]],["bool"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"to_string","","",181,[[["self"]],["string"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",175,[[["instant"],["duration"]],["interval"]]],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",175,[[["duration"]],["interval"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"inner","jsonrpc_ws_server::tokio::timer::timeout","Create a new `Error` representing the inner value completing with `Err`.",180,[[["t"]],["error"]]],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",180,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self`, returning the inner future error.",180,[[["self"]],["option"]]],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",180,[[],["error"]]],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",180,[[["self"]],["bool"]]],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",180,[[["error"]],["error"]]],[11,"is_timer","","Returns `true` if the error was caused by the timer.",180,[[["self"]],["bool"]]],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",180,[[["self"]],["option",["error"]]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"to_string","","",180,[[["self"]],["string"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"new","jsonrpc_ws_server::tokio::timer","Create a new `Delay` instance that elapses at `deadline`.",178,[[["instant"]],["delay"]]],[11,"deadline","","Returns the instant at which the future will complete.",178,[[["self"]],["instant"]]],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",178,[[["self"]],["bool"]]],[11,"reset","","Reset the `Delay` instance to a new deadline.",178,N],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"into_future","","",178,[[["self"]],["f"]]],[11,"from","jsonrpc_ws_server","",30,[[["t"]],["t"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"to_string","","",32,[[["self"]],["string"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]]],"paths":[[4,"DomainsValidation"],[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[8,"Executor"],[8,"Read"],[8,"AsyncRead"],[4,"ErrorKind"],[8,"AsyncWrite"],[8,"Write"],[3,"UCred"],[8,"FutureExt"],[8,"Stream"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Sink"],[4,"AsyncSink"],[8,"Executor"],[8,"EventSet"],[8,"Unpark"],[8,"StreamExt"],[4,"Async"],[3,"ReuniteError"],[4,"MergedItem"],[8,"SessionStats"],[3,"Error"],[3,"RequestContext"],[4,"ErrorKind"],[4,"MiddlewareAction"],[3,"NoopExtractor"],[3,"Server"],[3,"CloseHandle"],[3,"ServerBuilder"],[8,"MetaExtractor"],[8,"RequestMiddleware"],[3,"Origin"],[3,"Error"],[3,"Host"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"SendError"],[3,"SharedError"],[3,"Err"],[3,"Concat"],[3,"Empty"],[3,"Flatten"],[3,"OrElse"],[3,"CatchUnwind"],[3,"Inspect"],[3,"Select2"],[3,"AndThen"],[3,"Select"],[3,"FromErr"],[3,"Collect"],[3,"Join"],[3,"PollFn"],[3,"SelectAll"],[3,"MapErr"],[3,"SelectNext"],[3,"Fuse"],[3,"Lazy"],[3,"LoopFn"],[3,"Join5"],[3,"Join4"],[3,"Concat2"],[3,"Join3"],[3,"Then"],[3,"StreamFuture"],[3,"Shared"],[3,"Fold"],[3,"ForEach"],[3,"Collect"],[3,"SelectOk"],[3,"Map"],[3,"Forward"],[3,"FutureSender"],[3,"InspectErr"],[3,"FromErr"],[3,"OrElse"],[3,"BufferUnordered"],[3,"SplitSink"],[3,"Take"],[3,"Peekable"],[3,"Then"],[3,"Buffered"],[3,"Flatten"],[3,"Inspect"],[3,"FilterMap"],[3,"TakeWhile"],[3,"SkipWhile"],[3,"Skip"],[3,"Fuse"],[3,"Chunks"],[3,"Filter"],[3,"AndThen"],[3,"Map"],[3,"MapErr"],[3,"IntoStream"],[3,"Empty"],[3,"Unfold"],[3,"Chain"],[3,"Repeat"],[3,"IterResult"],[3,"Iter"],[3,"Merge"],[3,"Once"],[3,"PollFn"],[3,"Zip"],[3,"SplitStream"],[3,"Select"],[3,"FlattenStream"],[3,"Receiver"],[3,"IterOk"],[3,"CatchUnwind"],[3,"IterMut"],[3,"Wait"],[3,"Task"],[3,"SharedItem"],[3,"UnparkEvent"],[3,"TaskRc"],[3,"Sender"],[3,"ExecuteError"],[3,"Spawn"],[3,"Run"],[3,"AtomicTask"],[3,"LocalKey"],[3,"LengthDelimitedCodec"],[3,"TaskExecutor"],[3,"Builder"],[3,"Builder"],[3,"Handle"],[3,"Spawn"],[3,"Runtime"],[3,"Builder"],[3,"Shutdown"],[3,"FrameTooBig"],[3,"Runtime"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"Shutdown"],[3,"FramedRead"],[3,"FramedWrite"],[3,"ReadToEnd"],[3,"WriteAll"],[3,"Copy"],[3,"WriteHalf"],[3,"ReadUntil"],[3,"Framed"],[3,"ReadExact"],[3,"ReadHalf"],[3,"Flush"],[3,"Lines"],[3,"LinesCodec"],[3,"BytesCodec"],[3,"SeekFuture"],[3,"OpenOptions"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"File"],[3,"Stderr"],[3,"Stdin"],[3,"SymlinkFuture"],[3,"Stdout"],[3,"OpenFuture"],[3,"Handle"],[3,"PollEvented2"],[3,"Reactor"],[3,"Turn"],[3,"Background"],[3,"Registration"],[3,"Interval"],[3,"Timeout"],[3,"DelayQueue"],[3,"Delay"],[3,"Key"],[3,"Error"],[3,"Error"],[3,"Expired"],[3,"TcpListener"],[3,"Incoming"],[3,"ConnectFuture"],[3,"TcpStream"],[3,"SendDgram"],[3,"UdpSocket"],[3,"UdpFramed"],[3,"RecvDgram"],[3,"UnixListener"],[3,"RecvDgram"],[3,"Incoming"],[3,"UnixDatagram"],[3,"UnixStream"],[3,"SendDgram"],[3,"ConnectFuture"]]};
initSearch(searchIndex);
